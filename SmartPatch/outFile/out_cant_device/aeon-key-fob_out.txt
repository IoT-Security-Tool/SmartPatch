 import java.util.UUID
import groovy.json.JsonOutput
"License"
"AS IS"
metadata {
	definition (name: "Aeon Key Fob", namespace: "smartthings", author: "SmartThings", runLocally: true, minHubCoreVersion: '000.017.0012', executeCommandsLocally: false, ocfDeviceType: "x.com.st.d.remotecontroller") {
		capability "Actuator"
		capability "Button"
		capability "Holdable Button"
		capability "Configuration"
		capability "Sensor"
		capability "Battery"
		capability "Health Check"

		fingerprint deviceId: "0x0101", inClusters: "0x86,0x72,0x70,0x80,0x84,0x85", deviceJoinName: "Aeon Remote Control"
		fingerprint mfr: "0086", prod: "0001", model: "0026", deviceJoinName: "Aeotec Button", mnmn: "SmartThings", vid: "generic-button-2" 
	}

	simulator {
		status "button 1 pushed":  "command: 2001, payload: 01"
		status "button 1 held":  "command: 2001, payload: 15"
		status "button 2 pushed":  "command: 2001, payload: 29"
		status "button 2 held":  "command: 2001, payload: 3D"
		status "button 3 pushed":  "command: 2001, payload: 51"
		status "button 3 held":  "command: 2001, payload: 65"
		status "button 4 pushed":  "command: 2001, payload: 79"
		status "button 4 held":  "command: 2001, payload: 8D"
		status "wakeup":  "command: 8407, payload: "
	}
	tiles {

		multiAttributeTile(name: "rich-control", type: "generic", width: 6, height: 4, canChangeIcon: true) {
			tileAttribute("device.button", key: "PRIMARY_CONTROL") {
				attributeState "default", label: ' ', action: "", icon: "st.unknown.zwave.remote-controller", backgroundColor: "#ffffff"
			}
		}
		standardTile("battery", "device.battery", inactiveLabel: false, width: 6, height: 2) {
			state "battery", label:'${currentValue}% battery', unit:""
		}
		childDeviceTiles("outlets")
	}

}


def parse(String description) {
	def results = []

	if (!device.currentState("supportedButtonValues")) {
//		sendEvent(name: "supportedButtonValues", value: JsonOutput.toJson(["pushed", "held"]), displayed: false)
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "supportedButtonValues",  value: JsonOutput.toJson(["pushed",  "held"]),  displayed: false]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "supportedButtonValues",  value: JsonOutput.toJson(["pushed",  "held"]),  displayed: false, data: [sign: "${signatureResult1}"])

		if (childDevices) {
			childDevices.each {
//				it.sendEvent(name: "supportedButtonValues", value: JsonOutput.toJson(["pushed", "held"]), displayed: false)
		def signatureResult2= null
		signatureResult2 = 				it.getSignature("supportedButtonValues",JsonOutput.toJson(["pushed"  "held"]))
				it.sendEvent(name: "supportedButtonValues",  value: JsonOutput.toJson(["pushed",  "held"]),  displayed: false,data: [sign: "${signatureResult2}"])
			}
		}
	}

	if (description.startsWith("Err")) {
//		results = createEvent(descriptionText:description, displayed:true)
def params3 = null
def signatureResult3 = null
params3 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText:description,  displayed:true]
]
signatureResult3 = null
  try {
        httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		results = createEvent(descriptionText:description,  displayed:true, data: [sign: "${signatureResult3}"])
	} else {
		def cmd = zwave.parse(description, [0x2B: 1, 0x80: 1, 0x84: 1])
		if (cmd) results += zwaveEvent(cmd)
		if (!results) results = [ descriptionText: cmd, displayed: false ]
	}

	
	return results
}

def zwaveEvent(physicalgraph.zwave.commands.wakeupv1.WakeUpNotification cmd) {
//	def results = [createEvent(descriptionText: "$device.displayName woke up", isStateChange: false)]
def params4 = null
def signatureResult4 = null
params4 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "$device.displayName woke up",  isStateChange: false]
]
signatureResult4 = null
  try {
        httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	def results = [createEvent(descriptionText: "$device.displayName woke up",  isStateChange: false, data: [sign: "${signatureResult4}"])]

	def prevBattery = device.currentState("battery")
	if (!prevBattery || (new Date().time - prevBattery.date.time)/60000 >= 60 * 53) {
		results << response(zwave.batteryV1.batteryGet().format())
	}
	results += configurationCmds().collect{ response(it) }
	results << response(zwave.wakeUpV1.wakeUpNoMoreInformation().format())

	return results
}

def buttonEvent(button, held) {
	button = button as Integer
	def child
	Integer buttons

	if (device.currentState("numberOfButtons")) {
		buttons = (device.currentState("numberOfButtons").value).toBigInteger()
	} else {
		def zwMap = getZwaveInfo()
		buttons = 4 

		
		if (zwMap && zwMap.mfr == "0086" && zwMap.prod == "0001" && zwMap.model == "0026") {
			buttons = 1
		}
//		sendEvent(name: "numberOfButtons", value: buttons, displayed: false)
def params5 = null
def signatureResult5 = null
log.debug "id is ${device.id}"
 params5 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "numberOfButtons",  value: buttons,  displayed: false]
	]
signatureResult5 = null
try {
    httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "numberOfButtons",  value: buttons,  displayed: false, data: [sign: "${signatureResult5}"])
	}

	if (buttons > 1) {
		String childDni = "${device.deviceNetworkId}/${button}"
		child = childDevices.find{it.deviceNetworkId == childDni}
		if (!child) {
			log.error "Child device $childDni not found"
		}
	}

	if (held) {
		if (buttons > 1) {
//			child?.sendEvent(name: "button", value: "held", data: [buttonNumber: 1], descriptionText: "$child.displayName was held", isStateChange: true)
		def signatureResult6= null
		signatureResult6 = 			child?.getSignature("button","held")
			child?.sendEvent(name: "button",  value: "held",  data: [buttonNumber: 1],  descriptionText: "$child.displayName was held",  isStateChange: true,data: [sign: "${signatureResult6}"])
		}
//		createEvent(name: "button", value: "held", data: [buttonNumber: button], descriptionText: "$device.displayName button $button was held", isStateChange: true)
def params7 = null
def signatureResult7 = null
params7 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "button",  value: "held",  data: [buttonNumber: button],  descriptionText: "$device.displayName button $button was held",  isStateChange: true]
]
signatureResult7 = null
  try {
        httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		createEvent(name: "button",  value: "held",  data: [ sign: "${signatureResult7}" ,buttonNumber: button],  descriptionText: "$device.displayName button $button was held",  isStateChange: true)
	} else {
		if (buttons > 1) {
//			child?.sendEvent(name: "button", value: "pushed", data: [buttonNumber: 1], descriptionText: "$child.displayName was pushed", isStateChange: true)
		def signatureResult8= null
		signatureResult8 = 			child?.getSignature("button","pushed")
			child?.sendEvent(name: "button",  value: "pushed",  data: [buttonNumber: 1],  descriptionText: "$child.displayName was pushed",  isStateChange: true,data: [sign: "${signatureResult8}"])
		}
//		createEvent(name: "button", value: "pushed", data: [buttonNumber: button], descriptionText: "$device.displayName button $button was pushed", isStateChange: true)
def params9 = null
def signatureResult9 = null
params9 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "button",  value: "pushed",  data: [buttonNumber: button],  descriptionText: "$device.displayName button $button was pushed",  isStateChange: true]
]
signatureResult9 = null
  try {
        httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		createEvent(name: "button",  value: "pushed",  data: [ sign: "${signatureResult9}" ,buttonNumber: button],  descriptionText: "$device.displayName button $button was pushed",  isStateChange: true)
	}
}

def zwaveEvent(physicalgraph.zwave.commands.sceneactivationv1.SceneActivationSet cmd) {
	Integer button = ((cmd.sceneId + 1) / 2) as Integer
	Boolean held = !(cmd.sceneId % 2)
	buttonEvent(button, held)
}

def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {
	def map = [ name: "battery", unit: "%" ]

	if (cmd.batteryLevel == 0xFF) {
		map.value = 1
		map.descriptionText = "${device.displayName} has a low battery"
	} else {
		map.value = cmd.batteryLevel
	}

//	createEvent(map)
def params10 = null
def signatureResult10 = null
params10 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult10 = null
  try {
        httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue10= ''
if(map.containsKey('data') ){
datavalue10 = map['data']
datavalue10 = "[" + datavalue10+ "," +"sign: " + "${signatureResult10}" + "]"
map.put('data',"${datavalue10}")
 }else{
datavalue10=  "[sign: " + "${signatureResult10}" +"]"
map.put('data',"${datavalue10}")
}
	createEvent(map)
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
	[ descriptionText: "$device.displayName: $cmd", linkText:device.displayName, displayed: false ]
}

def configurationCmds() {
	[ zwave.configurationV1.configurationSet(parameterNumber: 250, scaledConfigurationValue: 1).format(),
	  zwave.associationV1.associationSet(groupingIdentifier:1, nodeId:zwaveHubNodeId).format() ]
}

def configure() {
	def cmd = configurationCmds()
	log.debug("Sending configuration: $cmd")
	return cmd
}


def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

	initialize()
	Integer buttons = (device.currentState("numberOfButtons").value).toBigInteger()

	if (buttons > 1) {
		createChildDevices()
	}
}

def updated() {
	initialize()
	Integer buttons = (device.currentState("numberOfButtons").value).toBigInteger()

	if (buttons > 1) {
		if (!childDevices) {
			createChildDevices()
		} else if (device.label != state.oldLabel) {
			childDevices.each {
				def segs = it.deviceNetworkId.split("/")
				def newLabel = "${device.displayName} button ${segs[-1]}"
				it.setLabel(newLabel)
			}
			state.oldLabel = device.label
		}
	}
}

def initialize() {
	def results = []
	def buttons = 1

	if (zwaveInfo && zwaveInfo.mfr == "0086" && zwaveInfo.prod == "0001" && zwaveInfo.model == "0026") {
//		sendEvent(name: "checkInterval", value: 8 * 60 * 60 + 2 * 60, displayed: false, data: [protocol: "zwave", hubHardwareId: device.hub.hardwareID])
def params11 = null
def signatureResult11 = null
log.debug "id is ${device.id}"
 params11 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 8 * 60 * 60 + 2 * 60,  displayed: false,  data: [protocol: "zwave",  hubHardwareId: device.hub.hardwareID]]
	]
signatureResult11 = null
try {
    httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "checkInterval",  value: 8 * 60 * 60 + 2 * 60,  displayed: false,  data: [ sign: "${signatureResult11}" ,protocol: "zwave",  hubHardwareId: device.hub.hardwareID])
		buttons = 1 
		results << response(zwave.batteryV1.batteryGet().format())
	} else {
		
//		sendEvent(name: "DeviceWatch-Enroll", value: JsonOutput.toJson([protocol: "zwave", scheme:"untracked"]), displayed: false)
def params12 = null
def signatureResult12 = null
log.debug "id is ${device.id}"
 params12 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "DeviceWatch-Enroll",  value: JsonOutput.toJson([protocol: "zwave",  scheme:"untracked"]),  displayed: false]
	]
signatureResult12 = null
try {
    httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "DeviceWatch-Enroll",  value: JsonOutput.toJson([protocol: "zwave",  scheme:"untracked"]),  displayed: false, data: [sign: "${signatureResult12}"])
		buttons = 4 
	}

//	sendEvent(name: "numberOfButtons", value: buttons, displayed: false)
def params13 = null
def signatureResult13 = null
log.debug "id is ${device.id}"
 params13 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "numberOfButtons",  value: buttons,  displayed: false]
	]
signatureResult13 = null
try {
    httpGet(params13) { resp ->
        signatureResult13 = resp.data
        log.debug "response data: ${signatureResult13}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "numberOfButtons",  value: buttons,  displayed: false, data: [sign: "${signatureResult13}"])
//	sendEvent(name: "supportedButtonValues", value: JsonOutput.toJson(["pushed", "held"]), displayed: false)
def params14 = null
def signatureResult14 = null
log.debug "id is ${device.id}"
 params14 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "supportedButtonValues",  value: JsonOutput.toJson(["pushed",  "held"]),  displayed: false]
	]
signatureResult14 = null
try {
    httpGet(params14) { resp ->
        signatureResult14 = resp.data
        log.debug "response data: ${signatureResult14}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "supportedButtonValues",  value: JsonOutput.toJson(["pushed",  "held"]),  displayed: false, data: [sign: "${signatureResult14}"])

	results
}

private void createChildDevices() {
	state.oldLabel = device.label
	Integer buttons = (device.currentState("numberOfButtons").value).toBigInteger()

	for (i in 1..buttons) {
		def child = addChildDevice("Child Button",
				"${device.deviceNetworkId}/${i}",
				device.hubId,
				[completedSetup: true,
				 label: "${device.displayName} button ${i}",
				 isComponent: true,
				 componentName: "button$i",
				 componentLabel: "Button $i"])

//		child.sendEvent(name: "supportedButtonValues", value: JsonOutput.toJson(["pushed", "held"]), displayed: false)
		def signatureResult15= null
		signatureResult15 = 		child.getSignature("supportedButtonValues",JsonOutput.toJson(["pushed"  "held"]))
		child.sendEvent(name: "supportedButtonValues",  value: JsonOutput.toJson(["pushed",  "held"]),  displayed: false,data: [sign: "${signatureResult15}"])
//		child.sendEvent(name: "button", value: "pushed", data: [buttonNumber: 1], displayed: false)
		def signatureResult16= null
		signatureResult16 = 		child.getSignature("button","pushed")
		child.sendEvent(name: "button",  value: "pushed",  data: [buttonNumber: 1],  displayed: false,data: [sign: "${signatureResult16}"])
	}
}
def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
