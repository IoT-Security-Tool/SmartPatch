 import java.util.UUID
"License"
"AS IS"
import groovy.json.JsonOutput


metadata {
    definition (name: "Z-Wave Window Shade", namespace: "smartthings", author: "SmartThings", ocfDeviceType: "oic.d.blind") {
        capability "Window Shade"
        capability "Window Shade Preset"
        capability "Battery"
        capability "Refresh"
        capability "Health Check"
        capability "Actuator"
        capability "Sensor"

        command "stop"

        capability "Switch Level"   

        
        
        fingerprint type: "0x1107", cc: "0x5E,0x26", deviceJoinName: "Window Shade"
        fingerprint type: "0x9A00", cc: "0x5E,0x26", deviceJoinName: "Window Shade"


    }

    simulator {
        status "open":  "command: 2603, payload: FF"
        status "closed": "command: 2603, payload: 00"
        status "10%": "command: 2603, payload: 0A"
        status "66%": "command: 2603, payload: 42"
        status "99%": "command: 2603, payload: 63"
        status "battery 100%": "command: 8003, payload: 64"
        status "battery low": "command: 8003, payload: FF"

        
        reply "2001FF,delay 1000,2602": "command: 2603, payload: 10 FF FE"
        reply "200100,delay 1000,2602": "command: 2603, payload: 60 00 FE"
        reply "200142,delay 1000,2602": "command: 2603, payload: 10 42 FE"
        reply "200163,delay 1000,2602": "command: 2603, payload: 10 63 FE"
    }

    tiles(scale: 2) {
        multiAttributeTile(name:"windowShade", type: "lighting", width: 6, height: 4){
            tileAttribute ("device.windowShade", key: "PRIMARY_CONTROL") {
                attributeState "open", label:'${name}', action:"close", icon:"st.shades.shade-open", backgroundColor:"#79b821", nextState:"closing"
                attributeState "closed", label:'${name}', action:"open", icon:"st.shades.shade-closed", backgroundColor:"#ffffff", nextState:"opening"
                attributeState "partially open", label:'Open', action:"close", icon:"st.shades.shade-open", backgroundColor:"#79b821", nextState:"closing"
                attributeState "opening", label:'${name}', action:"stop", icon:"st.shades.shade-opening", backgroundColor:"#79b821", nextState:"partially open"
                attributeState "closing", label:'${name}', action:"stop", icon:"st.shades.shade-closing", backgroundColor:"#ffffff", nextState:"partially open"
            }
            tileAttribute ("device.level", key: "SLIDER_CONTROL") {
                attributeState "level", action:"setLevel"
            }
        }

        standardTile("home", "device.level", width: 2, height: 2, decoration: "flat") {
            state "default", label: "home", action:"presetPosition", icon:"st.Home.home2"
        }

        standardTile("refresh", "device.refresh", width: 2, height: 2, inactiveLabel: false, decoration: "flat") {
            state "default", label:'', action:"refresh.refresh", icon:"st.secondary.refresh", nextState: "disabled"
            state "disabled", label:'', action:"", icon:"st.secondary.refresh"
        }

        valueTile("battery", "device.battery", decoration: "flat", inactiveLabel: false, width: 2, height: 2) {
            state "battery", label:'${currentValue}% battery', unit:""
        }

        preferences {
            input "preset", "number", title: "Preset position", description: "Set the window shade preset position", defaultValue: 50, range: "1..100", required: false, displayDuringSetup: false
        }

        main(["windowShade"])
        details(["windowShade", "home", "refresh", "battery"])

    }
}

def parse(String description) {
    def result = null
    
    
    def cmd = zwave.parse(description, [0x20: 1, 0x26: 3])  
    if (cmd) {
        result = zwaveEvent(cmd)
    }
    log.debug "Parsed '$description' to ${result.inspect()}"
    return result
}

def getCheckInterval() {
    
    
    4 * 60 * 60
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

//    sendEvent(name: "checkInterval", value: checkInterval, displayed: false, data: [protocol: "zwave", hubHardwareId: device.hub.hardwareID, offlinePingable: "1"])
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: checkInterval,  displayed: false,  data: [protocol: "zwave",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"]]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "checkInterval",  value: checkInterval,  displayed: false,  data: [ sign: "${signatureResult1}" ,protocol: "zwave",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"])
//    sendEvent(name: "supportedWindowShadeCommands", value: JsonOutput.toJson(["open", "close", "pause"]), displayed: false)
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "supportedWindowShadeCommands",  value: JsonOutput.toJson(["open",  "close",  "pause"]),  displayed: false]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "supportedWindowShadeCommands",  value: JsonOutput.toJson(["open",  "close",  "pause"]),  displayed: false, data: [sign: "${signatureResult2}"])
    response(refresh())
}

def updated() {
    if (device.latestValue("checkInterval") != checkInterval) {
//        sendEvent(name: "checkInterval", value: checkInterval, displayed: false)
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: checkInterval,  displayed: false]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "checkInterval",  value: checkInterval,  displayed: false, data: [sign: "${signatureResult3}"])
    }
    if (!device.latestState("battery")) {
        response(zwave.batteryV1.batteryGet())
    }
}

def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd) {
    handleLevelReport(cmd)
}

def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicSet cmd) {
    handleLevelReport(cmd)
}

def zwaveEvent(physicalgraph.zwave.commands.switchmultilevelv3.SwitchMultilevelReport cmd) {
    handleLevelReport(cmd)
}

private handleLevelReport(physicalgraph.zwave.Command cmd) {
    def descriptionText = null
    def shadeValue = null

    def level = cmd.value as Integer
    if (level >= 99) {
        level = 100
        shadeValue = "open"
    } else if (level <= 0) {
        level = 0  
        shadeValue = "closed"
    } else {
        shadeValue = "partially open"
        descriptionText = "${device.displayName} shade is ${level}% open"
    }
//    def levelEvent = createEvent(name: "level", value: level, unit: "%", displayed: false)
def params4 = null
def signatureResult4 = null
params4 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: level,  unit: "%",  displayed: false]
]
signatureResult4 = null
  try {
        httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
    def levelEvent = createEvent(name: "level",  value: level,  unit: "%",  displayed: false, data: [sign: "${signatureResult4}"])
//    def stateEvent = createEvent(name: "windowShade", value: shadeValue, descriptionText: descriptionText, isStateChange: levelEvent.isStateChange)
def params5 = null
def signatureResult5 = null
params5 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade",  value: shadeValue,  descriptionText: descriptionText,  isStateChange: levelEvent.isStateChange]
]
signatureResult5 = null
  try {
        httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
    def stateEvent = createEvent(name: "windowShade",  value: shadeValue,  descriptionText: descriptionText,  isStateChange: levelEvent.isStateChange, data: [sign: "${signatureResult5}"])

    def result = [stateEvent, levelEvent]
    if (!state.lastbatt || now() - state.lastbatt > 24 * 60 * 60 * 1000) {
        log.debug "requesting battery"
        state.lastbatt = (now() - 23 * 60 * 60 * 1000) 
        result << response(["delay 15000", zwave.batteryV1.batteryGet().format()])
    }
    result
}

def zwaveEvent(physicalgraph.zwave.commands.switchmultilevelv3.SwitchMultilevelStopLevelChange cmd) {
//    [ createEvent(name: "windowShade", value: "partially open", displayed: false, descriptionText: "$device.displayName shade stopped"),
def params6 = null
def signatureResult6 = null
params6 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade",  value: "partially open",  displayed: false,  descriptionText: "$device.displayName shade stopped")]
]
signatureResult6 = null
  try {
        httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
    [ createEvent(name: "windowShade",  value: "partially open",  displayed: false,  descriptionText: "$device.displayName shade stopped"), data: [sign: "${signatureResult6}"]),
      response(zwave.switchMultilevelV1.switchMultilevelGet().format()) ]
}

def zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {
    def msr = String.format("%04X-%04X-%04X", cmd.manufacturerId, cmd.productTypeId, cmd.productId)
    updateDataValue("MSR", msr)
    if (cmd.manufacturerName) {
        updateDataValue("manufacturer", cmd.manufacturerName)
    }
//    createEvent([descriptionText: "$device.displayName MSR: $msr", isStateChange: false])
def params7 = null
def signatureResult7 = null
params7 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",[descriptionText: "$device.displayName MSR: $msr",  isStateChange: false]]
]
signatureResult7 = null
  try {
        httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
    createEvent([descriptionText: "$device.displayName MSR: $msr",  isStateChange: false], data: [sign: "${signatureResult7}"])
}

def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {
    def map = [ name: "battery", unit: "%" ]
    if (cmd.batteryLevel == 0xFF) {
        map.value = 1
        map.descriptionText = "${device.displayName} has a low battery"
        map.isStateChange = true
    } else {
        map.value = cmd.batteryLevel
    }
    state.lastbatt = now()
//    createEvent(map)
def params8 = null
def signatureResult8 = null
params8 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult8 = null
  try {
        httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue8= ''
if(map.containsKey('data') ){
datavalue8 = map['data']
datavalue8 = "[" + datavalue8+ "," +"sign: " + "${signatureResult8}" + "]"
map.put('data',"${datavalue8}")
 }else{
datavalue8=  "[sign: " + "${signatureResult8}" +"]"
map.put('data',"${datavalue8}")
}
    createEvent(map)
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
    log.debug "unhandled $cmd"
    return []
}

def open() {
    log.debug "open()"
    
    zwave.basicV1.basicSet(value: 99).format()
}

def close() {
    log.debug "close()"
    
    zwave.basicV1.basicSet(value: 0).format()
}

def setLevel(value, duration = null) {
    log.debug "setLevel(${value.inspect()})"
    Integer level = value as Integer
    if (level < 0) level = 0
    if (level > 99) level = 99
    delayBetween([
            zwave.basicV1.basicSet(value: level).format(),
            zwave.switchMultilevelV1.switchMultilevelGet().format()
    ])
}

def presetPosition() {
    setLevel(preset ?: state.preset ?: 50)
}

def pause() {
    log.debug "pause()"
    stop()
}

def stop() {
    log.debug "stop()"
    zwave.switchMultilevelV3.switchMultilevelStopLevelChange().format()
}

def ping() {
    zwave.switchMultilevelV1.switchMultilevelGet().format()
}

def refresh() {
    log.debug "refresh()"
    delayBetween([
            zwave.switchMultilevelV1.switchMultilevelGet().format(),
            zwave.batteryV1.batteryGet().format()
    ], 1500)
}
