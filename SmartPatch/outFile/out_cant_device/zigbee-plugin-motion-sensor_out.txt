 import java.util.UUID
"License"
"AS IS"
metadata {
    definition(name: "Zigbee Plugin Motion Sensor", namespace: "smartthings", author: "SmartThings", runLocally: false, mnmn: "SmartThings", vid: "SmartThings-smartthings-LAN_Wemo_Motion") {
        capability "Motion Sensor"
        capability "Configuration"
        capability "Refresh"
        capability "Health Check"
        capability "Sensor"
       
        fingerprint profileId: "0104", deviceId: "0107", inClusters: "0000, 0003, 0004, 0406", outClusters: "0006, 0019", model: "E280-KR0A0Z0-HA", deviceJoinName: "Smart Occupancy Sensor (AC Type)"
    }
    tiles(scale: 2) {
        multiAttributeTile(name: "motion", type: "generic", width: 6, height: 4) {
            tileAttribute("device.motion", key: "PRIMARY_CONTROL") {
                attributeState "active", label: 'motion', icon: "st.motion.motion.active", backgroundColor: "#00A0DC"
                attributeState "inactive", label: 'no motion', icon: "st.motion.motion.inactive", backgroundColor: "#cccccc"
            }
        }

        standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
            state "default", action: "refresh.refresh", icon: "st.secondary.refresh"
        }
        main(["motion"])
        details(["motion", "refresh"])
    }
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

    log.debug "installed"
}

def parse(String description) {
    log.debug "description(): $description"
    def map = zigbee.getEvent(description)
    if (!map) {
        def descMap = zigbee.parseDescriptionAsMap(description)
        if (descMap.clusterInt == 0x0406 && descMap.attrInt == 0x0000) { 
             map.name = "motion"
             map.value = descMap.value.endsWith("01") ? "active" : "inactive"
        }
    }
    log.debug "Parse returned $map"
//    def result = map ? createEvent(map) : [:]
def params1 = null
def signatureResult1 = null
params1 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult1 = null
  try {
        httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue1= ''
if(map.containsKey('data') ){
datavalue1 = map['data']
datavalue1 = "[" + datavalue1+ "," +"sign: " + "${signatureResult1}" + "]"
map.put('data',"${datavalue1}")
 }else{
datavalue1=  "[sign: " + "${signatureResult1}" +"]"
map.put('data',"${datavalue1}")
}
    def result = map ? createEvent(map): [:]
    if (description?.startsWith('enroll request')) {
        List cmds = zigbee.enrollResponse()
        log.debug "enroll response: ${cmds}"
        result = cmds?.collect { new physicalgraph.device.HubAction(it) }
    }
    return result
}


def ping() {
    log.debug "ping "
    refresh()
}

def refresh() {
    log.debug "Refreshing Values"
    zigbee.readAttribute(0x0406, 0x0000)
}

def configure() {
    log.debug "configure"
    
//    sendEvent(name: "checkInterval", value: 10 * 60 + 2 * 60, displayed: false, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID, offlinePingable: "1"])
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 10 * 60 + 2 * 60,  displayed: false,  data: [protocol: "zigbee",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"]]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "checkInterval",  value: 10 * 60 + 2 * 60,  displayed: false,  data: [ sign: "${signatureResult2}" ,protocol: "zigbee",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"])
    return refresh()
}
def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
