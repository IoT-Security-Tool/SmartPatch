 import java.util.UUID
import groovy.json.JsonOutput

metadata {
	definition (name: "AXIS Gear ST", namespace: "axis", author: "AXIS Labs", ocfDeviceType: "oic.d.blind", vid: "generic-shade-3") {  
		capability "Window Shade"
		capability "Window Shade Preset"
		capability "Switch Level"
		capability "Battery"
		capability "Refresh"
		capability "Health Check"
		capability "Actuator"
		capability "Configuration"
		
		// added in for Google Assistant Operability
		capability "Switch"		
		
		//Custom Commandes to achieve 25% increment control
		command "ShadesUp"
		command "ShadesDown"
		
		// command to stop blinds
		command "stop"
		command "getversion"
		
		fingerprint profileID: "0104", manufacturer: "AXIS", model: "Gear", deviceJoinName: "AXIS Window Treatment" //AXIS Gear
		fingerprint profileId: "0104", deviceId: "0202", inClusters: "0000, 0003, 0006, 0008, 0102, 0020, 0001", outClusters: "0019", manufacturer: "AXIS", model: "Gear", deviceJoinName: "AXIS Window Treatment" //AXIS Gear
		fingerprint endpointID: "01, C4", profileId: "0104, C25D", deviceId: "0202", inClusters: "0000, 0003, 0006, 0008, 0102, 0020, 0001", outClusters: "0019", manufacturer: "AXIS", model: "Gear", deviceJoinName: "AXIS Window Treatment" //AXIS Gear

		//ClusterIDs: 0000 - Basic; 0006 - On/Off; 0008 - Level Control; 0102 - Window Covering;
		//Updated 2017-06-21
		//Updated 2017-08-24 - added power cluster 0001 - added battery, level, reporting, & health check
		//Updated 2018-01-04 - Axis Inversion & Increased Battery Reporting interval to 1 hour (previously 5 mins)
		//Updated 2018-01-08 - Updated battery conversion from [0-100 : 00 - 64] to [0-100 : 00-C8] to reflect firmware update
		//Updated 2018-11-01 - added in configure reporting for refresh button, close when press on partial shade icon, update handler to parse between 0-254 as a percentage
		//Updated 2019-06-03 - modified to use Window Covering Cluster Commands and versioning tile and backwards compatibility (firmware and app), fingerprinting enabled
		//Updated 2019-08-09 - minor changes and improvements, onoff state reporting fixed
		//Updated 2019-11-11 - minor changes
	}
	
	tiles(scale: 2) {
		multiAttributeTile(name:"windowShade", type: "lighting", width: 3, height: 3) {
			tileAttribute("device.windowShade", key: "PRIMARY_CONTROL") {
				attributeState("open",  label: 'Open',  action:"close", icon:"http://i.imgur.com/4TbsR54.png", backgroundColor:"#ffcc33", nextState: "closing")
				attributeState("partially open", label: 'Partially Open', action:"close", icon:"http://i.imgur.com/vBA17WL.png", backgroundColor:"#ffcc33", nextState: "closing")
				attributeState("closed", label: 'Closed', action:"open",  icon:"http://i.imgur.com/mtHdMse.png", backgroundColor:"#bbbbdd", nextState: "opening")
				attributeState("opening", label: 'Opening', action: "stop", icon: "http://i.imgur.com/vBA17WL.png", backgroundColor: "#ffcc33", nextState: "stopping")
				attributeState("closing", label: 'Closing', action: "stop", icon: "http://i.imgur.com/vBA17WL.png", backgroundColor: "#bbbbdd", nextState: "stopping") 
				attributeState("stopping", label: 'Stopping',  icon: "http://i.imgur.com/vBA17WL.png", backgroundColor: "#ff7777") 
				attributeState("stoppingNS", label: 'Stopping Not Supported',  icon: "http://i.imgur.com/vBA17WL.png", backgroundColor: "#ff7777") 
				attributeState("unknown", label: 'Configuring.... Please Wait', icon:"http://i.imgur.com/vBA17WL.png", backgroundColor: "#ff7777") 
			}
			tileAttribute ("device.level", key: "VALUE_CONTROL") {
				attributeState("VALUE_UP", action: "ShadesUp")
				attributeState("VALUE_DOWN", action: "ShadesDown")
			}
		}
		//Added a "doubled" state to toggle states between positions
		standardTile("main", "device.windowShade"){
			state("open", label:'Open', action:"close", icon:"http://i.imgur.com/St7oRQl.png", backgroundColor:"#ffcc33", nextState: "closing")
			state("partially open", label:'Partial', action:"close",  icon:"http://i.imgur.com/y0ZpmZp.png", backgroundColor:"#ffcc33", nextState: "closing")
			state("closed", label:'Closed', action:"open", icon:"http://i.imgur.com/SAiEADI.png", backgroundColor:"#bbbbdd", nextState: "opening")
			state("opening", label: 'Opening', action: "stop", icon: "http://i.imgur.com/y0ZpmZp.png", backgroundColor: "#ffcc33", nextState: "stopping")
			state("closing", label: 'Closing', action: "stop", icon: "http://i.imgur.com/y0ZpmZp.png", backgroundColor: "#bbbbdd", nextState: "stopping")
			state("stopping", label: 'Stopping',  icon: "http://i.imgur.com/y0ZpmZp.png", backgroundColor: "#ff7777") 
			state("stoppingNS", label: 'Stopping Not Supported',  icon: "http://i.imgur.com/y0ZpmZp.png", backgroundColor: "#ff7777") 
			state("unknown", label: 'Configuring', icon:"http://i.imgur.com/y0ZpmZp.png", backgroundColor: "#ff7777") 
		}
		controlTile("mediumSlider", "device.level", "slider",decoration:"flat",height:2, width: 2, inactiveLabel: true) {
			state("level", action:"switch level.setLevel")
		}
		standardTile("contPause", "device.switch", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "stop", label:"", icon:'st.sonos.stop-btn', action:'stop'
		}
		valueTile("battery", "device.battery", inactiveLabel:false, decoration:"flat", width:2, height:1) {
			state "battery", label:'${currentValue}% battery', unit:""
		}
		standardTile("refresh", "device.refresh", inactiveLabel:false, decoration:"flat", width:2, height:1) {
			state "default", label:'', action:"refresh.refresh", icon:"st.secondary.refresh"
		}
		valueTile("version", "device.version", inactiveLabel:false, decoration:"flat", width:4, height:2) {
			state "version", label:'Version: ${currentValue}', unit:"", action: 'getversion'
		}
		standardTile("home", "device.level", width: 2, height: 2, decoration: "flat") {
			state "default", label: "Preset", action:"presetPosition", icon:"st.Home.home2"
		}
		preferences {
			input "preset", "number", title: "Preset position", description: "Set the window shade preset position", defaultValue: 50, required: false, displayDuringSetup: true, range:"1..100"
		}
		
		main(["main"])
		details(["windowShade", "mediumSlider", "contPause", "home", "version", "battery", "refresh"])
	}
}

//Declare Clusters
private getCLUSTER_BASIC() {0x0000}
private getBASIC_ATTR_SWBUILDID() {0x4000}

private getCLUSTER_POWER() {0x0001}
private getPOWER_ATTR_BATTERY() {0x0021}

private getCLUSTER_ONOFF() {0x0006}
private getONOFF_ATTR_ONOFFSTATE() {0x0000}

private getCLUSTER_LEVEL() {0x0008}
private getLEVEL_ATTR_LEVEL() {0x0000}
private getLEVEL_CMD_STOP() {0x03}

private getCLUSTER_WINDOWCOVERING() {0x0102}
private getWINDOWCOVERING_ATTR_LIFTPERCENTAGE() {0x0008}
private getWINDOWCOVERING_CMD_OPEN() {0x00}
private getWINDOWCOVERING_CMD_CLOSE() {0x01}
private getWINDOWCOVERING_CMD_STOP() {0x02}
private getWINDOWCOVERING_CMD_GOTOLIFTPERCENTAGE() {0x05}

private getMIN_WINDOW_COVERING_VERSION() {1093}

//Custom command to increment blind position by 25 %
def ShadesUp() {
	def shadeValue = device.latestValue("level") as Integer ?: 0 
	
	if (shadeValue < 100) {
		shadeValue = Math.min(25 * (Math.round(shadeValue / 25) + 1), 100) as Integer
	}
	else { 
		shadeValue = 100
	}
	//sendEvent(name:"level", value:shadeValue, displayed:true)
	setLevel(shadeValue)
	//sendEvent(name: "windowShade", value: "opening")
}

//Custom command to decrement blind position by 25 %
def ShadesDown() {
	def shadeValue = device.latestValue("level") as Integer ?: 0 
	
	if (shadeValue > 0) {
		shadeValue = Math.max(25 * (Math.round(shadeValue / 25) - 1), 0) as Integer
	}
	else { 
		shadeValue = 0
	}
	//sendEvent(name:"level", value:shadeValue, displayed:true)
	setLevel(shadeValue)
	//sendEvent(name: "windowShade", value: "closing")
}

def stop() {
	log.info "stop()"
	def shadeState = device.latestValue("windowShade")
	if (shadeState == "opening" || shadeState == "closing") {
		if (state.currentVersion >= MIN_WINDOW_COVERING_VERSION){
//			sendEvent(name: "windowShade", value: "stopping")
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade", value: "stopping"]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			sendEvent(name: "windowShade", value: "stopping", data: [sign: "${signatureResult1}"])
			return zigbee.command(CLUSTER_WINDOWCOVERING, WINDOWCOVERING_CMD_STOP)
		}
		else {
//			sendEvent(name: "windowShade", value: "stoppingNS")
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade", value: "stoppingNS"]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			sendEvent(name: "windowShade", value: "stoppingNS", data: [sign: "${signatureResult2}"])
			return zigbee.readAttribute(CLUSTER_LEVEL, LEVEL_ATTR_LEVEL, [delay:5000])
		}
	}
	else {
		if (state.currentVersion >= MIN_WINDOW_COVERING_VERSION){
			return zigbee.readAttribute(CLUSTER_WINDOWCOVERING, WINDOWCOVERING_ATTR_LIFTPERCENTAGE)    
		}
		else {
//			sendEvent(name: "windowShade", value: "stoppingNS")
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade", value: "stoppingNS"]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			sendEvent(name: "windowShade", value: "stoppingNS", data: [sign: "${signatureResult3}"])
			return zigbee.readAttribute(CLUSTER_LEVEL, LEVEL_ATTR_LEVEL, [delay:5000])  
		}
	}
}

def pause() {
	stop()
}

//Send Command through setLevel()
def on() {
	log.info "on()"
//	sendEvent(name: "windowShade", value: "opening")
def params4 = null
def signatureResult4 = null
log.debug "id is ${device.id}"
 params4 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade", value: "opening"]
	]
signatureResult4 = null
try {
    httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "windowShade", value: "opening", data: [sign: "${signatureResult4}"])
//	sendEvent(name: "switch", value: "on")
def params5 = null
def signatureResult5 = null
log.debug "id is ${device.id}"
 params5 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch", value: "on"]
	]
signatureResult5 = null
try {
    httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "switch", value: "on", data: [sign: "${signatureResult5}"])
	
	if (state.currentVersion >= MIN_WINDOW_COVERING_VERSION) {
		zigbee.command(CLUSTER_WINDOWCOVERING, WINDOWCOVERING_CMD_OPEN)
	}
	else {
		setLevel(100)
	}
}

//Send Command through setLevel()
def off() {
	log.info "off()"
//	sendEvent(name: "windowShade", value: "closing")
def params6 = null
def signatureResult6 = null
log.debug "id is ${device.id}"
 params6 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade", value: "closing"]
	]
signatureResult6 = null
try {
    httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "windowShade", value: "closing", data: [sign: "${signatureResult6}"])
//	sendEvent(name: "switch", value: "off")
def params7 = null
def signatureResult7 = null
log.debug "id is ${device.id}"
 params7 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch", value: "off"]
	]
signatureResult7 = null
try {
    httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "switch", value: "off", data: [sign: "${signatureResult7}"])
	close()
	//zigbee.off()
}

//Command to set the blind position (%) and log the event
def setLevel(value, rate=null) {
	log.info "setLevel ($value)"
	
	Integer currentLevel = state.level
	
	def i = value as Integer
//	sendEvent(name:"level", value: value, displayed:true)
def params8 = null
def signatureResult8 = null
log.debug "id is ${device.id}"
 params8 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"level", value: value, displayed:true]
	]
signatureResult8 = null
try {
    httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name:"level", value: value, displayed:true, data: [sign: "${signatureResult8}"])
	
	if ( i == 0) {
//		sendEvent(name: "switch", value: "off")
def params9 = null
def signatureResult9 = null
log.debug "id is ${device.id}"
 params9 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch", value: "off"]
	]
signatureResult9 = null
try {
    httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "switch", value: "off", data: [sign: "${signatureResult9}"])
	}
	else {
//		sendEvent(name: "switch", value: "on")
def params10 = null
def signatureResult10 = null
log.debug "id is ${device.id}"
 params10 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch", value: "on"]
	]
signatureResult10 = null
try {
    httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "switch", value: "on", data: [sign: "${signatureResult10}"])
	}
	
	if (i > currentLevel) {
//		sendEvent(name: "windowShade", value: "opening")
def params11 = null
def signatureResult11 = null
log.debug "id is ${device.id}"
 params11 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade", value: "opening"]
	]
signatureResult11 = null
try {
    httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "windowShade", value: "opening", data: [sign: "${signatureResult11}"])
	}
	else if (i < currentLevel) {
//		sendEvent(name: "windowShade", value: "closing")
def params12 = null
def signatureResult12 = null
log.debug "id is ${device.id}"
 params12 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade", value: "closing"]
	]
signatureResult12 = null
try {
    httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "windowShade", value: "closing", data: [sign: "${signatureResult12}"])
	}
	//setWindowShade(i)
	
	if (state.currentVersion >= MIN_WINDOW_COVERING_VERSION){
		zigbee.command(CLUSTER_WINDOWCOVERING,WINDOWCOVERING_CMD_GOTOLIFTPERCENTAGE, zigbee.convertToHexString(100-i,2))
	}
	else {
		zigbee.setLevel(i)
	}
}

//Send Command through setLevel()
def open() {
	log.info "open()"
//	sendEvent(name: "windowShade", value: "opening")
def params13 = null
def signatureResult13 = null
log.debug "id is ${device.id}"
 params13 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade", value: "opening"]
	]
signatureResult13 = null
try {
    httpGet(params13) { resp ->
        signatureResult13 = resp.data
        log.debug "response data: ${signatureResult13}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "windowShade", value: "opening", data: [sign: "${signatureResult13}"])
	if (state.currentVersion >= MIN_WINDOW_COVERING_VERSION){
		zigbee.command(CLUSTER_WINDOWCOVERING, WINDOWCOVERING_CMD_OPEN)
	}
	else {
		setLevel(100)
	}     
}
//Send Command through setLevel()
def close() {
	log.info "close()"
//	sendEvent(name: "windowShade", value: "closing")
def params14 = null
def signatureResult14 = null
log.debug "id is ${device.id}"
 params14 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade", value: "closing"]
	]
signatureResult14 = null
try {
    httpGet(params14) { resp ->
        signatureResult14 = resp.data
        log.debug "response data: ${signatureResult14}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "windowShade", value: "closing", data: [sign: "${signatureResult14}"])
	if (state.currentVersion >= MIN_WINDOW_COVERING_VERSION){
		zigbee.command(CLUSTER_WINDOWCOVERING, WINDOWCOVERING_CMD_CLOSE)
	}
	else {
		setLevel(0)
	}
}

def presetPosition() {
	log.info "presetPosition()"
	setLevel(preset ?: state.preset ?: 50)
}

//Reporting of Battery & position levels
def ping(){
	log.debug "Ping() "
	return refresh()
}

//Set blind State based on position (which shows appropriate image) 
def setWindowShade(value) {
	if ((value>0)&&(value<99)){
//		sendEvent(name: "windowShade", value: "partially open", displayed:true)
def params15 = null
def signatureResult15 = null
log.debug "id is ${device.id}"
 params15 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade", value: "partially open", displayed:true]
	]
signatureResult15 = null
try {
    httpGet(params15) { resp ->
        signatureResult15 = resp.data
        log.debug "response data: ${signatureResult15}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "windowShade", value: "partially open", displayed:true, data: [sign: "${signatureResult15}"])
	}
	else if (value >= 99) {
//		sendEvent(name: "windowShade", value: "open", displayed:true)
def params16 = null
def signatureResult16 = null
log.debug "id is ${device.id}"
 params16 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade", value: "open", displayed:true]
	]
signatureResult16 = null
try {
    httpGet(params16) { resp ->
        signatureResult16 = resp.data
        log.debug "response data: ${signatureResult16}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "windowShade", value: "open", displayed:true, data: [sign: "${signatureResult16}"])
	}
	else {
//		sendEvent(name: "windowShade", value: "closed", displayed:true)
def params17 = null
def signatureResult17 = null
log.debug "id is ${device.id}"
 params17 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade", value: "closed", displayed:true]
	]
signatureResult17 = null
try {
    httpGet(params17) { resp ->
        signatureResult17 = resp.data
        log.debug "response data: ${signatureResult17}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "windowShade", value: "closed", displayed:true, data: [sign: "${signatureResult17}"])
	}
}

//Refresh command
def refresh() {
	log.debug "parse() refresh"
	def cmds_refresh = null
	
	if (state.currentVersion >= MIN_WINDOW_COVERING_VERSION){
		cmds_refresh = zigbee.readAttribute(CLUSTER_WINDOWCOVERING, WINDOWCOVERING_ATTR_LIFTPERCENTAGE)
	}
	else {
		cmds_refresh = zigbee.readAttribute(CLUSTER_LEVEL, LEVEL_ATTR_LEVEL)

	}
	
	cmds_refresh = cmds_refresh + 
					zigbee.readAttribute(CLUSTER_POWER, POWER_ATTR_BATTERY) +
					zigbee.readAttribute(CLUSTER_BASIC, BASIC_ATTR_SWBUILDID)
	
	log.info "refresh() --- cmds: $cmds_refresh"
	
	return cmds_refresh
}

def getversion () {
	//state.currentVersion = 0
//	sendEvent(name: "version", value: "Checking Version ... ")     
def params18 = null
def signatureResult18 = null
log.debug "id is ${device.id}"
 params18 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "version", value: "Checking Version ... "]
	]
signatureResult18 = null
try {
    httpGet(params18) { resp ->
        signatureResult18 = resp.data
        log.debug "response data: ${signatureResult18}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "version", value: "Checking Version ... ", data: [sign: "${signatureResult18}"])
	return zigbee.readAttribute(CLUSTER_BASIC, BASIC_ATTR_SWBUILDID)
}

//configure reporting
def configure() {   
	state.currentVersion = 0
//	sendEvent(name: "windowShade", value: "unknown")
def params19 = null
def signatureResult19 = null
log.debug "id is ${device.id}"
 params19 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade", value: "unknown"]
	]
signatureResult19 = null
try {
    httpGet(params19) { resp ->
        signatureResult19 = resp.data
        log.debug "response data: ${signatureResult19}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "windowShade", value: "unknown", data: [sign: "${signatureResult19}"])
	log.debug "Configuring Reporting and Bindings."
//	sendEvent(name: "checkInterval", value: (2 * 60 * 60 + 10 * 60), displayed: true, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID])
def params20 = null
def signatureResult20 = null
log.debug "id is ${device.id}"
 params20 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval", value: (2 * 60 * 60 + 10 * 60), displayed: true, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID]]
	]
signatureResult20 = null
try {
    httpGet(params20) { resp ->
        signatureResult20 = resp.data
        log.debug "response data: ${signatureResult20}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "checkInterval", value: (2 * 60 * 60 + 10 * 60), displayed: true, data: [ sign: "${signatureResult20}" ,protocol: "zigbee", hubHardwareId: device.hub.hardwareID])
//	sendEvent(name: "supportedWindowShadeCommands", value: JsonOutput.toJson(["open", "close", "pause"]), displayed: false)
def params21 = null
def signatureResult21 = null
log.debug "id is ${device.id}"
 params21 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "supportedWindowShadeCommands", value: JsonOutput.toJson(["open", "close", "pause"]), displayed: false]
	]
signatureResult21 = null
try {
    httpGet(params21) { resp ->
        signatureResult21 = resp.data
        log.debug "response data: ${signatureResult21}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "supportedWindowShadeCommands", value: JsonOutput.toJson(["open", "close", "pause"]), displayed: false, data: [sign: "${signatureResult21}"])

	def attrs_refresh = zigbee.readAttribute(CLUSTER_BASIC, BASIC_ATTR_SWBUILDID) +
						zigbee.readAttribute(CLUSTER_WINDOWCOVERING, WINDOWCOVERING_ATTR_LIFTPERCENTAGE) +
						zigbee.readAttribute(CLUSTER_ONOFF, ONOFF_ATTR_ONOFFSTATE) +
						zigbee.readAttribute(CLUSTER_LEVEL, LEVEL_ATTR_LEVEL) +
						zigbee.readAttribute(CLUSTER_POWER, POWER_ATTR_BATTERY)
						
	def cmds = zigbee.configureReporting(CLUSTER_WINDOWCOVERING, WINDOWCOVERING_ATTR_LIFTPERCENTAGE, 0x20, 1, 3600, 0x00) + 
				zigbee.configureReporting(CLUSTER_ONOFF, ONOFF_ATTR_ONOFFSTATE, 0x10, 1, 3600, 0x00) +
				zigbee.configureReporting(CLUSTER_LEVEL, LEVEL_ATTR_LEVEL, 0x20, 1, 3600, 0x00) +
				zigbee.configureReporting(CLUSTER_POWER, POWER_ATTR_BATTERY, 0x20, 1, 3600, 0x01)
				
	log.info "configure() --- cmds: $cmds"
	return attrs_refresh + cmds
}

def parse(String description) {
	log.trace "parse() --- description: $description"
	
	Map map = [:]

	def event = zigbee.getEvent(description)
	if (event && description?.startsWith('on/off')) {
		log.trace "sendEvent(event)"
//		sendEvent(event)
def params22 = null
def signatureResult22 = null
log.debug "id is ${device.id}"
 params22 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${event?.name}", value: "${event?.value}"]
	]
signatureResult22 = null
try {
    httpGet(params22) { resp ->
        signatureResult22 = resp.data
        log.debug "response data: ${signatureResult22}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue22= ''
if(event.containsKey('data') ){
datavalue22 = event['data']
datavalue22 = "[" + datavalue22+ "," +"sign: " + "${signatureResult22}" + "]"
event.put('data',"${datavalue22}")
 }else{
datavalue22=  "[sign: " + "${signatureResult22}" +"]"
event.put('data',"${datavalue22}")
}
		sendEvent(event)
	}
	
	else if ((description?.startsWith('read attr -')) || (description?.startsWith('attr report -'))) {
		map = parseReportAttributeMessage(description)
//		def result = map ? createEvent(map) : null
def params23 = null
def signatureResult23 = null
params23 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",map) : nul]
]
signatureResult23 = null
  try {
        httpGet(params23) { resp ->
        signatureResult23 = resp.data
        log.debug "response data: ${signatureResult23}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		def result = map ? createEvent(map) : nul, data: [sign: "${signatureResult23}"]) : null
		log.debug "parse() --- returned: $result"
		return result
	}	
}

private Map parseReportAttributeMessage(String description) {
	Map descMap = zigbee.parseDescriptionAsMap(description)
	Map resultMap = [:]
	if (descMap.clusterInt == CLUSTER_POWER && descMap.attrInt == POWER_ATTR_BATTERY) {
		resultMap.name = "battery"
		def batteryValue = Math.round((Integer.parseInt(descMap.value, 16))/2)
		log.debug "parseDescriptionAsMap() --- Battery: $batteryValue"
		if ((batteryValue >= 0)&&(batteryValue <= 100)){
			resultMap.value = batteryValue
		}
		else {
			resultMap.value = 0
		}
	}
	else if (descMap.clusterInt == CLUSTER_WINDOWCOVERING && descMap.attrInt == WINDOWCOVERING_ATTR_LIFTPERCENTAGE && state.currentVersion >= MIN_WINDOW_COVERING_VERSION) {
		//log.debug "parse() --- returned windowcovering :$state.currentVersion "
		resultMap.name = "level"
		def levelValue = 100 - Math.round(Integer.parseInt(descMap.value, 16))
		//Set icon based on device feedback for the  open, closed, & partial configuration
		resultMap.value = levelValue
		state.level = levelValue
		setWindowShade(levelValue)
	}
	else if (descMap.clusterInt == CLUSTER_LEVEL && descMap.attrInt == LEVEL_ATTR_LEVEL) {
		//log.debug "parse() --- returned level :$state.currentVersion "
		def currentLevel = state.level 
		
		resultMap.name = "level"
		def levelValue = Math.round(Integer.parseInt(descMap.value, 16))
		def levelValuePercent = Math.round((levelValue/255)*100)
		//Set icon based on device feedback for the  open, closed, & partial configuration
		resultMap.value = levelValuePercent
		state.level = levelValuePercent
		
		if (state.currentVersion >= MIN_WINDOW_COVERING_VERSION) {
			//Integer currentLevel = state.level
//			sendEvent(name:"level", value: levelValuePercent, displayed:true)
def params24 = null
def signatureResult24 = null
log.debug "id is ${device.id}"
 params24 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"level", value: levelValuePercent, displayed:true]
	]
signatureResult24 = null
try {
    httpGet(params24) { resp ->
        signatureResult24 = resp.data
        log.debug "response data: ${signatureResult24}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			sendEvent(name:"level", value: levelValuePercent, displayed:true, data: [sign: "${signatureResult24}"])
			
			if (levelValuePercent > currentLevel) {
//				sendEvent(name: "windowShade", value: "opening")
def params25 = null
def signatureResult25 = null
log.debug "id is ${device.id}"
 params25 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade", value: "opening"]
	]
signatureResult25 = null
try {
    httpGet(params25) { resp ->
        signatureResult25 = resp.data
        log.debug "response data: ${signatureResult25}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
				sendEvent(name: "windowShade", value: "opening", data: [sign: "${signatureResult25}"])
			} else if (levelValuePercent < currentLevel) {
//				sendEvent(name: "windowShade", value: "closing")
def params26 = null
def signatureResult26 = null
log.debug "id is ${device.id}"
 params26 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade", value: "closing"]
	]
signatureResult26 = null
try {
    httpGet(params26) { resp ->
        signatureResult26 = resp.data
        log.debug "response data: ${signatureResult26}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
				sendEvent(name: "windowShade", value: "closing", data: [sign: "${signatureResult26}"])
			}
		}
		else {
			setWindowShade(levelValuePercent)
		}
	}
	else if (descMap.clusterInt == CLUSTER_BASIC && descMap.attrInt == BASIC_ATTR_SWBUILDID) {
		resultMap.name = "version"
		def versionString = descMap.value
		
		StringBuilder output = new StringBuilder("")
		StringBuilder output2 = new StringBuilder("")
		
		for (int i = 0; i < versionString.length(); i += 2) {
			String str = versionString.substring(i, i + 2)
			output.append((char) (Integer.parseInt(str, 16)))   
			if (i > 19) {
				output2.append((char) (Integer.parseInt(str, 16)))
			}
		} 
		
		def current = Integer.parseInt(output2.toString())
		state.currentVersion = current
		resultMap.value = output.toString()   
	}
	else {
		log.debug "parseReportAttributeMessage() --- ignoring attribute"
	}
	return resultMap
}
def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()
}
