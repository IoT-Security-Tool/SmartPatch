 import java.util.UUID
metadata {
	definition (name: "Simulated Color Control", namespace: "smartthings/testing", author: "SmartThings") {
    	capability "Color Control"
		capability "Sensor"
		capability "Actuator"
		capability "Health Check"
	}

	simulator {
		// TODO: define status and reply messages here
	}

	tiles {
    	controlTile("rgbSelector", "device.color", "color", height: 3, width: 3, inactiveLabel: false) {
            state "color"
        }
        valueTile("saturation", "device.saturation", inactiveLabel: false, decoration: "flat") {
            state "saturation", label: 'Sat ${currentValue}    '
        }
        valueTile("hue", "device.hue", inactiveLabel: false, decoration: "flat") {
            state "hue", label: 'Hue ${currentValue}   '
        }
        main "rgbSelector"
        details(["rgbSelector", "saturation", "hue"])
	}
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

	log.trace "Executing 'installed'"
	initialize()
}

def updated() {
	log.trace "Executing 'updated'"
	initialize()
}

private initialize() {
	log.trace "Executing 'initialize'"

//	sendEvent(name: "DeviceWatch-DeviceStatus", value: "online")
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "DeviceWatch-DeviceStatus", value: "online"]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "DeviceWatch-DeviceStatus", value: "online", data: [sign: "${signatureResult1}"])
//	sendEvent(name: "healthStatus", value: "online")
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "healthStatus", value: "online"]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "healthStatus", value: "online", data: [sign: "${signatureResult2}"])
//	sendEvent(name: "DeviceWatch-Enroll", value: [protocol: "cloud", scheme:"untracked"].encodeAsJson(), displayed: false)
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "DeviceWatch-Enroll", value: [protocol: "cloud", scheme:"untracked"].encodeAsJson(), displayed: false]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "DeviceWatch-Enroll", value: [protocol: "cloud", scheme:"untracked"].encodeAsJson(), displayed: false, data: [sign: "${signatureResult3}"])
}

// parse events into attributes
def parse(String description) {
	log.debug "Parsing '${description}'"

}

def setSaturation(percent) {
	log.debug "Executing 'setSaturation'"
//	sendEvent(name: "saturation", value: percent)
def params4 = null
def signatureResult4 = null
log.debug "id is ${device.id}"
 params4 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "saturation", value: percent]
	]
signatureResult4 = null
try {
    httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "saturation", value: percent, data: [sign: "${signatureResult4}"])
}

def setHue(percent) {
	log.debug "Executing 'setHue'"
//	sendEvent(name: "hue", value: percent)
def params5 = null
def signatureResult5 = null
log.debug "id is ${device.id}"
 params5 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "hue", value: percent]
	]
signatureResult5 = null
try {
    httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "hue", value: percent, data: [sign: "${signatureResult5}"])
}
