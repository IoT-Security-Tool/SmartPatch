 import java.util.UUID
/**
 *  Simulated Refrigerator Temperature Control
 *
 *  Copyright 2017 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
    definition (name: "Simulated Refrigerator Temperature Control", namespace: "smartthings/testing", author: "SmartThings") {
        capability "Temperature Measurement"
        capability "Thermostat Cooling Setpoint"
        capability "Health Check"

        command "tempUp"
        command "tempDown"
        command "setpointUp"
        command "setpointDown"
    }

    tiles {
        valueTile("refrigerator", "device.temperature", width: 2, height: 2, canChangeBackground: true) {
            state("temperature", label:'${currentValue}째', unit:"F",
                    backgroundColors:[
                            [value: 0, color: "#153591"],
                            [value: 40, color: "#1e9cbb"],
                            [value: 45, color: "#f1d801"]
                    ]
            )
        }
        valueTile("freezer", "device.temperature", width: 2, height: 2, canChangeBackground: true) {
            state("temperature", label:'${currentValue}째', unit:"F",
                    backgroundColors:[
                            [value: 0, color: "#153591"],
                            [value: 5, color: "#1e9cbb"],
                            [value: 15, color: "#f1d801"]
                    ]
            )
        }
        valueTile("freezerSetpoint", "device.coolingSetpoint", inactiveLabel: false, decoration: "flat") {
            state "setpoint", label:'Freezer Set: ${currentValue}째', unit:"F"
        }
        valueTile("refrigeratorSetpoint", "device.coolingSetpoint", inactiveLabel: false, decoration: "flat") {
            state "heat", label:'Fridge Set: ${currentValue}째', unit:"F"
        }
        standardTile("tempUp", "device.temperature", inactiveLabel: false, decoration: "flat") {
            state "default", action:"tempUp", icon:"st.thermostat.thermostat-up"
        }
        standardTile("tempDown", "device.temperature", inactiveLabel: false, decoration: "flat") {
            state "default", action:"tempDown", icon:"st.thermostat.thermostat-down"
        }
        standardTile("setpointUp", "device.coolingSetpoint", inactiveLabel: false, decoration: "flat") {
            state "default", action:"setpointUp", icon:"st.thermostat.thermostat-up"
        }
        standardTile("setpointDown", "device.coolingSetpoint", inactiveLabel: false, decoration: "flat") {
            state "default", action:"setpointDown", icon:"st.thermostat.thermostat-down"
        }
    }
}


def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

    initialize()
}

def updated() {
    initialize()
}

def initialize() {
//    sendEvent(name: "temperature", value: device.componentName == "freezer" ? 2 : 40)
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "temperature", value: device.componentName == "freezer" ? 2 : 40]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "temperature", value: device.componentName == "freezer" ? 2 : 40, data: [sign: "${signatureResult1}"])
//    sendEvent(name: "coolingSetpoint", value: device.componentName == "freezer" ? 2 : 40)
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "coolingSetpoint", value: device.componentName == "freezer" ? 2 : 40]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "coolingSetpoint", value: device.componentName == "freezer" ? 2 : 40, data: [sign: "${signatureResult2}"])

//    sendEvent(name: "DeviceWatch-DeviceStatus", value: "online")
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "DeviceWatch-DeviceStatus", value: "online"]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "DeviceWatch-DeviceStatus", value: "online", data: [sign: "${signatureResult3}"])
//    sendEvent(name: "healthStatus", value: "online")
def params4 = null
def signatureResult4 = null
log.debug "id is ${device.id}"
 params4 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "healthStatus", value: "online"]
	]
signatureResult4 = null
try {
    httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "healthStatus", value: "online", data: [sign: "${signatureResult4}"])
//    sendEvent(name: "DeviceWatch-Enroll", value: [protocol: "cloud", scheme:"untracked"].encodeAsJson(), displayed: false)
def params5 = null
def signatureResult5 = null
log.debug "id is ${device.id}"
 params5 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "DeviceWatch-Enroll", value: [protocol: "cloud", scheme:"untracked"].encodeAsJson(), displayed: false]
	]
signatureResult5 = null
try {
    httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "DeviceWatch-Enroll", value: [protocol: "cloud", scheme:"untracked"].encodeAsJson(), displayed: false, data: [sign: "${signatureResult5}"])
}


void tempUp() {
    def value = device.currentValue("temperature") as Integer
//    sendEvent(name: "temperature", value: value + 1)
def params6 = null
def signatureResult6 = null
log.debug "id is ${device.id}"
 params6 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "temperature", value: value + 1]
	]
signatureResult6 = null
try {
    httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "temperature", value: value + 1, data: [sign: "${signatureResult6}"])
}

void tempDown() {
    def value = device.currentValue("temperature") as Integer
//    sendEvent(name: "temperature", value: value - 1)
def params7 = null
def signatureResult7 = null
log.debug "id is ${device.id}"
 params7 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "temperature", value: value - 1]
	]
signatureResult7 = null
try {
    httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "temperature", value: value - 1, data: [sign: "${signatureResult7}"])
}

void setpointUp() {
    def value = device.currentValue("coolingSetpoint") as Integer
//    sendEvent(name: "coolingSetpoint", value: value + 1)
def params8 = null
def signatureResult8 = null
log.debug "id is ${device.id}"
 params8 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "coolingSetpoint", value: value + 1]
	]
signatureResult8 = null
try {
    httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "coolingSetpoint", value: value + 1, data: [sign: "${signatureResult8}"])
}

void setpointDown() {
    def value = device.currentValue("coolingSetpoint") as Integer
//    sendEvent(name: "coolingSetpoint", value: value - 1)
def params9 = null
def signatureResult9 = null
log.debug "id is ${device.id}"
 params9 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "coolingSetpoint", value: value - 1]
	]
signatureResult9 = null
try {
    httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "coolingSetpoint", value: value - 1, data: [sign: "${signatureResult9}"])
}
