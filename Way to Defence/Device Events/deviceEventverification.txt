// import UUID to generate ID_h
import java.util.UUID

definition(
    name: "deviceEventverification",
    namespace: "0000",
    author: "SmartPatch",
    description: "vefiry the device event",
    category: "My Apps",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")

preferences{
	input "switch2", "capability.switch", multiple: true, required: true, title: "which siwtch2?"
}

def installed(){
	// the url and path of the external web server
    // uri: should be changed if the external web server changes (ngrok http 8086)
    // path: just copy the path in the java codes of web server
    state.URL = "http://xxx.com"
    state.PATH = "/work"
    
    // generate ID_h for handler
    // the name of ID_h should be got from the subscription of device events
    state.ID_handler = UUID.randomUUID().toString()
    
	initialize()
}

def updated(){
	unsubscribe()
	initialize()
}

def initialize(){
    subscribe(switch2, "switch", handler)
}

def handler(evt){
	log.debug "handler..."
    
    // collect the evt.name evt.value evt.deviceId, evt.id, ID_h, signature, ID_e, and send to external web server for verificaiton
    // also remember to put  func: "verify", into the query parameter
    
    // get signature from evt.data
    def startIndex = evt.data.indexOf("-sign-") 
    def endIndex = evt.data.indexOf("+sign+") 
    if(startIndex == -1 || endIndex == -1){
    	log.trace "No signatrue in event"
        return
    }
    def signString = evt.data.substring(startIndex + "-sign-".length(),endIndex)
    
    // get ID_e from evt.data
    startIndex = evt.data.indexOf("-IDe-") 
    endIndex = evt.data.indexOf("+IDe+") 
    if(startIndex == -1 || endIndex == -1){
    	log.trace "No IDe in event"
        return
    }
    def ID_e = evt.data.substring(startIndex + "-IDe-".length(),endIndex)
    

    log.debug "evt.data: $evt.data \n sing is: $signString \n IDe is $ID_e \n"

    def params = [
        uri: state.URL,
        path: state.PATH,
        query: [func: "verify", name: "$evt.name", value: "$evt.value", deviceID: "$evt.deviceId", ID_e: ID_e, ID_h: state.ID_handler, sign: signString]
    ]
    
    def verify = null
    // get the verify result from the external web server
    try {
        httpGet(params) { resp ->
            verify = resp.data
            log.debug "response data: ${resp.data}"
        }
    } catch (e) {
        log.error "something went wrong: $e"
    }

	
	if("$verify".contentEquals('false\n')){
    	log.trace "event verification failed..."
        return
    }
	// end
    
	def showText = "\n"
	showText =  showText +  "event data $evt.data \n"
	showText =  showText + "event date $evt.date \n"
	showText =  showText +  "event description $evt.description \n"
	showText =  showText + "event descriptionText $evt.descriptionText \n"
	showText =  showText + "event device $evt.device \n"
	showText =  showText + "event displayName $evt.displayName \n"
	showText =  showText + "event deviceId $evt.deviceId \n"
	showText =  showText + "event id $evt.id \n"
	showText =  showText + "event hubId $evt.hubId \n"
	showText =  showText + "event installedSmartAppId $evt.installedSmartAppId \n"
	showText =  showText + "event location $evt.location \n"
	showText =  showText + "event name $evt.name \n"
	showText =  showText + "event source $evt.source \n"
	showText =  showText + "event unit $evt.unit \n"
	showText =  showText + "event value $evt.value \n"
	showText =  showText + "event isDigital ${evt.isDigital()} \n"
	showText =  showText + "event isPhysical ${evt.isPhysical()} \n"
	showText =  showText + "event isStateChange ${evt.isStateChange()} \n"
	log.trace "$showText"
}