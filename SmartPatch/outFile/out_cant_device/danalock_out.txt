 import java.util.UUID
"License"
"AS IS"
metadata {
	definition(name: "Danalock", namespace: "smartthings", author: "SmartThings") {
		capability "Lock"
		capability "Battery"
		capability "Polling"
		capability "Refresh"
		capability "Actuator"
		capability "Sensor"

		fingerprint deviceId: '0x4002', inClusters: '0x72,0x80,0x86,0x98', deviceJoinName: "Danalock Door Lock"
	}

	simulator {
		status "locked": "command: 9881, payload: 00 62 03 FF 00 07 FE FE"
		status "unlocked": "command: 9881, payload: 00 62 03 00 FF 06 FE FE"

		reply "9881006201FF,delay 4200,9881006202": "command: 9881, payload: 00 62 03 FF 00 07 FE FE"
		reply "988100620100,delay 4200,9881006202": "command: 9881, payload: 00 62 03 00 00 06 FE FE"
	}

	tiles(scale: 2) {
		multiAttributeTile(name:"toggle", type: "generic", width: 6, height: 4){
			tileAttribute("device.lock", key: "PRIMARY_CONTROL") {
				attributeState("locked", label:'locked', action:"lock.unlock", icon:"st.locks.lock.locked", backgroundColor:"#00a0dc", nextState:"unlocking")
				attributeState("unlocked", label:'unlocked', action:"lock.lock", icon:"st.locks.lock.unlocked", backgroundColor:"#ffffff", nextState:"locking")
				attributeState("unknown", label:"unknown", action:"lock.lock", icon:"st.locks.lock.unknown", backgroundColor:"#ffffff", nextState:"locking")
				attributeState("locking", label:'locking', icon:"st.locks.lock.locked", backgroundColor:"#00a0dc")
				attributeState("unlocking", label:'unlocking', icon:"st.locks.lock.unlocked", backgroundColor:"#ffffff")
			}
		}
		standardTile("lock", "device.lock", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "default", label:'lock', action:"lock.lock", icon:"st.locks.lock.locked", nextState:"locking"
		}
		standardTile("unlock", "device.lock", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "default", label:'unlock', action:"lock.unlock", icon:"st.locks.lock.unlocked", nextState:"unlocking"
		}
		valueTile("battery", "device.battery", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "battery", label:'${currentValue}% battery', unit:""
		}
		standardTile("refresh", "device.lock", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "default", label:'', action:"refresh.refresh", icon:"st.secondary.refresh"
		}

		main "toggle"
		details(["toggle", "lock", "unlock", "battery", "refresh"])
	}
}

import physicalgraph.zwave.commands.doorlockv1.*


private getCommandClassVersions() {
	[
		0x62: 1,  
		0x71: 2,  
		0x72: 2,  
		0x80: 1,  
		0x8A: 1,  
		0x85: 2,  
		0x98: 1   
	]
}

def parse(String description) {
	def result = null
	if (description.startsWith("Err")) {
		if (state.sec) {
//			result = createEvent(descriptionText:description, displayed:false)
def params1 = null
def signatureResult1 = null
params1 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText:description,  displayed:false]
]
signatureResult1 = null
  try {
        httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			result = createEvent(descriptionText:description,  displayed:false, data: [sign: "${signatureResult1}"])
		} else {
//			result = createEvent(
//				descriptionText: "This lock failed to complete the network security key exchange. If you are unable to control it via SmartThings, you must remove it from your network and add it again.",
//				eventType: "ALERT",
//				name: "secureInclusion",
//				value: "failed",
//				displayed: true,
//			)
def params2 = null
def signatureResult2 = null
params2 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",				descriptionText: "This lock failed to complete the network security key exchange. If you are unable to control it via SmartThings,  you must remove it from your network and add it again.", 				eventType: "ALERT", 				name: "secureInclusion", 				value: "failed", 				displayed: true, 			]
]
signatureResult2 = null
  try {
        httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			result = createEvent(				descriptionText: "This lock failed to complete the network security key exchange. If you are unable to control it via SmartThings,  you must remove it from your network and add it again.", 				eventType: "ALERT", 				name: "secureInclusion", 				value: "failed", 				displayed: true, 			, data: [sign: "${signatureResult2}"])
		}
	} else {
		def cmd = zwave.parse(description, commandClassVersions)
		if (cmd) {
			result = zwaveEvent(cmd)
		}
	}
	log.debug "\"$description\" parsed to ${result.inspect()}"
	result
}

def zwaveEvent(physicalgraph.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {
	def encapsulatedCommand = cmd.encapsulatedCommand(commandClassVersions)
	
	if (encapsulatedCommand) {
		zwaveEvent(encapsulatedCommand)
	}
}

def zwaveEvent(physicalgraph.zwave.commands.securityv1.NetworkKeyVerify cmd) {
//	createEvent(name:"secureInclusion", value:"success", descriptionText:"Secure inclusion was successful")
def params3 = null
def signatureResult3 = null
params3 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"secureInclusion",  value:"success",  descriptionText:"Secure inclusion was successful"]
]
signatureResult3 = null
  try {
        httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(name:"secureInclusion",  value:"success",  descriptionText:"Secure inclusion was successful", data: [sign: "${signatureResult3}"])
}

def zwaveEvent(physicalgraph.zwave.commands.securityv1.SecurityCommandsSupportedReport cmd) {
	state.sec = cmd.commandClassSupport.collect { String.format("%02X ", it) }.join()
	if (cmd.commandClassControl) {
		state.secCon = cmd.commandClassControl.collect { String.format("%02X ", it) }.join()
	}
	log.debug "Security command classes: $state.sec"
//	createEvent(name:"secureInclusion", value:"success", descriptionText:"$device.displayName is securely included")
def params4 = null
def signatureResult4 = null
params4 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"secureInclusion",  value:"success",  descriptionText:"$device.displayName is securely included"]
]
signatureResult4 = null
  try {
        httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(name:"secureInclusion",  value:"success",  descriptionText:"$device.displayName is securely included", data: [sign: "${signatureResult4}"])
}

def zwaveEvent(DoorLockOperationReport cmd) {
	def result = []
	def map = [ name: "lock" ]
	if (cmd.doorLockMode == 0xFF) {
		map.value = "locked"
	} else if (cmd.doorLockMode >= 0x40) {
		map.value = "unknown"
	} else if (cmd.doorLockMode & 1) {
		map.value = "unlocked with timeout"
	} else {
		map.value = "unlocked"
	}
//	result ? [createEvent(map), *result] : createEvent(map)
def params5 = null
def signatureResult5 = null
params5 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",map),  *result] : createEvent(map]
]
signatureResult5 = null
  try {
        httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	result ? [createEvent(map),  *result] : createEvent(map, data: [sign: "${signatureResult5}"]), *result] : createEvent(map)
}

def zwaveEvent(physicalgraph.zwave.commands.timev1.TimeGet cmd) {
	def result = []
	def now = new Date().toCalendar()
	if(location.timeZone) now.timeZone = location.timeZone
//	result << createEvent(descriptionText: "$device.displayName requested time update", displayed: false)
def params6 = null
def signatureResult6 = null
params6 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "$device.displayName requested time update",  displayed: false]
]
signatureResult6 = null
  try {
        httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	result << createEvent(descriptionText: "$device.displayName requested time update",  displayed: false, data: [sign: "${signatureResult6}"])
	result << response(secure(zwave.timeV1.timeReport(
		hourLocalTime: now.get(Calendar.HOUR_OF_DAY),
		minuteLocalTime: now.get(Calendar.MINUTE),
		secondLocalTime: now.get(Calendar.SECOND)))
	)
	result
}

def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicSet cmd) {
//	createEvent(name: "lock", value: cmd.value ? "unlocked" : "locked")
def params7 = null
def signatureResult7 = null
params7 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "lock",  value: cmd.value ? "unlocked" : "locked"]
]
signatureResult7 = null
  try {
        httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(name: "lock",  value: cmd.value ? "unlocked" : "locked", data: [sign: "${signatureResult7}"])
}

def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {
	def map = [ name: "battery", unit: "%" ]
	if (cmd.batteryLevel == 0xFF) {
		map.value = 1
		map.descriptionText = "$device.displayName has a low battery"
	} else {
		map.value = cmd.batteryLevel
	}
	state.lastbatt = new Date().time
//	createEvent(map)
def params8 = null
def signatureResult8 = null
params8 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult8 = null
  try {
        httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue8= ''
if(map.containsKey('data') ){
datavalue8 = map['data']
datavalue8 = "[" + datavalue8+ "," +"sign: " + "${signatureResult8}" + "]"
map.put('data',"${datavalue8}")
 }else{
datavalue8=  "[sign: " + "${signatureResult8}" +"]"
map.put('data',"${datavalue8}")
}
	createEvent(map)
}

def zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {
	def result = []

	def msr = String.format("%04X-%04X-%04X", cmd.manufacturerId, cmd.productTypeId, cmd.productId)
	log.debug "msr: $msr"
	updateDataValue("MSR", msr)

//	result << createEvent(descriptionText: "$device.displayName MSR: $msr", isStateChange: false)
def params9 = null
def signatureResult9 = null
params9 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "$device.displayName MSR: $msr",  isStateChange: false]
]
signatureResult9 = null
  try {
        httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	result << createEvent(descriptionText: "$device.displayName MSR: $msr",  isStateChange: false, data: [sign: "${signatureResult9}"])
	result
}

def zwaveEvent(physicalgraph.zwave.commands.versionv1.VersionReport cmd) {
	def fw = "${cmd.applicationVersion}.${cmd.applicationSubVersion}"
	updateDataValue("fw", fw)
	def text = "$device.displayName: firmware version: $fw, Z-Wave version: ${cmd.zWaveProtocolVersion}.${cmd.zWaveProtocolSubVersion}"
//	createEvent(descriptionText: text, isStateChange: false)
def params10 = null
def signatureResult10 = null
params10 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: text,  isStateChange: false]
]
signatureResult10 = null
  try {
        httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(descriptionText: text,  isStateChange: false, data: [sign: "${signatureResult10}"])
}

def zwaveEvent(physicalgraph.zwave.commands.applicationstatusv1.ApplicationBusy cmd) {
	def msg = cmd.status == 0 ? "try again later" :
	          cmd.status == 1 ? "try again in $cmd.waitTime seconds" :
	          cmd.status == 2 ? "request queued" : "sorry"
//	createEvent(displayed: false, descriptionText: "$device.displayName is busy, $msg")
def params11 = null
def signatureResult11 = null
params11 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",displayed: false,  descriptionText: "$device.displayName is busy,  $msg"]
]
signatureResult11 = null
  try {
        httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(displayed: false,  descriptionText: "$device.displayName is busy,  $msg", data: [sign: "${signatureResult11}"])
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
//	createEvent(displayed: false, descriptionText: "$device.displayName: $cmd")
def params12 = null
def signatureResult12 = null
params12 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",displayed: false,  descriptionText: "$device.displayName: $cmd"]
]
signatureResult12 = null
  try {
        httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(displayed: false,  descriptionText: "$device.displayName: $cmd", data: [sign: "${signatureResult12}"])
}

def lockAndCheck(doorLockMode) {
	secureSequence([
		zwave.doorLockV1.doorLockOperationSet(doorLockMode: doorLockMode),
		zwave.doorLockV1.doorLockOperationGet()
	], 4200)
}

def lock() {
	lockAndCheck(DoorLockOperationSet.DOOR_LOCK_MODE_DOOR_SECURED)
}

def unlock() {
	lockAndCheck(DoorLockOperationSet.DOOR_LOCK_MODE_DOOR_UNSECURED)
}

def unlockwtimeout() {
	lockAndCheck(DoorLockOperationSet.DOOR_LOCK_MODE_DOOR_UNSECURED_WITH_TIMEOUT)
}

def refresh() {
	def cmds = [secure(zwave.doorLockV1.doorLockOperationGet())]
	if (secondsPast(state.lastbatt, 60)) {
		cmds << "delay 8000"
		cmds << secure(zwave.batteryV1.batteryGet())
	}
	log.debug "refresh sending ${cmds.inspect()}"
	cmds
}

def poll() {
	def cmds = []
	
	def latest = device.currentState("lock")?.date?.time
	if (!latest || !secondsPast(latest, 6 * 60) || secondsPast(state.lastPoll, 67 * 60)) {
		cmds << secure(zwave.doorLockV1.doorLockOperationGet())
		state.lastPoll = (new Date()).time
	} else if (secondsPast(state.lastbatt, 53 * 3600)) {
		cmds << secure(zwave.batteryV1.batteryGet())
	}
	if(cmds) cmds << "delay 6000"
	log.debug "poll is sending ${cmds.inspect()}, state: ${state.inspect()}"
//	sendEvent(descriptionText: "poll sent ${cmds ?: 'nothing'}", isStateChange: false)  
def params13 = null
def signatureResult13 = null
log.debug "id is ${device.id}"
 params13 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "poll sent ${cmds ?: 'nothing'}",  isStateChange: false]
	]
signatureResult13 = null
try {
    httpGet(params13) { resp ->
        signatureResult13 = resp.data
        log.debug "response data: ${signatureResult13}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(descriptionText: "poll sent ${cmds ?: 'nothing'}",  isStateChange: false, data: [sign: "${signatureResult13}"])
	cmds ?: null
}

private secure(physicalgraph.zwave.Command cmd) {
	zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
}

private secureSequence(commands, delay=4200) {
	delayBetween(commands.collect{ secure(it) }, delay)
}

private Boolean secondsPast(timestamp, seconds) {
	if (!(timestamp instanceof Number)) {
		if (timestamp instanceof Date) {
			timestamp = timestamp.time
		} else if ((timestamp instanceof String) && timestamp.isNumber()) {
			timestamp = timestamp.toLong()
		} else {
			return true
		}
	}
	return (new Date().time - timestamp) > (seconds * 1000)
}
def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()
}
