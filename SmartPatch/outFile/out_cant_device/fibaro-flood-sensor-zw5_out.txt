 import java.util.UUID

metadata {
	definition(name: "Fibaro Flood Sensor ZW5", namespace: "FibarGroup", author: "Fibar Group", ocfDeviceType: "x.com.st.d.sensor.moisture") {
		capability "Battery"
		capability "Configuration"
		capability "Sensor"
		capability "Tamper Alert"
		capability "Temperature Measurement"
		capability "Water Sensor"
		capability "Power Source"
		capability "Health Check"

		attribute "syncStatus", "string"
		attribute "lastAlarmDate", "string"

		command "forceSync"

		fingerprint mfr: "010F", prod: "0B01", model: "1002", deviceJoinName: "Fibaro Water Leak Sensor"
		fingerprint mfr: "010F", prod: "0B01", model: "1003", deviceJoinName: "Fibaro Water Leak Sensor"
		fingerprint mfr: "010F", prod: "0B01", model: "2002", deviceJoinName: "Fibaro Water Leak Sensor"
		fingerprint mfr: "010F", prod: "0B01", deviceJoinName: "Fibaro Water Leak Sensor"
	}

	tiles(scale: 2) {
		multiAttributeTile(name: "FGFS", type: "lighting", width: 6, height: 4) {
			tileAttribute("device.water", key: "PRIMARY_CONTROL") {
				attributeState("dry", label: "Alarm not detected", icon: "http://fibaro-smartthings.s3-eu-west-1.amazonaws.com/flood/flood0sensor.png", backgroundColor: "#79b821")
				attributeState("wet", label: "Alarm detected", icon: "http://fibaro-smartthings.s3-eu-west-1.amazonaws.com/flood/flood1sensor.png", backgroundColor: "#ffa81e")
			}

			tileAttribute("device.multiStatus", key: "SECONDARY_CONTROL") {
				attributeState("multiStatus", label: '${currentValue}')
			}

		}

		valueTile("temperature", "device.temperature", inactiveLabel: false, width: 2, height: 2) {
			state "temperature", label: '${currentValue}Â°',
					backgroundColors: [
							[value: 31, color: "#153591"],
							[value: 44, color: "#1e9cbb"],
							[value: 59, color: "#90d2a7"],
							[value: 74, color: "#44b621"],
							[value: 84, color: "#f1d801"],
							[value: 95, color: "#d04e00"],
							[value: 96, color: "#bc2323"]
					]
		}

		valueTile("batteryStatus", "device.batteryStatus", inactiveLabel: false, decoration: "flat", width: 4, height: 2) {
			state "val", label: '${currentValue}'
		}

		standardTile("syncStatus", "device.syncStatus", decoration: "flat", width: 2, height: 2) {
			def syncIconUrl = "http://fibaro-smartthings.s3-eu-west-1.amazonaws.com/keyfob/sync_icon.png"
			state "synced", label: 'OK', action: "forceSync", backgroundColor: "#00a0dc", icon: syncIconUrl
			state "pending", label: "Pending", action: "forceSync", backgroundColor: "#153591", icon: syncIconUrl
			state "inProgress", label: "Syncing", action: "forceSync", backgroundColor: "#44b621", icon: syncIconUrl
			state "incomplete", label: "Incomplete", action: "forceSync", backgroundColor: "#f1d801", icon: syncIconUrl
			state "failed", label: "Failed", action: "forceSync", backgroundColor: "#bc2323", icon: syncIconUrl
			state "force", label: "Force", action: "forceSync", backgroundColor: "#e86d13", icon: syncIconUrl
		}

		main "FGFS"
		details(["FGFS", "batteryStatus", "temperature", "syncStatus"])
	}

	preferences {
		input(
			title: "Fibaro Flood Sensor settings",
			description: "Device's settings update is executed when device wakes up.\n" +
					"It may take up to 6 hours (for default wake up interval). \n" +
					"If you want immediate change, manually wake up device by clicking TMP button once.",
			type: "paragraph",
			element: "paragraph"
		)
		parameterMap().each {
			getPrefsFor(it)
		}

		input ( name: "logging", title: "Logging", type: "boolean", required: false )
	}
}

def installed(){
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

//  sendEvent(name: "checkInterval", value: (21600*2)+10*60, displayed: false, data: [protocol: "zwave", hubHardwareId: device.hub.hardwareID])
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: (21600*2)+10*60,  displayed: false,  data: [protocol: "zwave",  hubHardwareId: device.hub.hardwareID]]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
  sendEvent(name: "checkInterval",  value: (21600*2)+10*60,  displayed: false,  data: [ sign: "${signatureResult1}" ,protocol: "zwave",  hubHardwareId: device.hub.hardwareID])
}


def getPrefsFor(parameter) {
	input(
			title: "${parameter.num}. ${parameter.title}",
			description: parameter.descr,
			type: "paragraph",
			element: "paragraph"
	)
	input(
			name: parameter.key,
			title: null,
			type: parameter.type,
			options: parameter.options,
			range: (parameter.min != null && parameter.max != null) ? "${parameter.min}..${parameter.max}" : null,
			defaultValue: parameter.def,
			required: false
	)
}

def updated() {

	if (state.lastUpdated && (now() - state.lastUpdated) < 2000) return

	logging("${device.displayName} - Executing updated()", "info")
	def cmds = []
	def cmdCount = 0

	parameterMap().each {
		if (settings."$it.key" == null || state."$it.key" == null) {
			state."$it.key" = [value: it.def as Integer, state: "notSynced"]
		}

		if (settings."$it.key" != null) {
			if (state."$it.key".value != settings."$it.key" as Integer || state."$it.key".state == "notSynced") {
				state."$it.key".value = settings."$it.key" as Integer
				state."$it.key".state = "notSynced"
				cmdCount = cmdCount + 1
			}
		} else {
			if (state."$it.key".state == "notSynced") {
				cmdCount = cmdCount + 1
			}
		}
	}

	if (cmdCount > 0) {
		logging("${device.displayName} - sending config.", "info")
//		sendEvent(name: "syncStatus", value: "pending")
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "syncStatus",  value: "pending"]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "syncStatus",  value: "pending", data: [sign: "${signatureResult2}"])
	}

	state.lastUpdated = now()
}

def forceSync() {
	if (device.currentValue("syncStatus") != "force") {
		state.prevSyncState = device.currentValue("syncStatus")
//		sendEvent(name: "syncStatus", value: "force")
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "syncStatus",  value: "force"]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "syncStatus",  value: "force", data: [sign: "${signatureResult3}"])
	} else {
		if (state.prevSyncState != null) {
//			sendEvent(name: "syncStatus", value: state.prevSyncState)
def params4 = null
def signatureResult4 = null
log.debug "id is ${device.id}"
 params4 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "syncStatus",  value: state.prevSyncState]
	]
signatureResult4 = null
try {
    httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			sendEvent(name: "syncStatus",  value: state.prevSyncState, data: [sign: "${signatureResult4}"])
		} else {
//			sendEvent(name: "syncStatus", value: "synced")
def params5 = null
def signatureResult5 = null
log.debug "id is ${device.id}"
 params5 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "syncStatus",  value: "synced"]
	]
signatureResult5 = null
try {
    httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			sendEvent(name: "syncStatus",  value: "synced", data: [sign: "${signatureResult5}"])
		}
	}
}

def zwaveEvent(physicalgraph.zwave.commands.wakeupv2.WakeUpNotification cmd) {
	log.debug "WakeUpNotification"
//	def event = createEvent(descriptionText: "${device.displayName} woke up", displayed: false)
def params6 = null
def signatureResult6 = null
params6 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "${device.displayName} woke up",  displayed: false]
]
signatureResult6 = null
  try {
        httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	def event = createEvent(descriptionText: "${device.displayName} woke up",  displayed: false, data: [sign: "${signatureResult6}"])
	def cmds = []
	def cmdsSet = []
	def cmdsGet = []
	def cmdCount = 0
//	def results = [createEvent(descriptionText: "$device.displayName woke up", isStateChange: true)]
def params7 = null
def signatureResult7 = null
params7 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "$device.displayName woke up",  isStateChange: true]
]
signatureResult7 = null
  try {
        httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	def results = [createEvent(descriptionText: "$device.displayName woke up",  isStateChange: true, data: [sign: "${signatureResult7}"])]

	cmdsGet << zwave.batteryV1.batteryGet()
	cmdsGet << zwave.sensorMultilevelV5.sensorMultilevelGet(sensorType: 1, scale: 0)

	if (device.currentValue("syncStatus") != "synced") {

		parameterMap().each {
			if (state."$it.key"?.state != null && device.currentValue("syncStatus") == "force") {
				state."$it.key".state = "notSynced"
			}

			if (state."$it.key"?.value != null && state."$it.key"?.state == "notSynced") {
				cmdsSet << zwave.configurationV2.configurationSet(configurationValue: intToParam(state."$it.key".value, it.size), parameterNumber: it.num, size: it.size)
				cmdsGet << zwave.configurationV2.configurationGet(parameterNumber: it.num)
				cmdCount = cmdCount + 1
			}
		}

		log.debug "Not synced, syncing ${cmdCount} parameters"
//		sendEvent(name: "syncStatus", value: "inProgress")
def params8 = null
def signatureResult8 = null
log.debug "id is ${device.id}"
 params8 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "syncStatus",  value: "inProgress"]
	]
signatureResult8 = null
try {
    httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "syncStatus",  value: "inProgress", data: [sign: "${signatureResult8}"])
		runIn((5 + cmdCount * 1.5), syncCheck)

	}

	if (cmdsSet) {
		cmds = encapSequence(cmdsSet, 500)
		cmds << "delay 500"
	}

	cmds = cmds + encapSequence(cmdsGet, 1000)
	cmds << "delay " + (5000 + cmdCount * 1500)
	cmds << encap(zwave.wakeUpV1.wakeUpNoMoreInformation())
	results = results + response(cmds)

	return results
}


def syncCheck() {
	logging("${device.displayName} - Executing syncCheck()", "info")
	def notSynced = []
	def count = 0

	if (device.currentValue("syncStatus") != "synced") {
		parameterMap().each {
			if (state."$it.key"?.state == "notSynced") {
				notSynced << it
				logging "Sync failed! Verify parameter: ${notSynced[0].num}"
				logging "Sync $it.key " + state."$it.key"
//				sendEvent(name: "batteryStatus", value: "Sync incomplited! Check parameter nr. ${notSynced[0].num}")
def params9 = null
def signatureResult9 = null
log.debug "id is ${device.id}"
 params9 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "batteryStatus",  value: "Sync incomplited! Check parameter nr. ${notSynced[0].num}"]
	]
signatureResult9 = null
try {
    httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
				sendEvent(name: "batteryStatus",  value: "Sync incomplited! Check parameter nr. ${notSynced[0].num}", data: [sign: "${signatureResult9}"])
				count = count + 1
			}
		}
	}
	if (count == 0) {
		logging("${device.displayName} - Sync Complete", "info")
//		sendEvent(name: "syncStatus", value: "synced")
def params10 = null
def signatureResult10 = null
log.debug "id is ${device.id}"
 params10 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "syncStatus",  value: "synced"]
	]
signatureResult10 = null
try {
    httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "syncStatus",  value: "synced", data: [sign: "${signatureResult10}"])
	} else {
		logging("${device.displayName} Sync Incomplete", "info")
		if (device.currentValue("syncStatus") != "failed") {
//			sendEvent(name: "syncStatus", value: "incomplete")
def params11 = null
def signatureResult11 = null
log.debug "id is ${device.id}"
 params11 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "syncStatus",  value: "incomplete"]
	]
signatureResult11 = null
try {
    httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			sendEvent(name: "syncStatus",  value: "incomplete", data: [sign: "${signatureResult11}"])
		}
	}
}

def zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {
	log.debug "ManufacturerSpecificReport"
	log.debug "manufacturerId:	 ${cmd.manufacturerId}"
	log.debug "manufacturerName: ${cmd.manufacturerName}"
	log.debug "productId:		 ${cmd.productId}"
	log.debug "productTypeId:	 ${cmd.productTypeId}"
}

def zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.DeviceSpecificReport cmd) {
	log.debug "DeviceSpecificReport"
	log.debug "deviceIdData:				${cmd.deviceIdData}"
	log.debug "deviceIdDataFormat:			${cmd.deviceIdDataFormat}"
	log.debug "deviceIdDataLengthIndicator: ${cmd.deviceIdDataLengthIndicator}"
	log.debug "deviceIdType:				${cmd.deviceIdType}"
}

def zwaveEvent(physicalgraph.zwave.commands.versionv1.VersionReport cmd) {
	log.debug "VersionReport"
	log.debug "applicationVersion:		${cmd.applicationVersion}"
	log.debug "applicationSubVersion:	${cmd.applicationSubVersion}"
	log.debug "zWaveLibraryType:		${cmd.zWaveLibraryType}"
	log.debug "zWaveProtocolVersion:	${cmd.zWaveProtocolVersion}"
	log.debug "zWaveProtocolSubVersion: ${cmd.zWaveProtocolSubVersion}"
}

def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {
	log.debug "BatteryReport"
	log.debug "cmd: "+cmd
	log.debug "location: "+location
	def timeDate = location.timeZone ? new Date().format("yyyy MMM dd EEE h:mm:ss a", location.timeZone) : new Date().format("yyyy MMM dd EEE h:mm:ss")

	if (cmd.batteryLevel == 0xFF) {  
//		sendEvent(name: "battery", value: 1, descriptionText: "${device.displayName} has a low battery", isStateChange: true)
def params12 = null
def signatureResult12 = null
log.debug "id is ${device.id}"
 params12 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "battery",  value: 1,  descriptionText: "${device.displayName} has a low battery",  isStateChange: true]
	]
signatureResult12 = null
try {
    httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "battery",  value: 1,  descriptionText: "${device.displayName} has a low battery",  isStateChange: true, data: [sign: "${signatureResult12}"])
	} else {
//		sendEvent(name: "battery", value: cmd.batteryLevel, descriptionText: "Current battery level")
def params13 = null
def signatureResult13 = null
log.debug "id is ${device.id}"
 params13 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "battery",  value: cmd.batteryLevel,  descriptionText: "Current battery level"]
	]
signatureResult13 = null
try {
    httpGet(params13) { resp ->
        signatureResult13 = resp.data
        log.debug "response data: ${signatureResult13}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "battery",  value: cmd.batteryLevel,  descriptionText: "Current battery level", data: [sign: "${signatureResult13}"])
	}
//	sendEvent(name: "batteryStatus", value: "Battery: $cmd.batteryLevel%\n($timeDate)")
def params14 = null
def signatureResult14 = null
log.debug "id is ${device.id}"
 params14 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "batteryStatus",  value: "Battery: $cmd.batteryLevel%\n($timeDate)"]
	]
signatureResult14 = null
try {
    httpGet(params14) { resp ->
        signatureResult14 = resp.data
        log.debug "response data: ${signatureResult14}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "batteryStatus",  value: "Battery: $cmd.batteryLevel%\n($timeDate)", data: [sign: "${signatureResult14}"])
}

def zwaveEvent(physicalgraph.zwave.commands.notificationv3.NotificationReport cmd) {
	log.debug "NotificationReport"
	def map = [:]
	def alarmInfo = "Last alarm detection: "
	if (cmd.notificationType == 5) {
		switch (cmd.event) {
			case 2:
				map.name = "water"
				map.value = "wet"
				map.descriptionText = "${device.displayName} is ${map.value}"
				state.lastAlarmDate = "\n"+new Date().format("yyyy MMM dd EEE HH:mm:ss")
				
				multiStatusEvent(alarmInfo + state.lastAlarmDate)
				break

			case 0:
				map.name = "water"
				map.value = "dry"
				map.descriptionText = "${device.displayName} is ${map.value}"
				multiStatusEvent(alarmInfo + state.lastAlarmDate)
				break
		}
	} else if (cmd.notificationType == 7) {
		switch (cmd.event) {
			case 0:
				map.name = "tamper"
				map.value = "clear"
				map.descriptionText = "${device.displayName}: tamper alarm has been deactivated"
//				sendEvent(name: "batteryStatus", value: "Tamper alarm inactive")
def params15 = null
def signatureResult15 = null
log.debug "id is ${device.id}"
 params15 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "batteryStatus",  value: "Tamper alarm inactive"]
	]
signatureResult15 = null
try {
    httpGet(params15) { resp ->
        signatureResult15 = resp.data
        log.debug "response data: ${signatureResult15}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
				sendEvent(name: "batteryStatus",  value: "Tamper alarm inactive", data: [sign: "${signatureResult15}"])
				break

			case 3:
				map.name = "tamper"
				map.value = "detected"
				map.descriptionText = "${device.displayName}: tamper alarm activated"
//				sendEvent(name: "batteryStatus", value: "Tamper alarm activated")
def params16 = null
def signatureResult16 = null
log.debug "id is ${device.id}"
 params16 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "batteryStatus",  value: "Tamper alarm activated"]
	]
signatureResult16 = null
try {
    httpGet(params16) { resp ->
        signatureResult16 = resp.data
        log.debug "response data: ${signatureResult16}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
				sendEvent(name: "batteryStatus",  value: "Tamper alarm activated", data: [sign: "${signatureResult16}"])
				break
		}
	}
//	createEvent(map)
def params17 = null
def signatureResult17 = null
params17 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult17 = null
  try {
        httpGet(params17) { resp ->
        signatureResult17 = resp.data
        log.debug "response data: ${signatureResult17}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue17= ''
if(map.containsKey('data') ){
datavalue17 = map['data']
datavalue17 = "[" + datavalue17+ "," +"sign: " + "${signatureResult17}" + "]"
map.put('data',"${datavalue17}")
 }else{
datavalue17=  "[sign: " + "${signatureResult17}" +"]"
map.put('data',"${datavalue17}")
}
	createEvent(map)
}

private multiStatusEvent(String statusValue, boolean force = false, boolean display = false) {
	if (!device.currentValue("multiStatus")?.contains("Sync") || device.currentValue("multiStatus") == "Sync OK." || force) {
//		sendEvent(name: "multiStatus", value: statusValue, descriptionText: statusValue, displayed: display)
def params18 = null
def signatureResult18 = null
log.debug "id is ${device.id}"
 params18 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "multiStatus",  value: statusValue,  descriptionText: statusValue,  displayed: display]
	]
signatureResult18 = null
try {
    httpGet(params18) { resp ->
        signatureResult18 = resp.data
        log.debug "response data: ${signatureResult18}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "multiStatus",  value: statusValue,  descriptionText: statusValue,  displayed: display, data: [sign: "${signatureResult18}"])
	}
}

def zwaveEvent(physicalgraph.zwave.commands.sensormultilevelv5.SensorMultilevelReport cmd) {
	log.debug "SensorMultilevelReport"
	def map = [:]
	if (cmd.sensorType == 1) {
		
		def cmdScale = cmd.scale == 1 ? "F" : "C"
		map.value = convertTemperatureIfNeeded(cmd.scaledSensorValue, cmdScale, 1)
		map.unit = getTemperatureScale()
		map.name = "temperature"
		map.displayed = true
		log.debug "Temperature:" + map.value
//		createEvent(map)
def params19 = null
def signatureResult19 = null
params19 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult19 = null
  try {
        httpGet(params19) { resp ->
        signatureResult19 = resp.data
        log.debug "response data: ${signatureResult19}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue19= ''
if(map.containsKey('data') ){
datavalue19 = map['data']
datavalue19 = "[" + datavalue19+ "," +"sign: " + "${signatureResult19}" + "]"
map.put('data',"${datavalue19}")
 }else{
datavalue19=  "[sign: " + "${signatureResult19}" +"]"
map.put('data',"${datavalue19}")
}
		createEvent(map)
	}
}

def zwaveEvent(physicalgraph.zwave.commands.deviceresetlocallyv1.DeviceResetLocallyNotification cmd) {
	log.warn "Test10: DeviceResetLocallyNotification"
	log.info "${device.displayName}: received command: $cmd - device has reset itself"
}

def zwaveEvent(physicalgraph.zwave.commands.wakeupv2.WakeUpIntervalReport cmd) {
	log.warn cmd
}



def parse(String description) {
	def result = []
	logging("${device.displayName} - Parsing: ${description}")
	if (description.startsWith("Err 106")) {
//		result = createEvent(
//				descriptionText: "Failed to complete the network security key exchange. If you are unable to receive data from it, you must remove it from your network and add it again.",
//				eventType: "ALERT",
//				name: "secureInclusion",
//				value: "failed",
//				displayed: true,
//		)
def params20 = null
def signatureResult20 = null
params20 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "Failed to complete the network security key exchange. If you are unable to receive data from it,  you must remove it from your network and add it again.", 				eventType: "ALERT", 				name: "secureInclusion", 				value: "failed", 				displayed: true,]
]
signatureResult20 = null
  try {
        httpGet(params20) { resp ->
        signatureResult20 = resp.data
        log.debug "response data: ${signatureResult20}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result = createEvent(d sign: "${signatureResult20}" ,escriptionText: "Failed to complete the network security key exchange. If you are unable to receive data from it,  you must remove it from your network and add it again.", 				eventType: "ALERT", 				name: "secureInclusion", 				value: "failed", 				displayed: true,)
	} else if (description == "updated") {
		return null
	} else {
		def cmd = zwave.parse(description, cmdVersions())
		if (cmd) {
			logging("${device.displayName} - Parsed: ${cmd}")
			zwaveEvent(cmd)
		}
	}
}


def zwaveEvent(physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd) {
	def paramKey = parameterMap().find({ it.num == cmd.parameterNumber }).key
	logging("${device.displayName} - Parameter ${paramKey} value is ${cmd.scaledConfigurationValue} expected " + state."$paramKey".value, "info")
	if (state."$paramKey".value == cmd.scaledConfigurationValue) {
		state."$paramKey".state = "synced"
	}
}

def zwaveEvent(physicalgraph.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {
	def encapsulatedCommand = cmd.encapsulatedCommand(cmdVersions())
	if (encapsulatedCommand) {
		logging("${device.displayName} - Parsed SecurityMessageEncapsulation into: ${encapsulatedCommand}")
		zwaveEvent(encapsulatedCommand)
	} else {
		log.warn "Unable to extract Secure command from $cmd"
	}
}

def zwaveEvent(physicalgraph.zwave.commands.crc16encapv1.Crc16Encap cmd) {
	def version = cmdVersions()[cmd.commandClass as Integer]
	def ccObj = version ? zwave.commandClass(cmd.commandClass, version) : zwave.commandClass(cmd.commandClass)
	def encapsulatedCommand = ccObj?.command(cmd.command)?.parse(cmd.data)
	if (encapsulatedCommand) {
		logging("${device.displayName} - Parsed Crc16Encap into: ${encapsulatedCommand}")
		zwaveEvent(encapsulatedCommand)
	} else {
		log.warn "Unable to extract CRC16 command from $cmd"
	}
}

def zwaveEvent(physicalgraph.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd) {
	if (cmd.commandClass == 0x6C && cmd.parameter.size >= 4) { 
		
		cmd.parameter = cmd.parameter.drop(2)
		
		cmd.commandClass = cmd.parameter[0]
		cmd.command = cmd.parameter[1]
		cmd.parameter = cmd.parameter.drop(2)
	}
	def encapsulatedCommand = cmd.encapsulatedCommand(cmdVersions())
	if (encapsulatedCommand) {
		logging("${device.displayName} - Parsed MultiChannelCmdEncap ${encapsulatedCommand}")
		zwaveEvent(encapsulatedCommand, cmd.sourceEndPoint as Integer)
	} else {
		log.warn "Unable to extract MultiChannel command from $cmd"
	}
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
	
	log.debug "Unhandled: ${cmd.toString()}"
	[:]
}

private logging(text, type = "debug") {
	if (settings.logging == "true") {
		log."$type" text
	}
}

private secEncap(physicalgraph.zwave.Command cmd) {
	logging("${device.displayName} - encapsulating command using Secure Encapsulation, command: $cmd", "info")
	zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
}

private crcEncap(physicalgraph.zwave.Command cmd) {
	logging("${device.displayName} - encapsulating command using CRC16 Encapsulation, command: $cmd", "info")
	zwave.crc16EncapV1.crc16Encap().encapsulate(cmd).format()
}

private multiEncap(physicalgraph.zwave.Command cmd, Integer ep) {
	logging("${device.displayName} - encapsulating command using MultiChannel Encapsulation, ep: $ep command: $cmd", "info")
	zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint: ep).encapsulate(cmd)
}

private encap(physicalgraph.zwave.Command cmd, Integer ep) {
	encap(multiEncap(cmd, ep))
}

private encap(List encapList) {
	encap(encapList[0], encapList[1])
}

private encap(Map encapMap) {
	encap(encapMap.cmd, encapMap.ep)
}

private encap(physicalgraph.zwave.Command cmd) {
	if (zwaveInfo.zw.contains("s")) {
		secEncap(cmd)
	} else if (zwaveInfo?.cc?.contains("56")) {
		crcEncap(cmd)
	} else {
		logging("${device.displayName} - no encapsulation supported for command: $cmd", "info")
		cmd.format()
	}
}

private encapSequence(cmds, Integer delay = 250) {
	delayBetween(cmds.collect { encap(it) }, delay)
}

private List intToParam(Long value, Integer size = 1) {
	def result = []
	size.times {
		result = result.plus(0, (value & 0xFF) as Short)
		value = (value >> 8)
	}
	return result
}

def zwaveEvent(physicalgraph.zwave.commands.applicationstatusv1.ApplicationRejectedRequest cmd) {
	log.warn "Flood Sensor rejected configuration!"
//	sendEvent(name: "syncStatus", value: "failed")
def params21 = null
def signatureResult21 = null
log.debug "id is ${device.id}"
 params21 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "syncStatus",  value: "failed"]
	]
signatureResult21 = null
try {
    httpGet(params21) { resp ->
        signatureResult21 = resp.data
        log.debug "response data: ${signatureResult21}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "syncStatus",  value: "failed", data: [sign: "${signatureResult21}"])
}

def zwaveEvent(physicalgraph.zwave.commands.securityv1.NetworkKeyVerify cmd) {
	log.debug cmd
}

def zwaveEvent(physicalgraph.zwave.commands.securityv1.SecuritySchemeReport cmd) {
	log.debug cmd
}

def zwaveEvent(physicalgraph.zwave.commands.securityv1.SecurityCommandsSupportedReport cmd) {
	log.debug cmd
}





private Map cmdVersions() {
	[0x31: 5, 0x56: 1, 0x71: 3, 0x72: 2, 0x80: 1, 0x84: 2, 0x85: 2, 0x86: 1, 0x98: 1]
}

def configure() {
	state.lastAlarmDate = "-"
	def cmds = []
//	sendEvent(name: "water", value: "dry", displayed: "true")
def params22 = null
def signatureResult22 = null
log.debug "id is ${device.id}"
 params22 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "water",  value: "dry",  displayed: "true"]
	]
signatureResult22 = null
try {
    httpGet(params22) { resp ->
        signatureResult22 = resp.data
        log.debug "response data: ${signatureResult22}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "water",  value: "dry",  displayed: "true", data: [sign: "${signatureResult22}"])
	cmds += zwave.wakeUpV2.wakeUpIntervalSet(seconds: 21600, nodeid: zwaveHubNodeId)
	cmds += zwave.manufacturerSpecificV2.manufacturerSpecificGet()
	cmds += zwave.manufacturerSpecificV2.deviceSpecificGet()
	cmds += zwave.versionV1.versionGet()
	cmds += zwave.batteryV1.batteryGet()
	cmds += zwave.sensorMultilevelV5.sensorMultilevelGet(sensorType: 1, scale: 0)
	cmds += zwave.associationV2.associationSet(groupingIdentifier: 1, nodeId: [zwaveHubNodeId])
	cmds += zwave.wakeUpV2.wakeUpNoMoreInformation()
	encapSequence(cmds, 500)
}

private parameterMap() {
	[
			[key: "AlarmCancellationDelay", num: 1, size: 2, type: "number", def: 0, min: 0, max: 3600, title: "Alarm cancellation delay", descr: "Time period by which a Flood Sensor will retain the flood state after the flooding itself has ceased. 0-3600 (in seconds)"],
			[key: "AcousticVisualSignals", num: 2, size: 1, type: "enum", options: [
					0: "acoustic and visual alarms inactive",
					1: "acoustic alarm inactive, visual alarm active",
					2: "acoustic alarm active, visual alarm inactive",
					3: "acoustic and visual alarms active"],
			 def: 3, title: "Acoustic and visual signals on / off in case of flooding.", descr: ""],
			[key: "tempInterval", num: 10, size: 4, type: "number", def: 300, min: 1, max: 65535, title: "Interval of temperature measurements", descr: "How often the temperature will be measured (1-65535 in seconds)"],
			[key: "floodSensorOnOff", num: 77, size: 1, type: "enum", options: [
					0: "on",
					1: "off"],
			 def: 0, title: "Flood sensor functionality turned on/off", descr: "Allows to turn off the internal flood sensor. Tamper and built in temperature sensor will remain active."]
	]
}
def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
