 import java.util.UUID
"License"
"AS IS"
metadata {
	definition(name: "Aeotec Doorbell Siren 6", namespace: "smartthings", author: "SmartThings", mcdSync: true) {
		capability "Actuator"
		capability "Health Check"
		capability "Tamper Alert"
		capability "Alarm"
		capability "Chime"

		fingerprint mfr: "0371", prod: "0003", model: "00A2", deviceJoinName: "Aeotec Doorbell", ocfDeviceType: "x.com.st.d.doorbell" 
		fingerprint mfr: "0371", prod: "0103", model: "00A2", deviceJoinName: "Aeotec Doorbell", ocfDeviceType: "x.com.st.d.doorbell" 
		fingerprint mfr: "0371", prod: "0003", model: "00A4", deviceJoinName: "Aeotec Siren", ocfDeviceType: "x.com.st.d.siren" 
		fingerprint mfr: "0371", prod: "0103", model: "00A4", deviceJoinName: "Aeotec Siren", ocfDeviceType: "x.com.st.d.siren" 
		fingerprint mfr: "0371", prod: "0203", model: "00A4", deviceJoinName: "Aeotec Siren", ocfDeviceType: "x.com.st.d.siren" 
		fingerprint mfr: "0371", prod: "0203", model: "00A2", deviceJoinName: "Aeotec Doorbell", ocfDeviceType: "x.com.st.d.doorbell" 
	}

	tiles {
		multiAttributeTile(name: "alarm", type: "generic", width: 6, height: 4) {
			tileAttribute("device.alarm", key: "PRIMARY_CONTROL") {
				attributeState "off", label: 'off', action: 'alarm.siren', icon: "st.alarm.alarm.alarm", backgroundColor: "#ffffff"
				attributeState "both", label: 'ring!', action: 'alarm.off', icon: "st.alarm.alarm.alarm", backgroundColor: "#0e7507"
			}
		}
		standardTile("off", "device.alarm", inactiveLabel: false, decoration: "flat") {
			state "default", label: '', action: "alarm.off", icon: "st.secondary.off"
		}
		valueTile("tamper", "device.tamper", height: 2, width: 2, decoration: "flat") {
			state "clear", label: 'tamper clear', backgroundColor: "#ffffff"
			state "detected", label: 'tampered', backgroundColor: "#ffffff"
		}
		standardTile("refresh", "command.refresh", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "refresh", label: '', action: "refresh.refresh", icon: "st.secondary.refresh-icon"
		}

		main "alarm"
		details(["alarm", "off", "tamper", "refresh"])
	}
}

private getNumberOfSounds() {
	def numberOfSounds = [
			"0003" : 8, 
			"0103" : 8, 
			"0203" : 8 
	]
	return numberOfSounds[zwaveInfo.prod] ?: 1
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

	initialize()
//	sendEvent(name: "alarm", value: "off", isStateChange: true, displayed: false)
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "alarm",  value: "off",  isStateChange: true,  displayed: false]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "alarm",  value: "off",  isStateChange: true,  displayed: false, data: [sign: "${signatureResult1}"])
//	sendEvent(name: "chime", value: "off", isStateChange: true, displayed: false)
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "chime",  value: "off",  isStateChange: true,  displayed: false]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "chime",  value: "off",  isStateChange: true,  displayed: false, data: [sign: "${signatureResult2}"])
//	sendEvent(name: "tamper", value: "clear", isStateChange: true, displayed: false)
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "tamper",  value: "clear",  isStateChange: true,  displayed: false]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "tamper",  value: "clear",  isStateChange: true,  displayed: false, data: [sign: "${signatureResult3}"])
}

def updated() {
	initialize()
}

def initialize() {
	if (!childDevices) {
		addChildren(numberOfSounds)
	}
//	sendEvent(name: "checkInterval", value: 2 * 60 * 60 + 2 * 60, displayed: false, data: [protocol: "zwave", hubHardwareId: device.hub.hardwareID])
def params4 = null
def signatureResult4 = null
log.debug "id is ${device.id}"
 params4 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 2 * 60 * 60 + 2 * 60,  displayed: false,  data: [protocol: "zwave",  hubHardwareId: device.hub.hardwareID]]
	]
signatureResult4 = null
try {
    httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "checkInterval",  value: 2 * 60 * 60 + 2 * 60,  displayed: false,  data: [ sign: "${signatureResult4}" ,protocol: "zwave",  hubHardwareId: device.hub.hardwareID])
}

def parse(String description) {
	def result = null
	def cmd = zwave.parse(description)
	if (cmd) {
		result = zwaveEvent(cmd)
	}
	log.debug "Parse returned: ${result.inspect()}"
	return result
}

def zwaveEvent(physicalgraph.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd) {
	if (cmd.commandClass == 0x6C && cmd.parameter.size >= 4) { 
		
		cmd.parameter = cmd.parameter.drop(2)
		
		cmd.commandClass = cmd.parameter[0]
		cmd.command = cmd.parameter[1]
		cmd.parameter = cmd.parameter.drop(2)
	}
	def encapsulatedCommand = cmd.encapsulatedCommand()
	def endpoint = cmd.sourceEndPoint
	if (endpoint == state.lastTriggeredSound && encapsulatedCommand != null) {
		zwaveEvent(encapsulatedCommand)
	}
}

def zwaveEvent(physicalgraph.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {
	def securedEncapsulatedCommand = cmd.securedEncapsulatedCommand()
	if (securedEncapsulatedCommand) {
		zwaveEvent(securedEncapsulatedCommand)
	} else {
		log.warn "Unable to extract encapsulated cmd from $cmd"
//		createEvent(descriptionText: cmd.toString())
def params5 = null
def signatureResult5 = null
params5 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: cmd.toString()]
]
signatureResult5 = null
  try {
        httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		createEvent(descriptionText: cmd.toString(), data: [sign: "${signatureResult5}"])
	}
}

private onOffCmd(value) {
	encap(zwave.basicV1.basicSet(value: value))
}

def on() {
	resetActiveSound()
	state.lastTriggeredSound = 1
	onOffCmd(0xFF)
}

def off() {
	state.lastTriggeredSound = 1
	onOffCmd(0x00)
}

def strobe() {
	on()
}

def siren() {
	on()
}

def both() {
	on()
}

def ping() {
	def cmds = [
			encap(zwave.basicV1.basicGet())
	]
	sendHubCommand(cmds)
}

def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd) {
	if (cmd.value == 0) {
		keepChildrenOnline()
//		sendEvent(name: "alarm", value: "off", displayed: false)
def params6 = null
def signatureResult6 = null
log.debug "id is ${device.id}"
 params6 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "alarm",  value: "off",  displayed: false]
	]
signatureResult6 = null
try {
    httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "alarm",  value: "off",  displayed: false, data: [sign: "${signatureResult6}"])
	}
}

def refresh() {
	ping()
}

private addChildren(numberOfSounds) {
	for (def endpoint : 2..numberOfSounds) {
		try {
			String childDni = "${device.deviceNetworkId}:$endpoint"

			addChildDevice("Aeotec Doorbell Siren Child", childDni, device.getHub().getId(), [
					completedSetup: true,
					label         : "$device.displayName Sound $endpoint",
					isComponent   : true,
					componentName : "sound$endpoint",
					componentLabel: "Sound $endpoint"
			])
		} catch (Exception e) {
			log.debug "Excep: ${e} "
		}
	}
}

private encap(cmd, endpoint = null) {
	if (cmd) {
		if (endpoint && endpoint > 1) {
			cmd = zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint: endpoint).encapsulate(cmd)
		}
		if (zwaveInfo.zw.contains("s")) {
			zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
		} else {
			cmd.format()
		}
	}
}

def channelNumber(String dni) {
	dni[-1] as Integer
}

def zwaveEvent(physicalgraph.zwave.commands.notificationv3.NotificationReport cmd) {
	if (cmd.notificationStatus == 0xFF) {
		switch (cmd.event) {
			case 0x09: 
//				sendEvent(name: "tamper", value: "detected")
def params7 = null
def signatureResult7 = null
log.debug "id is ${device.id}"
 params7 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "tamper",  value: "detected"]
	]
signatureResult7 = null
try {
    httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
				sendEvent(name: "tamper",  value: "detected", data: [sign: "${signatureResult7}"])
				runIn(10, "clearTamper")
				break
			case 0x01: 
				if (state.lastTriggeredSound == 1) {
//					createEvent([name: "alarm", value: "both"])
def params8 = null
def signatureResult8 = null
params8 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",[name: "alarm",  value: "both"]]
]
signatureResult8 = null
  try {
        httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
					createEvent([name: "alarm",  value: "both"], data: [sign: "${signatureResult8}"])
				} else {
					setActiveSound(state.lastTriggeredSound)
				}
				break
			case 0x00: 
				resetActiveSound()
//				createEvent([name: "tamper", value: "clear"])
def params9 = null
def signatureResult9 = null
params9 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",[name: "tamper",  value: "clear"]]
]
signatureResult9 = null
  try {
        httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
				createEvent([name: "tamper",  value: "clear"], data: [sign: "${signatureResult9}"])
				break
		}
	}
}

def clearTamper() {
//	sendEvent(name: "tamper", value: "clear")
def params10 = null
def signatureResult10 = null
log.debug "id is ${device.id}"
 params10 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "tamper",  value: "clear"]
	]
signatureResult10 = null
try {
    httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "tamper",  value: "clear", data: [sign: "${signatureResult10}"])
}

def setOnChild(deviceDni) {
	resetActiveSound()
	sendHubCommand encap(zwave.basicV1.basicSet(value: 0xFF), channelNumber(deviceDni))
	state.lastTriggeredSound = channelNumber(deviceDni)
	setActiveSound(state.lastTriggeredSound)
}

def setOffChild(deviceDni) {
	sendHubCommand encap(zwave.basicV1.basicSet(value: 0x00), channelNumber(deviceDni))
}

def resetActiveSound() {
	if (state.lastTriggeredSound > 1) {
		String childDni = "${device.deviceNetworkId}:$state.lastTriggeredSound"
		def child = childDevices.find { it.deviceNetworkId == childDni }

		setOffChild(childDni)
//		child?.sendEvent([name: "chime", value: "off"])
		def signatureResult11= null
		signatureResult11 = 		child?.getSignature("chime","off")
		child?.sendEvent(name: "chime",  value: "off",data: [sign: "${signatureResult11}"])
//		child?.sendEvent([name: "alarm", value: "off"])
		def signatureResult12= null
		signatureResult12 = 		child?.getSignature("alarm","off")
		child?.sendEvent(name: "alarm",  value: "off",data: [sign: "${signatureResult12}"])
	} else {
		sendHubCommand(onOffCmd(0x00))
	}
//	sendEvent([name: "alarm", value: "off"])
def params13 = null
def signatureResult13 = null
log.debug "id is ${device.id}"
 params13 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "alarm",  value: "off"]
	]
signatureResult13 = null
try {
    httpGet(params13) { resp ->
        signatureResult13 = resp.data
        log.debug "response data: ${signatureResult13}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "alarm",  value: "off", data: [sign: "${signatureResult13}"])
//	sendEvent([name: "chime", value: "off"])
def params14 = null
def signatureResult14 = null
log.debug "id is ${device.id}"
 params14 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "chime",  value: "off"]
	]
signatureResult14 = null
try {
    httpGet(params14) { resp ->
        signatureResult14 = resp.data
        log.debug "response data: ${signatureResult14}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "chime",  value: "off", data: [sign: "${signatureResult14}"])
}

def setActiveSound(soundId) {
	String childDni = "${device.deviceNetworkId}:${soundId}"
	def child = childDevices.find { it.deviceNetworkId == childDni }
//	child?.sendEvent([name: "chime", value: "chime"])
		def signatureResult15= null
		signatureResult15 = 	child?.getSignature("chime","chime")
	child?.sendEvent(name: "chime",  value: "chime",data: [sign: "${signatureResult15}"])
}

def keepChildrenOnline() {
	
	for (def i : 2..numberOfSounds) {
		def soundNumber = i
		String childDni = "${device.deviceNetworkId}:$soundNumber"
		def child = childDevices.find { it.deviceNetworkId == childDni }
//		child?.sendEvent(name: "chime", value: "off", displayed: false)
		def signatureResult16= null
		signatureResult16 = 		child?.getSignature("chime","off")
		child?.sendEvent(name: "chime",  value: "off",  displayed: false,data: [sign: "${signatureResult16}"])
	}
}
def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
