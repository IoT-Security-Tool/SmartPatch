 import java.util.UUID
"AS IS"

import physicalgraph.zigbee.zcl.DataType

metadata {

	preferences {
        input("trace", "bool", title: "Trace", description: "Set it to true to enable tracing")
		input("logFilter", "number", title: "Trace level", range: "1..5",
			description: "1= ERROR only, 2= <1+WARNING>, 3= <2+INFO>, 4= <3+DEBUG>, 5= <4+TRACE>")
    }
    
    definition (name: "VA4200WZ-VA4200ZB Sinope Valve", namespace: "Sinope Technologies", author: "Sinope Technologies",  ocfDeviceType: "oic.d.watervalve") {
        capability "Configuration"
        capability "Refresh"
        capability "Actuator"
        capability "Valve"
        capability "Battery"
        capability "Power Source"
        capability "Health Check"
        
        fingerprint  manufacturer: "Sinope Technologies", model: "VA4200WZ", deviceJoinName: "Sinope Valve" 
        fingerprint  manufacturer: "Sinope Technologies", model: "VA4200ZB", deviceJoinName: "Sinope Valve" 
    }

    tiles(scale: 2) {
        multiAttributeTile(name:"valve", type: "generic", width: 6, height: 4, canChangeIcon: true){
            tileAttribute ("device.valve", key: "PRIMARY_CONTROL") {
                attributeState "open", label: '${name}', action: "valve.close", icon: "st.valves.water.open", backgroundColor: "#00A0DC", nextState:"closing"
                attributeState "closed", label: '${name}', action: "valve.open", icon: "st.valves.water.closed", backgroundColor: "#ffffff", nextState:"opening"
                attributeState "opening", label: '${name}', action: "valve.close", icon: "st.valves.water.open", backgroundColor: "#00A0DC", nextState:"closing"
                attributeState "closing", label: '${name}', action: "valve.open", icon: "st.valves.water.closed", backgroundColor: "#ffffff", nextState:"opening"
            }
            tileAttribute ("powerSource", key: "SECONDARY_CONTROL") {
                attributeState "powerSource", label:'Power Source: ${currentValue}'
            }
        }

        valueTile("battery", "device.battery", inactiveLabel:false, decoration:"flat", width:2, height:2) {
            state "battery", label:'${currentValue}% battery', unit:""
        }

        standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
            state "default", label:"", action:"refresh.refresh", icon:"st.secondary.refresh"
        }

        main(["valve"])
        details(["valve", "battery", "refresh"])
    }
}

def open() {
    zigbee.on()
}

def close() {
    zigbee.off()
}

def refresh() {
    traceEvent(settings.logFilter, "refresh called", settings.trace, get_LOG_DEBUG())
    def cmds = []
    cmds += zigbee.readAttribute(0x0006, 0x0000)
    cmds += zigbee.readAttribute(0x0000, 0x0007)
    cmds += zigbee.readAttribute(0x0001, 0x0021)
    cmds += zigbee.configureReporting(0x0006, 0x0000, 0x10, 0, 600, null)
    cmds += zigbee.configureReporting(0x0001, 0x0021, 0x20, 60, 60*60, 1)
    return sendZigbeeCommands(cmds)
}

def configure() {
    traceEvent(settings.logFilter, "Configuring Reporting and Bindings", settings.trace, get_LOG_DEBUG())

    
//	sendEvent(name: "checkInterval", value: 15*60, displayed: false, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID])
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 15*60,  displayed: false,  data: [protocol: "zigbee",  hubHardwareId: device.hub.hardwareID]]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "checkInterval",  value: 15*60,  displayed: false,  data: [ sign: "${signatureResult1}" ,protocol: "zigbee",  hubHardwareId: device.hub.hardwareID])

    refresh()
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

	traceEvent(settings.logFilter, "installed>Device is now Installed", settings.trace)
	initialize()
}
def initialize(){
	traceEvent(settings.logFilter, "device is initializing", settings.trace)
	runEvery15Minutes(refreshPowerSource)
    runIn(10,refreshPowerSource)
    refresh()
}


def ping() {
	traceEvent(settings.logFilter, "Ping()", settings.trace, get_LOG_DEBUG())
	return refresh()
}


def parse(String description) {
    traceEvent(settings.logFilter, "description is $description", settings.trace, get_LOG_DEBUG())
    def result = []    
    def event = zigbee.getEvent(description)
    if(event){
   		if(event.name == "switch") {
            event.name = "valve"
            if(event.value == "on") {
                event.value = "open"
            }
            else if(event.value == "off") {
                event.value = "closed"
            }
//            sendEvent(name: "checkInterval", value: 15*60, displayed: false, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID])
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 15*60,  displayed: false,  data: [protocol: "zigbee",  hubHardwareId: device.hub.hardwareID]]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
            sendEvent(name: "checkInterval",  value: 15*60,  displayed: false,  data: [ sign: "${signatureResult2}" ,protocol: "zigbee",  hubHardwareId: device.hub.hardwareID])
        }
//        sendEvent(event)
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${event?.name}", value: "${event?.value}"]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue3= ''
if(event.containsKey('data') ){
datavalue3 = event['data']
datavalue3 = "[" + datavalue3+ "," +"sign: " + "${signatureResult3}" + "]"
event.put('data',"${datavalue3}")
 }else{
datavalue3=  "[sign: " + "${signatureResult3}" +"]"
event.put('data',"${datavalue3}")
}
        sendEvent(event)
    }
    else{
        Map map = [:]
        if (description?.startsWith('catchall:')) {
            map = parseCatchAllMessage(description)
        }
        else if (description?.startsWith('read attr -')) {
            map = parseReportAttributeMessage(description)
        }

        if(map){
//            result += createEvent(map)
def params4 = null
def signatureResult4 = null
params4 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult4 = null
  try {
        httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue4= ''
if(map.containsKey('data') ){
datavalue4 = map['data']
datavalue4 = "[" + datavalue4+ "," +"sign: " + "${signatureResult4}" + "]"
map.put('data',"${datavalue4}")
 }else{
datavalue4=  "[sign: " + "${signatureResult4}" +"]"
map.put('data',"${datavalue4}")
}
            result += createEvent(map)
            if(map.additionalAttrs){
                    def additionalAttrs = map.additionalAttrs
                    additionalAttrs.each{allMaps ->
//                        result += createEvent(allMaps)
def params5 = null
def signatureResult5 = null
params5 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${allMaps?.name}", value: "${allMaps?.value}"]
]
signatureResult5 = null
  try {
        httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue5= ''
if(allMaps.containsKey('data') ){
datavalue5 = allMaps['data']
datavalue5 = "[" + datavalue5+ "," +"sign: " + "${signatureResult5}" + "]"
allMaps.put('data',"${datavalue5}")
 }else{
datavalue5=  "[sign: " + "${signatureResult5}" +"]"
allMaps.put('data',"${datavalue5}")
}
                        result += createEvent(allMaps)
                    }
            }
        }
    }
    
	return result
}

private Map parseCatchAllMessage(String description) {
	Map resultMap = [:]
	def cluster = zigbee.parse(description)
	if (shouldProcessMessage(cluster)) {
    	traceEvent(settings.logFilter, "parseCatchAllMessage > $cluster", settings.trace) 
		switch(cluster.clusterId) {
        	case 0x0000:
            	
                if (cluster.command != 0x07) {
					resultMap = getPowerSourceResult(cluster.data.last())
				}
            	break
			case 0x0001:
				
				if (cluster.command != 0x07) {
					resultMap = getBatteryResult(cluster.data.last())
				}
				break
            case 0x0006:
            	
				if (cluster.command != 0x07) {
					resultMap = getOnOffResult(cluster.data.last())
				}
                break
        }
    }
    return resultMap
}

private boolean shouldProcessMessage(cluster) {
	
	boolean ignoredMessage = cluster.profileId != 0x0104 ||
		cluster.command == 0x0B ||
		(cluster.data.size() > 0 && cluster.data.first() == 0x3e)
	return !ignoredMessage
}

private Map parseReportAttributeMessage(String description) {
    Map descMap = zigbee.parseDescriptionAsMap(description)
	traceEvent(settings.logFilter, "Desc Map: $descMap" + cluster, settings.trace, get_LOG_DEBUG())

	Map resultMap = [:]
	if (descMap.cluster == "0000" && descMap.attrId == "0007") {
		resultMap = getPowerSourceResult(descMap.value)
	}
    else if (descMap.cluster == "0001" && descMap.attrId == "0021") {
        resultMap = getBatteryResult(zigbee.convertHexToInt(descMap.value))
	}
    else if (descMap.cluster == "0006" && descMap.attrId == "0000") {
        resultMap = getOnOffResult(descMap.value)
	}
	return resultMap
}

private Map getBatteryResult(rawValue) {
    traceEvent(settings.logFilter, "Battery rawValue = ${rawValue}" + cluster, settings.trace, get_LOG_DEBUG())

	def result = [:]
    result.name = 'battery'
    result.descriptionText = "{{ device.displayName }} battery was {{ value }}%"

    int batteryPercent = rawValue / 2
    result.value = Math.min(100, batteryPercent)

	return result
}

private Map getOnOffResult(rawValue) {
    traceEvent(settings.logFilter, "On/Off rawValue = ${rawValue}" + cluster, settings.trace, get_LOG_DEBUG())

	Map result = [:]
    result.name = 'valve'
    result.descriptionText = "{{ device.displayName }} state was {{ value }}"
    if(rawValue == "0000"){
        result.value == "off"
    }
    else{
        result.value == "on"
    }
    
    List<Map> addAttribsList = []
    Map addAttrib = [:]
    
    addAttrib.name = 'valve'
	addAttrib.descriptionText = "{{ device.displayName }} state was {{ value }}"
	addAttrib.value = result.value
	addAttribsList += addAttrib
	result.additionalAttrs = addAttribsList
    
	return result
}

private Map getPowerSourceResult(rawValue) {
	traceEvent(settings.logFilter, "powerSource rawValue = ${rawValue}" + cluster, settings.trace, get_LOG_DEBUG())
	def result = [:]
    result.name = 'powerSource'
    result.translatable = true
    result.descriptionText = "{{ device.displayName }} powerSource was {{ value }}%"
	if(rawValue == "0081" || rawValue == "0082"){
    	result.value = "mains"
    }
    else if(rawValue == "0003"){
    	result.value = "battery"
    }
    else if(rawValue == "0004"){
    	result.value = "dc"
    }
    else{
    	result.value = "unknown"
    }
	return result
}

def refreshPowerSource(){
    def cmds = []
    cmds += zigbee.readAttribute(0x0000, 0x0007)
	return sendZigbeeCommands(cmds)
}

void sendZigbeeCommands(cmds, delay = 1000) {
	cmds.removeAll { it.startsWith("delay") }
	
	cmds = cmds.collect { new physicalgraph.device.HubAction(it) }
	sendHubCommand(cmds, delay)
}

private int get_LOG_ERROR() {
	return 1
}
private int get_LOG_WARN() {
	return 2
}
private int get_LOG_INFO() {
	return 3
}
private int get_LOG_DEBUG() {
	return 4
}
private int get_LOG_TRACE() {
	return 5
}

def traceEvent(logFilter, message, displayEvent = false, traceLevel = 4, sendMessage = true) {
	int LOG_ERROR = get_LOG_ERROR()
	int LOG_WARN = get_LOG_WARN()
	int LOG_INFO = get_LOG_INFO()
	int LOG_DEBUG = get_LOG_DEBUG()
	int LOG_TRACE = get_LOG_TRACE()
	int filterLevel = (logFilter) ? logFilter.toInteger() : get_LOG_WARN()
    
	if ((displayEvent) || (sendMessage)) {
		def results = [
			name: "verboseTrace",
			value: message,
			displayed: ((displayEvent) ?: false)
		]

		if ((displayEvent) && (filterLevel >= traceLevel)) {
			switch (traceLevel) {
				case LOG_ERROR:
					log.error "${message}"
					break
				case LOG_WARN:
					log.warn "${message}"
					break
				case LOG_INFO:
					log.info "${message}"
					break
				case LOG_TRACE:
					log.trace "${message}"
					break
				case LOG_DEBUG:
				default:
					log.debug "${message}"
					break
			} 
//			if (sendMessage) sendEvent(results)
def params6 = null
def signatureResult6 = null
log.debug "id is ${device.id}"
 params6 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${results?.name}", value: "${results?.value}"]
	]
signatureResult6 = null
try {
    httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue6= ''
if(results.containsKey('data') ){
datavalue6 = results['data']
datavalue6 = "[" + datavalue6+ "," +"sign: " + "${signatureResult6}" + "]"
results.put('data',"${datavalue6}")
 }else{
datavalue6=  "[sign: " + "${signatureResult6}" +"]"
results.put('data',"${datavalue6}")
}
			if (sendMessage) sendEvent(results)
		} 
	}
}
def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
