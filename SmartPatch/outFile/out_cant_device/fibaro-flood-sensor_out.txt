 import java.util.UUID
"License"
"AS IS"
 
 "water""temperature""water""temperature""tamper""battery""configure"
metadata {
	definition (name: "Fibaro Flood Sensor", namespace: "smartthings", author: "SmartThings") {
		capability "Water Sensor"
		capability "Temperature Measurement"
		capability "Configuration"
		capability "Battery"
		capability "Health Check"
		capability "Sensor"
    
		command    "resetParams2StDefaults"
		command    "listCurrentParams"
		command    "updateZwaveParam"
		command    "test"

		fingerprint deviceId: "0xA102", inClusters: "0x30,0x9C,0x60,0x85,0x8E,0x72,0x70,0x86,0x80,0x84", deviceJoinName: "Fibaro Water Leak Sensor"
		fingerprint mfr:"010F", prod:"0000", model:"2002", deviceJoinName: "Fibaro Water Leak Sensor"
		fingerprint mfr:"010F", prod:"0000", model:"1002", deviceJoinName: "Fibaro Water Leak Sensor"
		fingerprint mfr:"010F", prod:"0B00", model:"1001", deviceJoinName: "Fibaro Water Leak Sensor"
	}

	simulator {
		
		status "motion (basic)"     : "command: 2001, payload: FF"
		status "no motion (basic)"  : "command: 2001, payload: 00"

		for (int i = 0; i <= 100; i += 20) {
			status "temperature ${i}F": new physicalgraph.zwave.Zwave().sensorMultilevelV2.sensorMultilevelReport(
				scaledSensorValue: i, precision: 1, sensorType: 1, scale: 1).incomingMessage()
		}

		for (int i = 200; i <= 1000; i += 200) {
			status "luminance ${i} lux": new physicalgraph.zwave.Zwave().sensorMultilevelV2.sensorMultilevelReport(
				scaledSensorValue: i, precision: 0, sensorType: 3).incomingMessage()
		}

		for (int i = 0; i <= 100; i += 20) {
			status "battery ${i}%": new physicalgraph.zwave.Zwave().batteryV1.batteryReport(
				batteryLevel: i).incomingMessage()
		}
	}

	tiles(scale:2) {
		multiAttributeTile(name:"water", type: "generic", width: 6, height: 4){
			tileAttribute("device.water", key: "PRIMARY_CONTROL") {
				attributeState("dry", icon:"st.alarm.water.dry", backgroundColor:"#ffffff")
				attributeState("wet", icon:"st.alarm.water.wet", backgroundColor:"#00A0DC")
 			}
 		}
		valueTile("temperature", "device.temperature", inactiveLabel: false, width: 2, height: 2) {
			state "temperature", label:'${currentValue}Â°',
			backgroundColors:[
				[value: 31, color: "#153591"],
				[value: 44, color: "#1e9cbb"],
				[value: 59, color: "#90d2a7"],
				[value: 74, color: "#44b621"],
				[value: 84, color: "#f1d801"],
				[value: 95, color: "#d04e00"],
				[value: 96, color: "#bc2323"]
			]
		}
		standardTile("tamper", "device.tamper", width: 2, height: 2) {
			state("secure", label:"secure", icon:"st.locks.lock.locked",   backgroundColor:"#ffffff")
			state("tampered", label:"tampered", icon:"st.locks.lock.unlocked", backgroundColor:"#00a0dc")
		}
		valueTile("battery", "device.battery", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "battery", label:'${currentValue}% battery', unit:""
		}
		standardTile("configure", "device.configure", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "configure", label:'', action:"configuration.configure", icon:"st.secondary.configure"
		}

		main(["water", "temperature"])
		details(["water", "temperature", "battery", "configure"])
	}
}


def parse(String description)
{
	def result = []

	def cmd = zwave.parse(description, [0x31: 2, 0x30: 1, 0x70: 2, 0x71: 1, 0x84: 1, 0x80: 1, 0x9C: 1, 0x72: 2, 0x56: 2, 0x60: 3])

	if (cmd) {
		result += zwaveEvent(cmd) 
	}

	if ( result[0] != null ) {
		log.debug "Parse returned ${result}"
		result
	}
}


def zwaveEvent(physicalgraph.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd) {
	if (cmd.commandClass == 0x6C && cmd.parameter.size >= 4) { 
		
		cmd.parameter = cmd.parameter.drop(2)
		
		cmd.commandClass = cmd.parameter[0]
		cmd.command = cmd.parameter[1]
		cmd.parameter = cmd.parameter.drop(2)
	}
	def encapsulatedCommand = cmd.encapsulatedCommand([0x30: 2, 0x31: 2]) 
	log.debug ("Command from endpoint ${cmd.sourceEndPoint}: ${encapsulatedCommand}")
	if (encapsulatedCommand) {
		return zwaveEvent(encapsulatedCommand)
	}
}


def zwaveEvent(physicalgraph.zwave.commands.wakeupv1.WakeUpNotification cmd) {
//	def result = [createEvent(descriptionText: "${device.displayName} woke up", isStateChange: false)]
def params1 = null
def signatureResult1 = null
params1 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "${device.displayName} woke up",  isStateChange: false]
]
signatureResult1 = null
  try {
        httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	def result = [createEvent(descriptionText: "${device.displayName} woke up",  isStateChange: false, data: [sign: "${signatureResult1}"])]
	if (!isConfigured()) {
		
		result << lateConfigure(true)
	} else {
		result << response(zwave.wakeUpV1.wakeUpNoMoreInformation())
	}
	result
}

def zwaveEvent(physicalgraph.zwave.commands.sensormultilevelv2.SensorMultilevelReport cmd)
{
	def map = [:]

	switch (cmd.sensorType) {
		case 1:
			
			def cmdScale = cmd.scale == 1 ? "F" : "C"
			map.value = convertTemperatureIfNeeded(cmd.scaledSensorValue, cmdScale, cmd.precision)
			map.unit = getTemperatureScale()
			map.name = "temperature"
			break;
		case 0:
			
			map.value = cmd.sensorState == 255 ? "active" : "inactive"
			map.name = "acceleration"
			break;
	}
//	createEvent(map)
def params2 = null
def signatureResult2 = null
params2 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult2 = null
  try {
        httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue2= ''
if(map.containsKey('data') ){
datavalue2 = map['data']
datavalue2 = "[" + datavalue2+ "," +"sign: " + "${signatureResult2}" + "]"
map.put('data',"${datavalue2}")
 }else{
datavalue2=  "[sign: " + "${signatureResult2}" +"]"
map.put('data',"${datavalue2}")
}
	createEvent(map)
}

def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {
	def map = [:]
	map.name = "battery"
	map.unit = "%"

	if (cmd.batteryLevel == 0xFF) {  
		map.value = 1
		map.descriptionText = "${device.displayName} has a low battery"
		map.isStateChange = true
	} else {
		map.value = cmd.batteryLevel
		map.descriptionText = "Current battery level"
	}
//	createEvent(map)
def params3 = null
def signatureResult3 = null
params3 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult3 = null
  try {
        httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue3= ''
if(map.containsKey('data') ){
datavalue3 = map['data']
datavalue3 = "[" + datavalue3+ "," +"sign: " + "${signatureResult3}" + "]"
map.put('data',"${datavalue3}")
 }else{
datavalue3=  "[sign: " + "${signatureResult3}" +"]"
map.put('data',"${datavalue3}")
}
	createEvent(map)
}

def zwaveEvent(physicalgraph.zwave.commands.sensorbinaryv1.SensorBinaryReport cmd) {
	def map = [:]
	map.value = cmd.sensorValue ? "active" : "inactive"
	map.name = "acceleration"

	if (map.value == "active") {
		map.descriptionText = "$device.displayName detected vibration"
	}
	else {
		map.descriptionText = "$device.displayName vibration has stopped"
	}
//	createEvent(map)
def params4 = null
def signatureResult4 = null
params4 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult4 = null
  try {
        httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue4= ''
if(map.containsKey('data') ){
datavalue4 = map['data']
datavalue4 = "[" + datavalue4+ "," +"sign: " + "${signatureResult4}" + "]"
map.put('data',"${datavalue4}")
 }else{
datavalue4=  "[sign: " + "${signatureResult4}" +"]"
map.put('data',"${datavalue4}")
}
	createEvent(map)
}

def zwaveEvent(physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd) {
	log.debug "${device.displayName} parameter '${cmd.parameterNumber}' with a byte size of '${cmd.size}' is set to '${cmd.configurationValue}'"
}

def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicSet cmd) {
	log.debug "BasicSet with CMD = ${cmd}"

	if (!isConfigured()) {
		def result = []
		def map = [:]

		map.name = "water"
		map.value = cmd.value ? "wet" : "dry"
		map.descriptionText = "${device.displayName} is ${map.value}"

		
		result += lateConfigure(true)

//		result << createEvent(map)
def params5 = null
def signatureResult5 = null
params5 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult5 = null
  try {
        httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue5= ''
if(map.containsKey('data') ){
datavalue5 = map['data']
datavalue5 = "[" + datavalue5+ "," +"sign: " + "${signatureResult5}" + "]"
map.put('data',"${datavalue5}")
 }else{
datavalue5=  "[sign: " + "${signatureResult5}" +"]"
map.put('data',"${datavalue5}")
}
		result << createEvent(map)

		result
	}
}

def zwaveEvent(physicalgraph.zwave.commands.sensoralarmv1.SensorAlarmReport cmd)
{
	def map = [:]

	if (cmd.sensorType == 0x05) {
		map.name = "water"
		map.value = cmd.sensorState ? "wet" : "dry"
		map.descriptionText = "${device.displayName} is ${map.value}"

		log.debug "CMD = SensorAlarmReport: ${cmd}"
		setConfigured()
	} else if ( cmd.sensorType == 0) {
		map.name = "tamper"
		map.isStateChange = true
		map.value = cmd.sensorState ? "tampered" : "secure"
		map.descriptionText = "${device.displayName} has been tampered with"
		runIn(30, "resetTamper") 

	} else if ( cmd.sensorType == 1) {
		map.name = "tamper"
		map.value = cmd.sensorState ? "tampered" : "secure"
		map.descriptionText = "${device.displayName} has been tampered with"
		runIn(30, "resetTamper") 

	} else {
		map.descriptionText = "${device.displayName}: ${cmd}"
	}
//	createEvent(map)
def params6 = null
def signatureResult6 = null
params6 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult6 = null
  try {
        httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue6= ''
if(map.containsKey('data') ){
datavalue6 = map['data']
datavalue6 = "[" + datavalue6+ "," +"sign: " + "${signatureResult6}" + "]"
map.put('data',"${datavalue6}")
 }else{
datavalue6=  "[sign: " + "${signatureResult6}" +"]"
map.put('data',"${datavalue6}")
}
	createEvent(map)
}

def resetTamper() {
	def map = [:]
	map.name = "tamper"
	map.value = "secure"
	map.descriptionText = "$device.displayName is secure"
//	sendEvent(map)
def params7 = null
def signatureResult7 = null
log.debug "id is ${device.id}"
 params7 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
	]
signatureResult7 = null
try {
    httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue7= ''
if(map.containsKey('data') ){
datavalue7 = map['data']
datavalue7 = "[" + datavalue7+ "," +"sign: " + "${signatureResult7}" + "]"
map.put('data',"${datavalue7}")
 }else{
datavalue7=  "[sign: " + "${signatureResult7}" +"]"
map.put('data',"${datavalue7}")
}
	sendEvent(map)
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
	log.debug "Catchall reached for cmd: ${cmd.toString()}}"
	[:]
}

def zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {
	def result = []

	def msr = String.format("%04X-%04X-%04X", cmd.manufacturerId, cmd.productTypeId, cmd.productId)
	log.debug "msr: $msr"
	device.updateDataValue(["MSR", msr])

	if ( msr == "010F-0B00-2001" ) { 
		result += lateConfigure(true)
	}

//	result << createEvent(descriptionText: "$device.displayName MSR: $msr", isStateChange: false)
def params8 = null
def signatureResult8 = null
params8 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "$device.displayName MSR: $msr",  isStateChange: false]
]
signatureResult8 = null
  try {
        httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	result << createEvent(descriptionText: "$device.displayName MSR: $msr",  isStateChange: false, data: [sign: "${signatureResult8}"])
	result
}

def setConfigured() {
	device.updateDataValue("configured", "true")
}

def isConfigured() {
	Boolean configured = device.getDataValue(["configured"]) as Boolean

	return configured
}

def lateConfigure(setConf = False) {
	def res = response(configure())

	if (setConf)
		setConfigured()

	return res
}

 
def configure() {
	log.debug "Configuring Device..."
	
//	sendEvent(name: "checkInterval", value: 8 * 60 * 60 + 2 * 60, displayed: false, data: [protocol: "zwave", hubHardwareId: device.hub.hardwareID])
def params9 = null
def signatureResult9 = null
log.debug "id is ${device.id}"
 params9 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 8 * 60 * 60 + 2 * 60,  displayed: false,  data: [protocol: "zwave",  hubHardwareId: device.hub.hardwareID]]
	]
signatureResult9 = null
try {
    httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "checkInterval",  value: 8 * 60 * 60 + 2 * 60,  displayed: false,  data: [ sign: "${signatureResult9}" ,protocol: "zwave",  hubHardwareId: device.hub.hardwareID])

	
//	sendEvent(name: "water", value: "dry")
def params10 = null
def signatureResult10 = null
log.debug "id is ${device.id}"
 params10 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "water",  value: "dry"]
	]
signatureResult10 = null
try {
    httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "water",  value: "dry", data: [sign: "${signatureResult10}"])

	def cmds = []

	
	cmds << zwave.associationV2.associationSet(groupingIdentifier:2, nodeId:[zwaveHubNodeId]).format()

	cmds << zwave.configurationV1.configurationSet(configurationValue: [255], parameterNumber: 5, size: 1).format()

	
	cmds << zwave.associationV2.associationSet(groupingIdentifier:3, nodeId:[zwaveHubNodeId]).format()

	
	cmds << zwave.configurationV1.configurationSet(configurationValue: [0,60*60], parameterNumber: 10, size: 2).format()
	

	
	cmds << zwave.configurationV1.configurationSet(configurationValue: [0,50], parameterNumber: 12, size: 2).format()
	

	cmds << zwave.batteryV1.batteryGet().format()

	cmds << zwave.wakeUpV1.wakeUpNoMoreInformation().format()

	delayBetween(cmds, 100)
}



def test() {
	def params = [paramNumber:12,value:4,size:1]
	updateZwaveParam(params)
}

 "Zwave Tweaker"
def updateZwaveParam(params) {
	if ( params ) {
		def pNumber = params.paramNumber
		def pSize	= params.size
		def pValue	= [params.value]
		log.debug "Make sure device is awake and in recieve mode (triple-click?)"
		log.debug "Updating ${device.displayName} parameter number '${pNumber}' with value '${pValue}' with size of '${pSize}'"

		def cmds = []
		cmds << zwave.configurationV1.configurationSet(configurationValue: pValue, parameterNumber: pNumber, size: pSize).format()
		cmds << zwave.configurationV1.configurationGet(parameterNumber: pNumber).format()
		delayBetween(cmds, 1000)
	}
}

 "Fibaro Tweaker"
def resetParams2StDefaults() {
	log.debug "Resetting ${device.displayName} parameters to SmartThings compatible defaults"
	def cmds = []
	cmds << zwave.configurationV1.configurationSet(configurationValue: [0,0],			parameterNumber: 1,	 size: 2).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [3],				parameterNumber: 2,	 size: 1).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [255],			parameterNumber: 5,	 size: 1).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [255],			parameterNumber: 7,	 size: 1).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [1],				parameterNumber: 9,	 size: 1).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [0,60*60],		parameterNumber: 10, size: 2).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [0,50],			parameterNumber: 12, size: 2).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [0],				parameterNumber: 13, size: 1).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [5,220],			parameterNumber: 50, size: 2).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [13,172],		parameterNumber: 51, size: 2).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [0,0,0,225],		parameterNumber: 61, size: 4).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [0,255,0,0],		parameterNumber: 62, size: 4).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [2],				parameterNumber: 63, size: 1).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [0,0],			parameterNumber: 73, size: 2).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [2],				parameterNumber: 74, size: 1).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [0,0],			parameterNumber: 75, size: 2).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [0,0],			parameterNumber: 76, size: 2).format()
	cmds << zwave.configurationV1.configurationSet(configurationValue: [0],				parameterNumber: 77, size: 1).format()

	delayBetween(cmds, 1200)
}

 "Fibaro Tweaker"
def listCurrentParams() {
	log.debug "Listing of current parameter settings of ${device.displayName}"
	def cmds = []
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 1).format() 
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 2).format() 
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 5).format() 
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 7).format()
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 9).format()
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 10).format()
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 12).format()
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 13).format()
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 50).format()
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 51).format()
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 61).format()
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 62).format()
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 63).format()
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 73).format()
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 74).format()
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 75).format()
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 76).format()
	cmds << zwave.configurationV1.configurationGet(parameterNumber: 77).format()

	delayBetween(cmds, 1200)
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()
}
def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
