 import java.util.UUID
"License"
"AS IS"
metadata {
	definition (name: "Z-Wave Lock", namespace: "smartthings", author: "SmartThings", runLocally: true, minHubCoreVersion: '000.017.0012', executeCommandsLocally: false, genericHandler: "Z-Wave") {
		capability "Actuator"
		capability "Lock"
		capability "Polling"
		capability "Refresh"
		capability "Sensor"
		capability "Lock Codes"
		capability "Battery"
		capability "Health Check"
		capability "Configuration"

		
		fingerprint inClusters: "0x62, 0x63"
		fingerprint deviceId: "0x4003", inClusters: "0x98"
		fingerprint deviceId: "0x4004", inClusters: "0x98"
		
		fingerprint mfr:"0090", prod:"0001", model:"0236", deviceJoinName: "KwikSet SmartCode 910 Deadbolt Door Lock"
		fingerprint mfr:"0090", prod:"0003", model:"0238", deviceJoinName: "KwikSet SmartCode 910 Deadbolt Door Lock"
		fingerprint mfr:"0090", prod:"0001", model:"0001", deviceJoinName: "KwikSet SmartCode 910 Contemporary Deadbolt Door Lock"
		fingerprint mfr:"0090", prod:"0003", model:"0339", deviceJoinName: "KwikSet SmartCode 912 Lever Door Lock"
		fingerprint mfr:"0090", prod:"0003", model:"4006", deviceJoinName: "KwikSet SmartCode 914 Deadbolt Door Lock" 
		fingerprint mfr:"0090", prod:"0003", model:"0440", deviceJoinName: "KwikSet SmartCode 914 Deadbolt Door Lock"
		fingerprint mfr:"0090", prod:"0001", model:"0642", deviceJoinName: "KwikSet SmartCode 916 Touchscreen Deadbolt Door Lock"
		fingerprint mfr:"0090", prod:"0003", model:"0642", deviceJoinName: "KwikSet SmartCode 916 Touchscreen Deadbolt Door Lock"
		
		fingerprint mfr:"0090", prod:"0003", model:"0541", deviceJoinName: "KwikSet SmartCode 888 Touchpad Deadbolt Door Lock"
		
		fingerprint mfr:"0090", prod:"0003", model:"0742", deviceJoinName: "Kwikset Obsidian Lock"
		
		fingerprint mfr:"003B", prod:"6341", model:"0544", deviceJoinName: "Schlage Touchscreen Deadbolt Door Lock"
		fingerprint mfr:"003B", prod:"6341", model:"5044", deviceJoinName: "Schlage Touchscreen Deadbolt Door Lock"
		fingerprint mfr:"003B", prod:"634B", model:"504C", deviceJoinName: "Schlage Connected Keypad Lever Door Lock"
		fingerprint mfr:"003B", prod:"0001", model:"0468", deviceJoinName: "Schlage Connect Smart Deadbolt Door Lock" 
		fingerprint mfr:"003B", prod:"0001", model:"0469", deviceJoinName: "Schlage Connect Smart Deadbolt Door Lock" 
		
		fingerprint mfr:"0129", prod:"0002", model:"0800", deviceJoinName: "Yale Touchscreen Deadbolt Door Lock" 
		fingerprint mfr:"0129", prod:"0002", model:"0000", deviceJoinName: "Yale Touchscreen Deadbolt Door Lock" 
		fingerprint mfr:"0129", prod:"0002", model:"FFFF", deviceJoinName: "Yale Touchscreen Lever Door Lock" 
		fingerprint mfr:"0129", prod:"0004", model:"0800", deviceJoinName: "Yale Push Button Deadbolt Door Lock" 
		fingerprint mfr:"0129", prod:"0004", model:"0000", deviceJoinName: "Yale Push Button Deadbolt Door Lock" 
		fingerprint mfr:"0129", prod:"0001", model:"0000", deviceJoinName: "Yale Push Button Lever Door Lock" 
		fingerprint mfr:"0129", prod:"8002", model:"0600", deviceJoinName: "Yale Assure Lock" 
		fingerprint mfr:"0129", prod:"0007", model:"0001", deviceJoinName: "Yale Keyless Connected Smart Door Lock"
		fingerprint mfr:"0129", prod:"8004", model:"0600", deviceJoinName: "Yale Assure Lock Push Button Deadbolt" 
		fingerprint mfr:"0129", prod:"6600", model:"0002", deviceJoinName: "Yale Conexis Lock"
		fingerprint mfr:"0129", prod:"0001", model:"0409", deviceJoinName: "Yale Touchscreen Lever Door Lock" 
		fingerprint mfr:"0129", prod:"800B", model:"0F00", deviceJoinName: "Yale Assure Keypad Lever Door Lock" 
		fingerprint mfr:"0129", prod:"800C", model:"0F00", deviceJoinName: "Yale Assure Touchscreen Lever Door Lock" 
		fingerprint mfr:"0129", prod:"8002", model:"1000", deviceJoinName: "Yale Assure Lock" 
		fingerprint mfr:"0129", prod:"803A", model:"0508", deviceJoinName: "Yale Touchscreen Deadbolt with Integrated ZWave Plus" 
		
		fingerprint mfr:"022E", prod:"0001", model:"0001", deviceJoinName: "Samsung Digital Lock", mnmn: "SmartThings", vid: "SmartThings-smartthings-Samsung_Smart_Doorlock" 
		
		fingerprint mfr:"037B", prod:"0002", model:"0001", deviceJoinName: "KeyWe Lock" 
		fingerprint mfr:"037B", prod:"0003", model:"0001", deviceJoinName: "KeyWe Smart Rim Lock" 
		
		fingerprint mfr:"0366", prod:"0001", model:"0001", deviceJoinName: "Philia Smart Door Lock" 
	}

	simulator {
		status "locked": "command: 9881, payload: 00 62 03 FF 00 00 FE FE"
		status "unlocked": "command: 9881, payload: 00 62 03 00 00 00 FE FE"

		reply "9881006201FF,delay 4200,9881006202": "command: 9881, payload: 00 62 03 FF 00 00 FE FE"
		reply "988100620100,delay 4200,9881006202": "command: 9881, payload: 00 62 03 00 00 00 FE FE"
	}

	tiles(scale: 2) {
		multiAttributeTile(name:"toggle", type: "generic", width: 6, height: 4){
			tileAttribute ("device.lock", key: "PRIMARY_CONTROL") {
				attributeState "locked", label:'locked', action:"lock.unlock", icon:"st.locks.lock.locked", backgroundColor:"#00A0DC", nextState:"unlocking"
				attributeState "unlocked", label:'unlocked', action:"lock.lock", icon:"st.locks.lock.unlocked", backgroundColor:"#ffffff", nextState:"locking"
				attributeState "unlocked with timeout", label:'unlocked', action:"lock.lock", icon:"st.locks.lock.unlocked", backgroundColor:"#ffffff", nextState:"locking"
				attributeState "unknown", label:"unknown", action:"lock.lock", icon:"st.locks.lock.unknown", backgroundColor:"#ffffff", nextState:"locking"
				attributeState "locking", label:'locking', icon:"st.locks.lock.locked", backgroundColor:"#00A0DC"
				attributeState "unlocking", label:'unlocking', icon:"st.locks.lock.unlocked", backgroundColor:"#ffffff"
			}
		}
		standardTile("lock", "device.lock", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "default", label:'lock', action:"lock.lock", icon:"st.locks.lock.locked", nextState:"locking"
		}
		standardTile("unlock", "device.lock", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "default", label:'unlock', action:"lock.unlock", icon:"st.locks.lock.unlocked", nextState:"unlocking"
		}
		valueTile("battery", "device.battery", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "battery", label:'${currentValue}% battery', unit:""
		}
		standardTile("refresh", "device.lock", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "default", label:'', action:"refresh.refresh", icon:"st.secondary.refresh"
		}

		main "toggle"
		details(["toggle", "lock", "unlock", "battery", "refresh"])
	}
}

import physicalgraph.zwave.commands.doorlockv1.*
import physicalgraph.zwave.commands.usercodev1.*


def installed() {
	
//	sendEvent(name: "checkInterval", value: 1 * 60 * 60, displayed: false, data: [protocol: "zwave", hubHardwareId: device.hub.hardwareID, offlinePingable: "1"])
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 1 * 60 * 60,  displayed: false,  data: [protocol: "zwave",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"]]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "checkInterval",  value: 1 * 60 * 60,  displayed: false,  data: [ sign: "${signatureResult1}" ,protocol: "zwave",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"])

	if (isSamsungLock()) { 
//		sendEvent(name: "lock", value: "unlocked", isStateChange: true, displayed: true)
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "lock",  value: "unlocked",  isStateChange: true,  displayed: true]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "lock",  value: "unlocked",  isStateChange: true,  displayed: true, data: [sign: "${signatureResult2}"])
	}

	scheduleInstalledCheck()
}


def scheduleInstalledCheck() {
	runIn(120, "installedCheck", [forceForLocallyExecuting: true])
}

def installedCheck() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

	if (device.currentState("lock") && device.currentState("battery")) {
		unschedule("installedCheck")
	} else {
		
		if (!state.lastLockDetailsQuery || secondsPast(state.lastLockDetailsQuery, 2 * 60)) {
			def actions = updated()

			if (actions) {
				sendHubCommand(actions.toHubAction())
			}
		}

		scheduleInstalledCheck()
	}
}


def uninstalled() {
	def deviceName = device.displayName
	log.trace "[DTH] Executing 'uninstalled()' for device $deviceName"
//	sendEvent(name: "lockRemoved", value: device.id, isStateChange: true, displayed: false)
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "lockRemoved",  value: device.id,  isStateChange: true,  displayed: false]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "lockRemoved",  value: device.id,  isStateChange: true,  displayed: false, data: [sign: "${signatureResult3}"])
}


def updated() {
	
//	sendEvent(name: "checkInterval", value: 1 * 60 * 60, displayed: false, data: [protocol: "zwave", hubHardwareId: device.hub.hardwareID, offlinePingable: "1"])
def params4 = null
def signatureResult4 = null
log.debug "id is ${device.id}"
 params4 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 1 * 60 * 60,  displayed: false,  data: [protocol: "zwave",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"]]
	]
signatureResult4 = null
try {
    httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "checkInterval",  value: 1 * 60 * 60,  displayed: false,  data: [ sign: "${signatureResult4}" ,protocol: "zwave",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"])

	def hubAction = null
	try {
		def cmds = []
		if (!device.currentState("lock") || !device.currentState("battery") || !state.configured) {
			log.debug "Returning commands for lock operation get and battery get"
			if (!state.configured) {
				cmds << doConfigure()
			}
			cmds << refresh()
			cmds << reloadAllCodes()
			if (!state.MSR) {
				cmds << zwave.manufacturerSpecificV1.manufacturerSpecificGet().format()
			}
			if (!state.fw) {
				cmds << zwave.versionV1.versionGet().format()
			}
			hubAction = response(delayBetween(cmds, 30*1000))
		}
	} catch (e) {
		log.warn "updated() threw $e"
	}
	hubAction
}


def configure() {
	log.trace "[DTH] Executing 'configure()' for device ${device.displayName}"
	def cmds = doConfigure()
	log.debug "Configure returning with commands := $cmds"
	cmds
}


def doConfigure() {
	log.trace "[DTH] Executing 'doConfigure()' for device ${device.displayName}"
	state.configured = true
	def cmds = []
	cmds << secure(zwave.doorLockV1.doorLockOperationGet())
	cmds << secure(zwave.batteryV1.batteryGet())
	if (isSchlageLock()) {
		cmds << secure(zwave.configurationV2.configurationGet(parameterNumber: getSchlageLockParam().codeLength.number))
	}
	cmds = delayBetween(cmds, 30*1000)

	state.lastLockDetailsQuery = now()

	log.debug "Do configure returning with commands := $cmds"
	cmds
}


def parse(String description) {
	log.trace "[DTH] Executing 'parse(String description)' for device ${device.displayName} with description = $description"

	def result = null
	if (description.startsWith("Err")) {
		if (state.sec) {
//			result = createEvent(descriptionText:description, isStateChange:true, displayed:false)
def params5 = null
def signatureResult5 = null
params5 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText:description,  isStateChange:true,  displayed:false]
]
signatureResult5 = null
  try {
        httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			result = createEvent(descriptionText:description,  isStateChange:true,  displayed:false, data: [sign: "${signatureResult5}"])
		} else {
//			result = createEvent(
//					descriptionText: "This lock failed to complete the network security key exchange. If you are unable to control it via SmartThings, you must remove it from your network and add it again.",
//					eventType: "ALERT",
//					name: "secureInclusion",
//					value: "failed",
//					displayed: true,
//			)
def params6 = null
def signatureResult6 = null
params6 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "This lock failed to complete the network security key exchange. If you are unable to control it via SmartThings,  you must remove it from your network and add it again.", 					eventType: "ALERT", 					name: "secureInclusion", 					value: "failed", 					displayed: true,]
]
signatureResult6 = null
  try {
        httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			result = createEvent(descriptionText: "This lock failed to complete the network security key exchange. If you are unable to control it via SmartThings,  you must remove it from your network and add it again.", 					eventType: "ALERT", 					name: "secureInclusion", 					value: "failed", 					displayed: true,, data: [sign: "${signatureResult6}"])
		}
	} else {
		def cmd = zwave.parse(description, [ 0x98: 1, 0x62: 1, 0x63: 1, 0x71: 2, 0x72: 2, 0x80: 1, 0x85: 2, 0x86: 1 ])
		if (cmd) {
			result = zwaveEvent(cmd)
		}
	}
	log.info "[DTH] parse() - returning result=$result"
	result
}


def zwaveEvent(physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd)' with cmd = $cmd"
	if (isSchlageLock() && cmd.parameterNumber == getSchlageLockParam().codeLength.number) {
		def result = []
		def length = cmd.scaledConfigurationValue
		def deviceName = device.displayName
		log.trace "[DTH] Executing 'ConfigurationReport' for device $deviceName with code length := $length"
		def codeLength = device.currentValue("codeLength")
		if (codeLength && codeLength != length) {
			log.trace "[DTH] Executing 'ConfigurationReport' for device $deviceName - all codes deleted"
			result = allCodesDeletedEvent()
//			result << createEvent(name: "codeChanged", value: "all deleted", descriptionText: "Deleted all user codes",
//					isStateChange: true, data: [lockName: deviceName, notify: true,
//												notificationText: "Deleted all user codes in $deviceName at ${location.name}"])
def params7 = null
def signatureResult7 = null
params7 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "codeChanged",  value: "all deleted",  descriptionText: "Deleted all user codes", 					isStateChange: true,  data: [lockName: deviceName,  notify: true, 												notificationText: "Deleted all user codes in $deviceName at ${location.name}"]]
]
signatureResult7 = null
  try {
        httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			result << createEvent(name: "codeChanged",  value: "all deleted",  descriptionText: "Deleted all user codes", 					isStateChange: true,  data: [ sign: "${signatureResult7}" ,lockName: deviceName,  notify: true, 												notificationText: "Deleted all user codes in $deviceName at ${location.name}"])
//			result << createEvent(name: "lockCodes", value: util.toJson([:]), displayed: false, descriptionText: "'lockCodes' attribute updated")
def params8 = null
def signatureResult8 = null
params8 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "lockCodes",  value: util.toJson([:]),  displayed: false,  descriptionText: "'lockCodes' attribute updated"]
]
signatureResult8 = null
  try {
        httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			result << createEvent(name: "lockCodes",  value: util.toJson([:]),  displayed: false,  descriptionText: "'lockCodes' attribute updated", data: [sign: "${signatureResult8}"])
		}
//		result << createEvent(name:"codeLength", value: length, descriptionText: "Code length is $length", displayed: false)
def params9 = null
def signatureResult9 = null
params9 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"codeLength",  value: length,  descriptionText: "Code length is $length",  displayed: false]
]
signatureResult9 = null
  try {
        httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result << createEvent(name:"codeLength",  value: length,  descriptionText: "Code length is $length",  displayed: false, data: [sign: "${signatureResult9}"])
		return result
	}
	return null
}


def zwaveEvent(physicalgraph.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(physicalgraph.zwave.commands.securityv1.SecurityMessageEncapsulation)' with cmd = $cmd"
	def encapsulatedCommand = cmd.encapsulatedCommand([0x62: 1, 0x71: 2, 0x80: 1, 0x85: 2, 0x63: 1, 0x98: 1, 0x86: 1])
	if (encapsulatedCommand) {
		zwaveEvent(encapsulatedCommand)
	}
}


def zwaveEvent(physicalgraph.zwave.commands.securityv1.NetworkKeyVerify cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(physicalgraph.zwave.commands.securityv1.NetworkKeyVerify)' with cmd = $cmd"
//	createEvent(name:"secureInclusion", value:"success", descriptionText:"Secure inclusion was successful", isStateChange: true)
def params10 = null
def signatureResult10 = null
params10 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"secureInclusion",  value:"success",  descriptionText:"Secure inclusion was successful",  isStateChange: true]
]
signatureResult10 = null
  try {
        httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(name:"secureInclusion",  value:"success",  descriptionText:"Secure inclusion was successful",  isStateChange: true, data: [sign: "${signatureResult10}"])
}


def zwaveEvent(physicalgraph.zwave.commands.securityv1.SecurityCommandsSupportedReport cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(physicalgraph.zwave.commands.securityv1.SecurityCommandsSupportedReport)' with cmd = $cmd"
	state.sec = cmd.commandClassSupport.collect { String.format("%02X ", it) }.join()
	if (cmd.commandClassControl) {
		state.secCon = cmd.commandClassControl.collect { String.format("%02X ", it) }.join()
	}
//	createEvent(name:"secureInclusion", value:"success", descriptionText:"Lock is securely included", isStateChange: true)
def params11 = null
def signatureResult11 = null
params11 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"secureInclusion",  value:"success",  descriptionText:"Lock is securely included",  isStateChange: true]
]
signatureResult11 = null
  try {
        httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(name:"secureInclusion",  value:"success",  descriptionText:"Lock is securely included",  isStateChange: true, data: [sign: "${signatureResult11}"])
}


def zwaveEvent(DoorLockOperationReport cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(DoorLockOperationReport)' with cmd = $cmd"
	def result = []

	unschedule("followupStateCheck")
	unschedule("stateCheck")

	
	def map = [ name: "lock" ]
	map.data = [ lockName: device.displayName ]
	if (isKeyweLock()) {
		map.value = cmd.doorCondition >> 1 ? "unlocked" : "locked"
		map.descriptionText = cmd.doorCondition >> 1 ? "Unlocked" : "Locked"
	} else if (cmd.doorLockMode == 0xFF) {
		map.value = "locked"
		map.descriptionText = "Locked"
	} else if (cmd.doorLockMode >= 0x40) {
		map.value = "unknown"
		map.descriptionText = "Unknown state"
	} else if (cmd.doorLockMode == 0x01) {
		map.value = "unlocked with timeout"
		map.descriptionText = "Unlocked with timeout"
	}  else {
		map.value = "unlocked"
		map.descriptionText = "Unlocked"
		if (state.assoc != zwaveHubNodeId) {
			result << response(secure(zwave.associationV1.associationSet(groupingIdentifier:1, nodeId:zwaveHubNodeId)))
			result << response(zwave.associationV1.associationSet(groupingIdentifier:2, nodeId:zwaveHubNodeId))
			result << response(secure(zwave.associationV1.associationGet(groupingIdentifier:1)))
		}
	}
	if (generatesDoorLockOperationReportBeforeAlarmReport()) {
		
		runIn(3, "delayLockEvent", [data: [map: map]])
		return [:]
	} else {
//		return result ? [createEvent(map), *result] : createEvent(map)
def params12 = null
def signatureResult12 = null
params12 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",map),  *result] : createEvent(map]
]
signatureResult12 = null
  try {
        httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		return result ? [createEvent(map),  *result] : createEvent(map, data: [sign: "${signatureResult12}"]), *result] : createEvent(map)
	}
}

def delayLockEvent(data) {
	log.debug "Sending cached lock operation: $data.map"
//	sendEvent(data.map)
def params13 = null
def signatureResult13 = null
log.debug "id is ${device.id}"
 params13 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${data.map?.name}", value: "${data.map?.value}"]
	]
signatureResult13 = null
try {
    httpGet(params13) { resp ->
        signatureResult13 = resp.data
        log.debug "response data: ${signatureResult13}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue13= ''
if(data.map.containsKey('data') ){
datavalue13 = data.map['data']
datavalue13 = "[" + datavalue13+ "," +"sign: " + "${signatureResult13}" + "]"
data.map.put('data',"${datavalue13}")
 }else{
datavalue13=  "[sign: " + "${signatureResult13}" +"]"
data.map.put('data',"${datavalue13}")
}
	sendEvent(data.map)
}


def zwaveEvent(physicalgraph.zwave.commands.alarmv2.AlarmReport cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(physicalgraph.zwave.commands.alarmv2.AlarmReport)' with cmd = $cmd"
	def result = []

	if (cmd.zwaveAlarmType == 6) {
		result = handleAccessAlarmReport(cmd)
	} else if (cmd.zwaveAlarmType == 7) {
		result = handleBurglarAlarmReport(cmd)
	} else if(cmd.zwaveAlarmType == 8) {
		result = handleBatteryAlarmReport(cmd)
	} else {
		result = handleAlarmReportUsingAlarmType(cmd)
	}

	result = result ?: null
	log.debug "[DTH] zwaveEvent(physicalgraph.zwave.commands.alarmv2.AlarmReport) returning with result = $result"
	result
}


private def handleAccessAlarmReport(cmd) {
	log.trace "[DTH] Executing 'handleAccessAlarmReport' with cmd = $cmd"
	def result = []
	def map = null
	def codeID, changeType, lockCodes, codeName
	def deviceName = device.displayName
	lockCodes = loadLockCodes()
	if (1 <= cmd.zwaveAlarmEvent && cmd.zwaveAlarmEvent < 10) {
		map = [ name: "lock", value: (cmd.zwaveAlarmEvent & 1) ? "locked" : "unlocked" ]
	}
	switch(cmd.zwaveAlarmEvent) {
		case 1: 
			map.descriptionText = "Locked manually"
			map.data = [ method: (cmd.alarmLevel == 2) ? "keypad" : "manual" ]
			break
		case 2: 
			map.descriptionText = "Unlocked manually"
			map.data = [ method: "manual" ]
			break
		case 3: 
			map.descriptionText = "Locked"
			map.data = [ method: "command" ]
			break
		case 4: 
			map.descriptionText = "Unlocked"
			map.data = [ method: "command" ]
			break
		case 5: 
			if (cmd.eventParameter || cmd.alarmLevel) {
				codeID = readCodeSlotId(cmd)
				codeName = getCodeName(lockCodes, codeID)
				map.descriptionText = "Locked by \"$codeName\""
				map.data = [ codeId: codeID as String, usedCode: codeID, codeName: codeName, method: "keypad" ]
			} else {
				
				map.descriptionText = "Locked manually"
				map.data = [ method: "keypad" ]
			}
			break
		case 6: 
			if (cmd.eventParameter || cmd.alarmLevel) {
				codeID = readCodeSlotId(cmd)
				codeName = getCodeName(lockCodes, codeID)
				map.descriptionText = "Unlocked by \"$codeName\""
				map.data = [ codeId: codeID as String, usedCode: codeID, codeName: codeName, method: "keypad" ]
			}
			break
		case 7:
			map = [ name: "lock", value: "unknown", descriptionText: "Unknown state" ]
			map.data = [ method: "manual" ]
			break
		case 8:
			map = [ name: "lock", value: "unknown", descriptionText: "Unknown state" ]
			map.data = [ method: "command" ]
			break
		case 9: 
			map = [ name: "lock", value: "locked", data: [ method: "auto" ] ]
			map.descriptionText = "Auto locked"
			break
		case 0xA:
			map = [ name: "lock", value: "unknown", descriptionText: "Unknown state" ]
			map.data = [ method: "auto" ]
			break
		case 0xB:
			map = [ name: "lock", value: "unknown", descriptionText: "Unknown state" ]
			break
		case 0xC: 
			result = allCodesDeletedEvent()
			map = [ name: "codeChanged", value: "all deleted", descriptionText: "Deleted all user codes", isStateChange: true ]
			map.data = [notify: true, notificationText: "Deleted all user codes in $deviceName at ${location.name}"]
//			result << createEvent(name: "lockCodes", value: util.toJson([:]), displayed: false, descriptionText: "'lockCodes' attribute updated")
def params14 = null
def signatureResult14 = null
params14 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "lockCodes",  value: util.toJson([:]),  displayed: false,  descriptionText: "'lockCodes' attribute updated"]
]
signatureResult14 = null
  try {
        httpGet(params14) { resp ->
        signatureResult14 = resp.data
        log.debug "response data: ${signatureResult14}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			result << createEvent(name: "lockCodes",  value: util.toJson([:]),  displayed: false,  descriptionText: "'lockCodes' attribute updated", data: [sign: "${signatureResult14}"])
			break
		case 0xD: 
			if (cmd.eventParameter || cmd.alarmLevel) {
				codeID = readCodeSlotId(cmd)
				if (lockCodes[codeID.toString()]) {
					codeName = getCodeName(lockCodes, codeID)
					map = [ name: "codeChanged", value: "$codeID deleted", isStateChange: true ]
					map.descriptionText = "Deleted \"$codeName\""
					map.data = [ codeName: codeName, notify: true, notificationText: "Deleted \"$codeName\" in $deviceName at ${location.name}" ]
					result << codeDeletedEvent(lockCodes, codeID)
				}
			}
			break
		case 0xE: 
			if (cmd.eventParameter || cmd.alarmLevel) {
				codeID = readCodeSlotId(cmd)
				if(codeID == 0 && isKwiksetLock()) {
					
					
					log.trace "Ignoring this alarm report in case of Kwikset locks"
					break
				}
				codeName = getCodeNameFromState(lockCodes, codeID)
				changeType = getChangeType(lockCodes, codeID)
				map = [ name: "codeChanged", value: "$codeID $changeType",  descriptionText: "${getStatusForDescription(changeType)} \"$codeName\"", isStateChange: true ]
				map.data = [ codeName: codeName, notify: true, notificationText: "${getStatusForDescription(changeType)} \"$codeName\" in $deviceName at ${location.name}" ]
				if(!isMasterCode(codeID)) {
					result << codeSetEvent(lockCodes, codeID, codeName)
				} else {
					map.descriptionText = "${getStatusForDescription('set')} \"$codeName\""
					map.data.notificationText = "${getStatusForDescription('set')} \"$codeName\" in $deviceName at ${location.name}"
				}
			}
			break
		case 0xF: 
			if (cmd.eventParameter || cmd.alarmLevel) {
				codeID = readCodeSlotId(cmd)
				clearStateForSlot(codeID)
				map = [ name: "codeChanged", value: "$codeID failed", descriptionText: "User code is duplicate and not added",
						isStateChange: true, data: [isCodeDuplicate: true] ]
			}
			break
		case 0x10: 
		case 0x13:
			map = [ name: "tamper", value: "detected", descriptionText: "Keypad attempts exceed code entry limit", isStateChange: true, displayed: true ]
			break
		case 0x11: 
			map = [ descriptionText: "Keypad is busy" ]
			break
		case 0x12: 
			codeName = getCodeNameFromState(lockCodes, 0)
			map = [ name: "codeChanged", value: "0 set", descriptionText: "${getStatusForDescription('set')} \"$codeName\"", isStateChange: true ]
			map.data = [ codeName: codeName, notify: true, notificationText: "${getStatusForDescription('set')} \"$codeName\" in $deviceName at ${location.name}" ]
			break
		case 0x18: 
			map = [ name: "lock", value: "unlocked", data: [ method: "manual" ] ]
			map.descriptionText = "Unlocked manually"
			break
		case 0x19: 
			map = [ name: "lock", value: "locked", data: [ method: "manual" ] ]
			map.descriptionText = "Locked manually"
			break
		case 0xFE:
			
			return handleAlarmReportUsingAlarmType(cmd)
		default:
			
			return handleAlarmReportUsingAlarmType(cmd)
	}

	if (map) {
		if (map.data) {
			map.data.lockName = deviceName
		} else {
			map.data = [ lockName: deviceName ]
		}
//		result << createEvent(map)
def params15 = null
def signatureResult15 = null
params15 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult15 = null
  try {
        httpGet(params15) { resp ->
        signatureResult15 = resp.data
        log.debug "response data: ${signatureResult15}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue15= ''
if(map.containsKey('data') ){
datavalue15 = map['data']
datavalue15 = "[" + datavalue15+ "," +"sign: " + "${signatureResult15}" + "]"
map.put('data',"${datavalue15}")
 }else{
datavalue15=  "[sign: " + "${signatureResult15}" +"]"
map.put('data',"${datavalue15}")
}
		result << createEvent(map)
	}
	result = result.flatten()
	result
}


private def handleBurglarAlarmReport(cmd) {
	log.trace "[DTH] Executing 'handleBurglarAlarmReport' with cmd = $cmd"
	def result = []
	def deviceName = device.displayName

	def map = [ name: "tamper", value: "detected" ]
	map.data = [ lockName: deviceName ]
	switch (cmd.zwaveAlarmEvent) {
		case 0:
			map.value = "clear"
			map.descriptionText = "Tamper alert cleared"
			break
		case 1:
		case 2:
			map.descriptionText = "Intrusion attempt detected"
			break
		case 3:
			map.descriptionText = "Covering removed"
			break
		case 4:
			map.descriptionText = "Invalid code"
			break
		default:
			
			return handleAlarmReportUsingAlarmType(cmd)
	}

//	result << createEvent(map)
def params16 = null
def signatureResult16 = null
params16 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult16 = null
  try {
        httpGet(params16) { resp ->
        signatureResult16 = resp.data
        log.debug "response data: ${signatureResult16}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue16= ''
if(map.containsKey('data') ){
datavalue16 = map['data']
datavalue16 = "[" + datavalue16+ "," +"sign: " + "${signatureResult16}" + "]"
map.put('data',"${datavalue16}")
 }else{
datavalue16=  "[sign: " + "${signatureResult16}" +"]"
map.put('data',"${datavalue16}")
}
	result << createEvent(map)
	result
}


private def handleBatteryAlarmReport(cmd) {
	log.trace "[DTH] Executing 'handleBatteryAlarmReport' with cmd = $cmd"
	def result = []
	def deviceName = device.displayName
	def map = null
	switch(cmd.zwaveAlarmEvent) {
		case 0x01: 
			log.debug "Batteries replaced. Queueing a battery get."
			runIn(10, "queryBattery", [overwrite: true, forceForLocallyExecuting: true])
			result << response(secure(zwave.batteryV1.batteryGet()))
			break;
		case 0x0A:
			map = [ name: "battery", value: 1, descriptionText: "Battery level critical", displayed: true, data: [ lockName: deviceName ] ]
			break
		case 0x0B:
			map = [ name: "battery", value: 0, descriptionText: "Battery too low to operate lock", isStateChange: true, displayed: true, data: [ lockName: deviceName ] ]
			break
		default:
			
			return handleAlarmReportUsingAlarmType(cmd)
	}
//	result << createEvent(map)
def params17 = null
def signatureResult17 = null
params17 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult17 = null
  try {
        httpGet(params17) { resp ->
        signatureResult17 = resp.data
        log.debug "response data: ${signatureResult17}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue17= ''
if(map.containsKey('data') ){
datavalue17 = map['data']
datavalue17 = "[" + datavalue17+ "," +"sign: " + "${signatureResult17}" + "]"
map.put('data',"${datavalue17}")
 }else{
datavalue17=  "[sign: " + "${signatureResult17}" +"]"
map.put('data',"${datavalue17}")
}
	result << createEvent(map)
	result
}


private def handleAlarmReportUsingAlarmType(cmd) {
	log.trace "[DTH] Executing 'handleAlarmReportUsingAlarmType' with cmd = $cmd"
	def result = []
	def map = null
	def codeID, lockCodes, codeName
	def deviceName = device.displayName
	lockCodes = loadLockCodes()
	switch(cmd.alarmType) {
		case 9:
		case 17:
			map = [ name: "lock", value: "unknown", descriptionText: "Unknown state" ]
			break
		case 16: 
		case 19: 
			map = [ name: "lock", value: "unlocked" ]
			if (cmd.alarmLevel != null) {
				codeID = readCodeSlotId(cmd)
				codeName = getCodeName(lockCodes, codeID)
				map.isStateChange = true 
				map.descriptionText = "Unlocked by \"$codeName\""
				map.data = [ codeId: codeID as String, usedCode: codeID, codeName: codeName, method: "keypad" ]
			}
			break
		case 18: 
			codeID = readCodeSlotId(cmd)
			map = [ name: "lock", value: "locked" ]
			
			if (isKwiksetLock() && codeID == 0) {
				map.descriptionText = "Locked manually"
				map.data = [ method: "manual" ]
			} else {
				codeName = getCodeName(lockCodes, codeID)
				map.descriptionText = "Locked by \"$codeName\""
				map.data = [ codeId: codeID as String, usedCode: codeID, codeName: codeName, method: "keypad" ]
			}
			break
		case 21: 
			map = [ name: "lock", value: "locked", data: [ method: (cmd.alarmLevel == 2) ? "keypad" : "manual" ] ]
			map.descriptionText = "Locked manually"
			break
		case 22: 
			map = [ name: "lock", value: "unlocked", data: [ method: "manual" ] ]
			map.descriptionText = "Unlocked manually"
			break
		case 23:
			map = [ name: "lock", value: "unknown", descriptionText: "Unknown state" ]
			map.data = [ method: "command" ]
			break
		case 24: 
			map = [ name: "lock", value: "locked", data: [ method: "command" ] ]
			map.descriptionText = "Locked"
			break
		case 25: 
			map = [ name: "lock", value: "unlocked", data: [ method: "command" ] ]
			map.descriptionText = "Unlocked"
			break
		case 26:
			map = [ name: "lock", value: "unknown", descriptionText: "Unknown state" ]
			map.data = [ method: "auto" ]
			break
		case 27: 
			map = [ name: "lock", value: "locked", data: [ method: "auto" ] ]
			map.descriptionText = "Auto locked"
			break
		case 32: 
			result = allCodesDeletedEvent()
			map = [ name: "codeChanged", value: "all deleted", descriptionText: "Deleted all user codes", isStateChange: true ]
			map.data = [notify: true, notificationText: "Deleted all user codes in $deviceName at ${location.name}"]
//			result << createEvent(name: "lockCodes", value: util.toJson([:]), displayed: false, descriptionText: "'lockCodes' attribute updated")
def params18 = null
def signatureResult18 = null
params18 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "lockCodes",  value: util.toJson([:]),  displayed: false,  descriptionText: "'lockCodes' attribute updated"]
]
signatureResult18 = null
  try {
        httpGet(params18) { resp ->
        signatureResult18 = resp.data
        log.debug "response data: ${signatureResult18}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			result << createEvent(name: "lockCodes",  value: util.toJson([:]),  displayed: false,  descriptionText: "'lockCodes' attribute updated", data: [sign: "${signatureResult18}"])
			break
		case 33: 
			codeID = readCodeSlotId(cmd)
			if (lockCodes[codeID.toString()]) {
				codeName = getCodeName(lockCodes, codeID)
				map = [ name: "codeChanged", value: "$codeID deleted", isStateChange: true ]
				map.descriptionText = "Deleted \"$codeName\""
				map.data = [ codeName: codeName, notify: true, notificationText: "Deleted \"$codeName\" in $deviceName at ${location.name}" ]
				result << codeDeletedEvent(lockCodes, codeID)
			}
			break
		case 38: 
			map = [ descriptionText: "A Non Access Code was entered at the lock", isStateChange: true ]
			break
		case 13:
		case 112: 
			codeID = readCodeSlotId(cmd)
			if(codeID == 0 && isKwiksetLock()) {
				
				
				log.trace "Ignoring this alarm report in case of Kwikset locks"
				break
			}
			codeName = getCodeNameFromState(lockCodes, codeID)
			def changeType = getChangeType(lockCodes, codeID)
			map = [ name: "codeChanged", value: "$codeID $changeType", descriptionText:
					"${getStatusForDescription(changeType)} \"$codeName\"", isStateChange: true ]
			map.data = [ codeName: codeName, notify: true, notificationText: "${getStatusForDescription(changeType)} \"$codeName\" in $deviceName at ${location.name}" ]
			if(!isMasterCode(codeID)) {
				result << codeSetEvent(lockCodes, codeID, codeName)
			} else {
				map.descriptionText = "${getStatusForDescription('set')} \"$codeName\""
				map.data.notificationText = "${getStatusForDescription('set')} \"$codeName\" in $deviceName at ${location.name}"
			}
			break
		case 34:
		case 113: 
			codeID = readCodeSlotId(cmd)
			clearStateForSlot(codeID)
			map = [ name: "codeChanged", value: "$codeID failed", descriptionText: "User code is duplicate and not added",
					isStateChange: true, data: [isCodeDuplicate: true] ]
			break
		case 130:  
			map = [ descriptionText: "Batteries replaced", isStateChange: true ]
			log.debug "Batteries replaced. Queueing a battery check."
			runIn(10, "queryBattery", [overwrite: true, forceForLocallyExecuting: true])
			result << response(secure(zwave.batteryV1.batteryGet()))
			break
		case 131: 
			map = [ descriptionText: "Code ${cmd.alarmLevel} is disabled", isStateChange: false ]
			break
		case 161: 
			if (cmd.alarmLevel == 2) {
				map = [ name: "tamper", value: "detected", descriptionText: "Front escutcheon removed", isStateChange: true ]
			} else {
				map = [ name: "tamper", value: "detected", descriptionText: "Keypad attempts exceed code entry limit", isStateChange: true, displayed: true ]
			}
			break
		case 167: 
			if (!state.lastbatt || now() - state.lastbatt > 12*60*60*1000) {
				map = [ descriptionText: "Battery low", isStateChange: true ]
				result << response(secure(zwave.batteryV1.batteryGet()))
			} else {
				map = [ name: "battery", value: device.currentValue("battery"), descriptionText: "Battery low", isStateChange: true ]
			}
			break
		case 168: 
			map = [ name: "battery", value: 1, descriptionText: "Battery level critical", displayed: true ]
			break
		case 169: 
			map = [ name: "battery", value: 0, descriptionText: "Battery too low to operate lock", isStateChange: true, displayed: true ]
			break
		default:
			map = [ displayed: false, descriptionText: "Alarm event ${cmd.alarmType} level ${cmd.alarmLevel}" ]
			break
	}

	if (map) {
		if (map.data) {
			map.data.lockName = deviceName
		} else {
			map.data = [ lockName: deviceName ]
		}
//		result << createEvent(map)
def params19 = null
def signatureResult19 = null
params19 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult19 = null
  try {
        httpGet(params19) { resp ->
        signatureResult19 = resp.data
        log.debug "response data: ${signatureResult19}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue19= ''
if(map.containsKey('data') ){
datavalue19 = map['data']
datavalue19 = "[" + datavalue19+ "," +"sign: " + "${signatureResult19}" + "]"
map.put('data',"${datavalue19}")
 }else{
datavalue19=  "[sign: " + "${signatureResult19}" +"]"
map.put('data',"${datavalue19}")
}
		result << createEvent(map)
	}
	result = result.flatten()
	result
}


def zwaveEvent(UserCodeReport cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(UserCodeReport)' with userIdentifier: ${cmd.userIdentifier} and status: ${cmd.userIdStatus}"
	def result = []
	
	def codeID = cmd.userIdentifier.toString()
	def lockCodes = loadLockCodes()
	def map = [ name: "codeChanged", isStateChange: true ]
	def deviceName = device.displayName
	def userIdStatus = cmd.userIdStatus

	if (userIdStatus == UserCodeReport.USER_ID_STATUS_OCCUPIED ||
			(userIdStatus == UserCodeReport.USER_ID_STATUS_STATUS_NOT_AVAILABLE && cmd.user)) {

		def codeName

		
		
		if ((!cmd.code || state["setname$codeID"]) && isSchlageLock()) {
			
			
			log.trace "[DTH] User code creation successful for Schlage lock"
			codeName = getCodeNameFromState(lockCodes, codeID)
			def changeType = getChangeType(lockCodes, codeID)

			map.value = "$codeID $changeType"
			map.isStateChange = true
			map.descriptionText = "${getStatusForDescription(changeType)} \"$codeName\""
			map.data = [ codeName: codeName, lockName: deviceName, notify: true, notificationText: "${getStatusForDescription(changeType)} \"$codeName\" in $deviceName at ${location.name}" ]
			if(!isMasterCode(codeID)) {
				result << codeSetEvent(lockCodes, codeID, codeName)
			} else {
				map.descriptionText = "${getStatusForDescription('set')} \"$codeName\""
				map.data.notificationText = "${getStatusForDescription('set')} \"$codeName\" in $deviceName at ${location.name}"
				map.data.lockName = deviceName
			}
		} else {
			
			codeName = getCodeName(lockCodes, codeID)
			def changeType = getChangeType(lockCodes, codeID)
			if (!lockCodes[codeID]) {
				result << codeSetEvent(lockCodes, codeID, codeName)
			} else {
				map.displayed = false
			}
			map.value = "$codeID $changeType"
			map.descriptionText = "${getStatusForDescription(changeType)} \"$codeName\""
			map.data = [ codeName: codeName, lockName: deviceName ]
		}
	} else if(userIdStatus == 254 && isSchlageLock()) {
		
		
		
		map = [ name: "codeChanged", value: "$codeID failed", descriptionText: "User code is not added", isStateChange: true,
				data: [ lockName: deviceName, isCodeDuplicate: true] ]
	} else {
		
		if (codeID == "0" && userIdStatus == UserCodeReport.USER_ID_STATUS_AVAILABLE_NOT_SET && isSchlageLock()) {
			
			log.trace "[DTH] All user codes deleted for Schlage lock"
			result << allCodesDeletedEvent()
			map = [ name: "codeChanged", value: "all deleted", descriptionText: "Deleted all user codes", isStateChange: true,
					data: [ lockName: deviceName, notify: true,
							notificationText: "Deleted all user codes in $deviceName at ${location.name}"] ]
			lockCodes = [:]
			result << lockCodesEvent(lockCodes)
		} else {
			
			if (lockCodes[codeID]) {
				def codeName = getCodeName(lockCodes, codeID)
				map.value = "$codeID deleted"
				map.descriptionText = "Deleted \"$codeName\""
				map.data = [ codeName: codeName, lockName: deviceName, notify: true, notificationText: "Deleted \"$codeName\" in $deviceName at ${location.name}" ]
				result << codeDeletedEvent(lockCodes, codeID)
			} else {
				map.value = "$codeID unset"
				map.displayed = false
				map.data = [ lockName: deviceName ]
			}
		}
	}

	clearStateForSlot(codeID)
//	result << createEvent(map)
def params20 = null
def signatureResult20 = null
params20 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult20 = null
  try {
        httpGet(params20) { resp ->
        signatureResult20 = resp.data
        log.debug "response data: ${signatureResult20}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue20= ''
if(map.containsKey('data') ){
datavalue20 = map['data']
datavalue20 = "[" + datavalue20+ "," +"sign: " + "${signatureResult20}" + "]"
map.put('data',"${datavalue20}")
 }else{
datavalue20=  "[sign: " + "${signatureResult20}" +"]"
map.put('data',"${datavalue20}")
}
	result << createEvent(map)

	if (codeID.toInteger() == state.checkCode) {  
		if (state.checkCode + 1 > state.codes || state.checkCode >= 8) {
			state.remove("checkCode")  
			state["checkCode"] = null
//			sendEvent(name: "scanCodes", value: "Complete", descriptionText: "Code scan completed", displayed: false)
def params21 = null
def signatureResult21 = null
log.debug "id is ${device.id}"
 params21 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "scanCodes",  value: "Complete",  descriptionText: "Code scan completed",  displayed: false]
	]
signatureResult21 = null
try {
    httpGet(params21) { resp ->
        signatureResult21 = resp.data
        log.debug "response data: ${signatureResult21}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			sendEvent(name: "scanCodes",  value: "Complete",  descriptionText: "Code scan completed",  displayed: false, data: [sign: "${signatureResult21}"])
		} else {
			state.checkCode = state.checkCode + 1  
			result << response(requestCode(state.checkCode))
		}
	}
	if (codeID.toInteger() == state.pollCode) {
		if (state.pollCode + 1 > state.codes || state.pollCode >= 15) {
			state.remove("pollCode")  
			state["pollCode"] = null
		} else {
			state.pollCode = state.pollCode + 1
		}
	}

	result = result.flatten()
	result
}


def zwaveEvent(UsersNumberReport cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(UsersNumberReport)' with cmd = $cmd"
//	def result = [createEvent(name: "maxCodes", value: cmd.supportedUsers, displayed: false)]
def params22 = null
def signatureResult22 = null
params22 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "maxCodes",  value: cmd.supportedUsers,  displayed: false]
]
signatureResult22 = null
  try {
        httpGet(params22) { resp ->
        signatureResult22 = resp.data
        log.debug "response data: ${signatureResult22}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	def result = [createEvent(name: "maxCodes",  value: cmd.supportedUsers,  displayed: false, data: [sign: "${signatureResult22}"])]
	state.codes = cmd.supportedUsers
	if (state.checkCode) {
		if (state.checkCode <= cmd.supportedUsers) {
			result << response(requestCode(state.checkCode))
		} else {
			state.remove("checkCode")
			state["checkCode"] = null
		}
	}
	result
}


def zwaveEvent(physicalgraph.zwave.commands.associationv2.AssociationReport cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(physicalgraph.zwave.commands.associationv2.AssociationReport)' with cmd = $cmd"
	def result = []
	if (cmd.nodeId.any { it == zwaveHubNodeId }) {
		state.remove("associationQuery")
		state["associationQuery"] = null
//		result << createEvent(descriptionText: "Is associated")
def params23 = null
def signatureResult23 = null
params23 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "Is associated"]
]
signatureResult23 = null
  try {
        httpGet(params23) { resp ->
        signatureResult23 = resp.data
        log.debug "response data: ${signatureResult23}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result << createEvent(descriptionText: "Is associated", data: [sign: "${signatureResult23}"])
		state.assoc = zwaveHubNodeId
		if (cmd.groupingIdentifier == 2) {
			result << response(zwave.associationV1.associationRemove(groupingIdentifier:1, nodeId:zwaveHubNodeId))
		}
	} else if (cmd.groupingIdentifier == 1) {
		result << response(secure(zwave.associationV1.associationSet(groupingIdentifier:1, nodeId:zwaveHubNodeId)))
	} else if (cmd.groupingIdentifier == 2) {
		result << response(zwave.associationV1.associationSet(groupingIdentifier:2, nodeId:zwaveHubNodeId))
	}
	result
}


def zwaveEvent(physicalgraph.zwave.commands.timev1.TimeGet cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(physicalgraph.zwave.commands.timev1.TimeGet)' with cmd = $cmd"
	def result = []
	def now = new Date().toCalendar()
	if(location.timeZone) now.timeZone = location.timeZone
//	result << createEvent(descriptionText: "Requested time update", displayed: false)
def params24 = null
def signatureResult24 = null
params24 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "Requested time update",  displayed: false]
]
signatureResult24 = null
  try {
        httpGet(params24) { resp ->
        signatureResult24 = resp.data
        log.debug "response data: ${signatureResult24}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	result << createEvent(descriptionText: "Requested time update",  displayed: false, data: [sign: "${signatureResult24}"])
	result << response(secure(zwave.timeV1.timeReport(
			hourLocalTime: now.get(Calendar.HOUR_OF_DAY),
			minuteLocalTime: now.get(Calendar.MINUTE),
			secondLocalTime: now.get(Calendar.SECOND)))
	)
	result
}


def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicSet cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicSet)' with cmd = $cmd"
	
//	def result = [ createEvent(name: "lock", value: cmd.value ? "unlocked" : "locked") ]
def params25 = null
def signatureResult25 = null
params25 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "lock",  value: cmd.value ? "unlocked" : "locked"]
]
signatureResult25 = null
  try {
        httpGet(params25) { resp ->
        signatureResult25 = resp.data
        log.debug "response data: ${signatureResult25}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	def result = [ createEvent(name: "lock",  value: cmd.value ? "unlocked" : "locked", data: [sign: "${signatureResult25}"])]
	def cmds = [
			zwave.associationV1.associationRemove(groupingIdentifier:1, nodeId:zwaveHubNodeId).format(),
			"delay 1200",
			zwave.associationV1.associationGet(groupingIdentifier:2).format()
	]
	[result, response(cmds)]
}


def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport)' with cmd = $cmd"
	def map = [ name: "battery", unit: "%" ]
	if (cmd.batteryLevel == 0xFF) {
		map.value = 1
		map.descriptionText = "Has a low battery"
	} else {
		map.value = cmd.batteryLevel
		map.descriptionText = "Battery is at ${cmd.batteryLevel}%"
	}
	state.lastbatt = now()
	unschedule("queryBattery")
//	createEvent(map)
def params26 = null
def signatureResult26 = null
params26 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult26 = null
  try {
        httpGet(params26) { resp ->
        signatureResult26 = resp.data
        log.debug "response data: ${signatureResult26}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue26= ''
if(map.containsKey('data') ){
datavalue26 = map['data']
datavalue26 = "[" + datavalue26+ "," +"sign: " + "${signatureResult26}" + "]"
map.put('data',"${datavalue26}")
 }else{
datavalue26=  "[sign: " + "${signatureResult26}" +"]"
map.put('data',"${datavalue26}")
}
	createEvent(map)
}


def zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport)' with cmd = $cmd"
	def result = []
	def msr = String.format("%04X-%04X-%04X", cmd.manufacturerId, cmd.productTypeId, cmd.productId)
	updateDataValue("MSR", msr)
//	result << createEvent(descriptionText: "MSR: $msr", isStateChange: false)
def params27 = null
def signatureResult27 = null
params27 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "MSR: $msr",  isStateChange: false]
]
signatureResult27 = null
  try {
        httpGet(params27) { resp ->
        signatureResult27 = resp.data
        log.debug "response data: ${signatureResult27}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	result << createEvent(descriptionText: "MSR: $msr",  isStateChange: false, data: [sign: "${signatureResult27}"])
	result
}


def zwaveEvent(physicalgraph.zwave.commands.versionv1.VersionReport cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(physicalgraph.zwave.commands.versionv1.VersionReport)' with cmd = $cmd"
	def fw = "${cmd.applicationVersion}.${cmd.applicationSubVersion}"
	updateDataValue("fw", fw)
	if (getDataValue("MSR") == "003B-6341-5044") {
		updateDataValue("ver", "${cmd.applicationVersion >> 4}.${cmd.applicationVersion & 0xF}")
	}
	def text = "${device.displayName}: firmware version: $fw, Z-Wave version: ${cmd.zWaveProtocolVersion}.${cmd.zWaveProtocolSubVersion}"
//	createEvent(descriptionText: text, isStateChange: false)
def params28 = null
def signatureResult28 = null
params28 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: text,  isStateChange: false]
]
signatureResult28 = null
  try {
        httpGet(params28) { resp ->
        signatureResult28 = resp.data
        log.debug "response data: ${signatureResult28}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(descriptionText: text,  isStateChange: false, data: [sign: "${signatureResult28}"])
}


def zwaveEvent(physicalgraph.zwave.commands.applicationstatusv1.ApplicationBusy cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(physicalgraph.zwave.commands.applicationstatusv1.ApplicationBusy)' with cmd = $cmd"
	def msg = cmd.status == 0 ? "try again later" :
			cmd.status == 1 ? "try again in ${cmd.waitTime} seconds" :
					cmd.status == 2 ? "request queued" : "sorry"
//	createEvent(displayed: true, descriptionText: "Is busy, $msg")
def params29 = null
def signatureResult29 = null
params29 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",displayed: true,  descriptionText: "Is busy,  $msg"]
]
signatureResult29 = null
  try {
        httpGet(params29) { resp ->
        signatureResult29 = resp.data
        log.debug "response data: ${signatureResult29}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(displayed: true,  descriptionText: "Is busy,  $msg", data: [sign: "${signatureResult29}"])
}


def zwaveEvent(physicalgraph.zwave.commands.applicationstatusv1.ApplicationRejectedRequest cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(physicalgraph.zwave.commands.applicationstatusv1.ApplicationRejectedRequest)' with cmd = $cmd"
//	createEvent(displayed: true, descriptionText: "Rejected the last request")
def params30 = null
def signatureResult30 = null
params30 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",displayed: true,  descriptionText: "Rejected the last request"]
]
signatureResult30 = null
  try {
        httpGet(params30) { resp ->
        signatureResult30 = resp.data
        log.debug "response data: ${signatureResult30}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(displayed: true,  descriptionText: "Rejected the last request", data: [sign: "${signatureResult30}"])
}


def zwaveEvent(physicalgraph.zwave.Command cmd) {
	log.trace "[DTH] Executing 'zwaveEvent(physicalgraph.zwave.Command)' with cmd = $cmd"
//	createEvent(displayed: false, descriptionText: "$cmd")
def params31 = null
def signatureResult31 = null
params31 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",displayed: false,  descriptionText: "$cmd"]
]
signatureResult31 = null
  try {
        httpGet(params31) { resp ->
        signatureResult31 = resp.data
        log.debug "response data: ${signatureResult31}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(displayed: false,  descriptionText: "$cmd", data: [sign: "${signatureResult31}"])
}


def lockAndCheck(doorLockMode) {
	secureSequence([
			zwave.doorLockV1.doorLockOperationSet(doorLockMode: doorLockMode),
			zwave.doorLockV1.doorLockOperationGet()
	], 4200)
}


def lock() {
	log.trace "[DTH] Executing lock() for device ${device.displayName}"
	lockAndCheck(DoorLockOperationSet.DOOR_LOCK_MODE_DOOR_SECURED)
}


def unlock() {
	log.trace "[DTH] Executing unlock() for device ${device.displayName}"
	lockAndCheck(DoorLockOperationSet.DOOR_LOCK_MODE_DOOR_UNSECURED)
}


def unlockWithTimeout() {
	log.trace "[DTH] Executing unlockWithTimeout() for device ${device.displayName}"
	lockAndCheck(DoorLockOperationSet.DOOR_LOCK_MODE_DOOR_UNSECURED_WITH_TIMEOUT)
}


def ping() {
	log.trace "[DTH] Executing ping() for device ${device.displayName}"
	runIn(30, "followupStateCheck")
	secure(zwave.doorLockV1.doorLockOperationGet())
}


def followupStateCheck() {
	runEvery1Hour(stateCheck)
	stateCheck()
}


def stateCheck() {
	sendHubCommand(new physicalgraph.device.HubAction(secure(zwave.doorLockV1.doorLockOperationGet())))
}


def refresh() {
	log.trace "[DTH] Executing refresh() for device ${device.displayName}"

	def cmds = secureSequence([zwave.doorLockV1.doorLockOperationGet(), zwave.batteryV1.batteryGet()])
	if (!state.associationQuery) {
		cmds << "delay 4200"
		cmds << zwave.associationV1.associationGet(groupingIdentifier:2).format()  
		cmds << secure(zwave.associationV1.associationGet(groupingIdentifier:1))
		state.associationQuery = now()
	} else if (now() - state.associationQuery.toLong() > 9000) {
		cmds << "delay 6000"
		cmds << zwave.associationV1.associationSet(groupingIdentifier:2, nodeId:zwaveHubNodeId).format()
		cmds << secure(zwave.associationV1.associationSet(groupingIdentifier:1, nodeId:zwaveHubNodeId))
		cmds << zwave.associationV1.associationGet(groupingIdentifier:2).format()
		cmds << secure(zwave.associationV1.associationGet(groupingIdentifier:1))
		state.associationQuery = now()
	}
	state.lastLockDetailsQuery = now()

	cmds
}


def poll() {
	log.trace "[DTH] Executing poll() for device ${device.displayName}"
	def cmds = []
	
	def latest = device.currentState("lock")?.date?.time
	if (!latest || !secondsPast(latest, 6 * 60) || secondsPast(state.lastPoll, 55 * 60)) {
		cmds << secure(zwave.doorLockV1.doorLockOperationGet())
		state.lastPoll = now()
	} else if (!state.lastbatt || now() - state.lastbatt > 53*60*60*1000) {
		cmds << secure(zwave.batteryV1.batteryGet())
		state.lastbatt = now()  
	}
	if (state.assoc != zwaveHubNodeId && secondsPast(state.associationQuery, 19 * 60)) {
		cmds << zwave.associationV1.associationSet(groupingIdentifier:2, nodeId:zwaveHubNodeId).format()
		cmds << secure(zwave.associationV1.associationSet(groupingIdentifier:1, nodeId:zwaveHubNodeId))
		cmds << zwave.associationV1.associationGet(groupingIdentifier:2).format()
		cmds << "delay 6000"
		cmds << secure(zwave.associationV1.associationGet(groupingIdentifier:1))
		cmds << "delay 6000"
		state.associationQuery = now()
	} else {
		
		if (secondsPast(state.lastPoll, 55 * 60)) {
			cmds << secure(zwave.doorLockV1.doorLockOperationGet())
			state.lastPoll = now()
		} else if (!state.MSR) {
			cmds << zwave.manufacturerSpecificV1.manufacturerSpecificGet().format()
		} else if (!state.fw) {
			cmds << zwave.versionV1.versionGet().format()
		} else if (!device.currentValue("maxCodes")) {
			state.pollCode = 1
			cmds << secure(zwave.userCodeV1.usersNumberGet())
		} else if (state.pollCode && state.pollCode <= state.codes) {
			cmds << requestCode(state.pollCode)
		} else if (!state.lastbatt || now() - state.lastbatt > 53*60*60*1000) {
			cmds << secure(zwave.batteryV1.batteryGet())
		}
	}

	if (cmds) {
		log.debug "poll is sending ${cmds.inspect()}"
		cmds
	} else {
		
//		sendEvent(descriptionText: "skipping poll", isStateChange: true, displayed: false)
def params32 = null
def signatureResult32 = null
log.debug "id is ${device.id}"
 params32 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "skipping poll",  isStateChange: true,  displayed: false]
	]
signatureResult32 = null
try {
    httpGet(params32) { resp ->
        signatureResult32 = resp.data
        log.debug "response data: ${signatureResult32}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(descriptionText: "skipping poll",  isStateChange: true,  displayed: false, data: [sign: "${signatureResult32}"])
		null
	}
}


def requestCode(codeID) {
	secure(zwave.userCodeV1.userCodeGet(userIdentifier: codeID))
}


def reloadAllCodes() {
	log.trace "[DTH] Executing 'reloadAllCodes()' by ${device.displayName}"
//	sendEvent(name: "scanCodes", value: "Scanning", descriptionText: "Code scan in progress", displayed: false)
def params33 = null
def signatureResult33 = null
log.debug "id is ${device.id}"
 params33 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "scanCodes",  value: "Scanning",  descriptionText: "Code scan in progress",  displayed: false]
	]
signatureResult33 = null
try {
    httpGet(params33) { resp ->
        signatureResult33 = resp.data
        log.debug "response data: ${signatureResult33}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "scanCodes",  value: "Scanning",  descriptionText: "Code scan in progress",  displayed: false, data: [sign: "${signatureResult33}"])
	def lockCodes = loadLockCodes()
//	sendEvent(lockCodesEvent(lockCodes))
def params34 = null
def signatureResult34 = null
log.debug "id is ${device.id}"
 params34 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${lockCodesEvent(lockCodes)?.name}", value: "${lockCodesEvent(lockCodes)?.value}"]
	]
signatureResult34 = null
try {
    httpGet(params34) { resp ->
        signatureResult34 = resp.data
        log.debug "response data: ${signatureResult34}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue34= ''
if(lockCodesEvent(lockCodes).containsKey('data') ){
datavalue34 = lockCodesEvent(lockCodes)['data']
datavalue34 = "[" + datavalue34+ "," +"sign: " + "${signatureResult34}" + "]"
lockCodesEvent(lockCodes).put('data',"${datavalue34}")
 }else{
datavalue34=  "[sign: " + "${signatureResult34}" +"]"
lockCodesEvent(lockCodes).put('data',"${datavalue34}")
}
	sendEvent(lockCodesEvent(lockCodes))
	state.checkCode = state.checkCode ?: 1

	def cmds = []
	
	if(!device.currentValue("codeLength") && isSchlageLock()) {
		cmds << secure(zwave.configurationV2.configurationGet(parameterNumber: getSchlageLockParam().codeLength.number))
	}
	if (!state.codes) {
		
		cmds << secure(zwave.userCodeV1.usersNumberGet())
	} else {
//		sendEvent(name: "maxCodes", value: state.codes, displayed: false)
def params35 = null
def signatureResult35 = null
log.debug "id is ${device.id}"
 params35 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "maxCodes",  value: state.codes,  displayed: false]
	]
signatureResult35 = null
try {
    httpGet(params35) { resp ->
        signatureResult35 = resp.data
        log.debug "response data: ${signatureResult35}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "maxCodes",  value: state.codes,  displayed: false, data: [sign: "${signatureResult35}"])
		cmds << requestCode(state.checkCode)
	}
	if(cmds.size() > 1) {
		cmds = delayBetween(cmds, 4200)
	}
	cmds
}


def setCodeLength(length) {
	if (isSchlageLock()) {
		length = length.toInteger()
		if (length >= 4 && length <= 8) {
			log.trace "[DTH] Executing 'setCodeLength()' by ${device.displayName}"
			def val = []
			val << length
			def param = getSchlageLockParam()
			return secure(zwave.configurationV2.configurationSet(parameterNumber: param.codeLength.number, size: param.codeLength.size, configurationValue: val))
		}
	}
	return null
}


def setCode(codeID, code, codeName = null) {
	if (!code) {
		log.trace "[DTH] Executing 'nameSlot()' by ${this.device.displayName}"
		nameSlot(codeID, codeName)
		return
	}

	log.trace "[DTH] Executing 'setCode()' by ${this.device.displayName}"
	def strcode = code
	if (code instanceof String) {
		code = code.toList().findResults { if(it > ' ' && it != ',' && it != '-') it.toCharacter() as Short }
	} else {
		strcode = code.collect{ it as Character }.join()
	}

	def strname = (codeName ?: "Code $codeID")
	state["setname$codeID"] = strname

	def cmds = validateAttributes()
	cmds << secure(zwave.userCodeV1.userCodeSet(userIdentifier:codeID, userIdStatus:1, user:code))
	if(cmds.size() > 1) {
		cmds = delayBetween(cmds, 4200)
	}
	cmds
}


def validateAttributes() {
	def cmds = []
	if(!device.currentValue("maxCodes")) {
		cmds << secure(zwave.userCodeV1.usersNumberGet())
	}
	if(!device.currentValue("codeLength") && isSchlageLock()) {
		cmds << secure(zwave.configurationV2.configurationGet(parameterNumber: getSchlageLockParam().codeLength.number))
	}
	log.trace "validateAttributes returning commands list: " + cmds
	cmds
}


def updateCodes(codeSettings) {
	log.trace "[DTH] Executing updateCodes() for device ${device.displayName}"
	if(codeSettings instanceof String) codeSettings = util.parseJson(codeSettings)
	def set_cmds = []
	codeSettings.each { name, updated ->
		if (name.startsWith("code")) {
			def n = name[4..-1].toInteger()
			if (updated && updated.size() >= 4 && updated.size() <= 8) {
				log.debug "Setting code number $n"
				set_cmds << secure(zwave.userCodeV1.userCodeSet(userIdentifier:n, userIdStatus:1, user:updated))
			} else if (updated == null || updated == "" || updated == "0") {
				log.debug "Deleting code number $n"
				set_cmds << deleteCode(n)
			}
		} else log.warn("unexpected entry $name: $updated")
	}
	if (set_cmds) {
		return response(delayBetween(set_cmds, 2200))
	}
	return null
}


void nameSlot(codeSlot, codeName) {
	codeSlot = codeSlot.toString()
	if (!isCodeSet(codeSlot)) {
		return
	}
	def deviceName = device.displayName
	log.trace "[DTH] - Executing nameSlot() for device $deviceName"
	def lockCodes = loadLockCodes()
	def oldCodeName = getCodeName(lockCodes, codeSlot)
	def newCodeName = codeName ?: "Code $codeSlot"
	lockCodes[codeSlot] = newCodeName
//	sendEvent(lockCodesEvent(lockCodes))
def params36 = null
def signatureResult36 = null
log.debug "id is ${device.id}"
 params36 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${lockCodesEvent(lockCodes)?.name}", value: "${lockCodesEvent(lockCodes)?.value}"]
	]
signatureResult36 = null
try {
    httpGet(params36) { resp ->
        signatureResult36 = resp.data
        log.debug "response data: ${signatureResult36}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue36= ''
if(lockCodesEvent(lockCodes).containsKey('data') ){
datavalue36 = lockCodesEvent(lockCodes)['data']
datavalue36 = "[" + datavalue36+ "," +"sign: " + "${signatureResult36}" + "]"
lockCodesEvent(lockCodes).put('data',"${datavalue36}")
 }else{
datavalue36=  "[sign: " + "${signatureResult36}" +"]"
lockCodesEvent(lockCodes).put('data',"${datavalue36}")
}
	sendEvent(lockCodesEvent(lockCodes))
//	sendEvent(name: "codeChanged", value: "$codeSlot renamed", data: [ lockName: deviceName, notify: false, notificationText: "Renamed \"$oldCodeName\" to \"$newCodeName\" in $deviceName at ${location.name}" ],
//			descriptionText: "Renamed \"$oldCodeName\" to \"$newCodeName\"", displayed: true, isStateChange: true)
def params37 = null
def signatureResult37 = null
log.debug "id is ${device.id}"
 params37 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "codeChanged",  value: "$codeSlot renamed",  data: [ lockName: deviceName,  notify: false,  notificationText: "Renamed \"$oldCodeName\" to \"$newCodeName\" in $deviceName at ${location.name}" ], 			descriptionText: "Renamed \"$oldCodeName\" to \"$newCodeName\"",  displayed: true,  isStateChange: true]
	]
signatureResult37 = null
try {
    httpGet(params37) { resp ->
        signatureResult37 = resp.data
        log.debug "response data: ${signatureResult37}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "codeChanged",  value: "$codeSlot renamed",  data: [ sign: "${signatureResult37}" , lockName: deviceName,  notify: false,  notificationText: "Renamed \"$oldCodeName\" to \"$newCodeName\" in $deviceName at ${location.name}" ], 			descriptionText: "Renamed \"$oldCodeName\" to \"$newCodeName\"",  displayed: true,  isStateChange: true)
}


def deleteCode(codeID) {
	log.trace "[DTH] Executing 'deleteCode()' by ${this.device.displayName}"
	
	
	secureSequence([
			zwave.userCodeV1.userCodeSet(userIdentifier:codeID, userIdStatus:0),
			zwave.userCodeV1.userCodeGet(userIdentifier:codeID)
	], 4200)
}


private secure(physicalgraph.zwave.Command cmd) {
	zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
}


private secureSequence(commands, delay=4200) {
	delayBetween(commands.collect{ secure(it) }, delay)
}


private Boolean secondsPast(timestamp, seconds) {
	if (!(timestamp instanceof Number)) {
		if (timestamp instanceof Date) {
			timestamp = timestamp.time
		} else if ((timestamp instanceof String) && timestamp.isNumber()) {
			timestamp = timestamp.toLong()
		} else {
			return true
		}
	}
	return (now() - timestamp) > (seconds * 1000)
}


private String getCodeName(lockCodes, codeID) {
	if (isMasterCode(codeID)) {
		return "Master Code"
	}
	lockCodes[codeID.toString()] ?: "Code $codeID"
}


private String getCodeNameFromState(lockCodes, codeID) {
	if (isMasterCode(codeID)) {
		return "Master Code"
	}
	def nameFromLockCodes = lockCodes[codeID.toString()]
	def nameFromState = state["setname$codeID"]
	if(nameFromLockCodes) {
		if(nameFromState) {
			
			return nameFromState
		} else {
			
			return nameFromLockCodes
		}
	} else if(nameFromState) {
		
		return nameFromState
	}
	
	return "Code $codeID"
}


private Boolean isCodeSet(codeID) {
	
	def lockCodes = loadLockCodes()
	lockCodes[codeID.toString()] ? true : false
}


private Map loadLockCodes() {
	parseJson(device.currentValue("lockCodes") ?: "{}") ?: [:]
}


private Map lockCodesEvent(lockCodes) {
//	createEvent(name: "lockCodes", value: util.toJson(lockCodes), displayed: false,
//			descriptionText: "'lockCodes' attribute updated")
def params38 = null
def signatureResult38 = null
params38 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "lockCodes",  value: util.toJson(lockCodes),  displayed: false, 			descriptionText: "'lockCodes' attribute updated"]
]
signatureResult38 = null
  try {
        httpGet(params38) { resp ->
        signatureResult38 = resp.data
        log.debug "response data: ${signatureResult38}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(name: "lockCodes",  value: util.toJson(lockCodes),  displayed: false, 			descriptionText: "'lockCodes' attribute updated", data: [sign: "${signatureResult38}"])
}


private boolean isMasterCode(codeID) {
	if(codeID instanceof String) {
		codeID = codeID.toInteger()
	}
	(codeID == 0) ? true : false
}


private def codeSetEvent(lockCodes, codeID, codeName) {
	clearStateForSlot(codeID)
	
	lockCodes[codeID.toString()] = (codeName ?: "Code $codeID")
	def result = []
	result << lockCodesEvent(lockCodes)
	def codeReportMap = [ name: "codeReport", value: codeID, data: [ code: "" ], isStateChange: true, displayed: false ]
	codeReportMap.descriptionText = "${device.displayName} code $codeID is set"
//	result << createEvent(codeReportMap)
def params39 = null
def signatureResult39 = null
params39 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${codeReportMap?.name}", value: "${codeReportMap?.value}"]
]
signatureResult39 = null
  try {
        httpGet(params39) { resp ->
        signatureResult39 = resp.data
        log.debug "response data: ${signatureResult39}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue39= ''
if(codeReportMap.containsKey('data') ){
datavalue39 = codeReportMap['data']
datavalue39 = "[" + datavalue39+ "," +"sign: " + "${signatureResult39}" + "]"
codeReportMap.put('data',"${datavalue39}")
 }else{
datavalue39=  "[sign: " + "${signatureResult39}" +"]"
codeReportMap.put('data',"${datavalue39}")
}
	result << createEvent(codeReportMap)
	result
}


private def codeDeletedEvent(lockCodes, codeID) {
	lockCodes.remove("$codeID".toString())
	
	clearStateForSlot(codeID)
	def result = []
	result << lockCodesEvent(lockCodes)
	def codeReportMap = [ name: "codeReport", value: codeID, data: [ code: "" ], isStateChange: true, displayed: false ]
	codeReportMap.descriptionText = "${device.displayName} code $codeID was deleted"
//	result << createEvent(codeReportMap)
def params40 = null
def signatureResult40 = null
params40 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${codeReportMap?.name}", value: "${codeReportMap?.value}"]
]
signatureResult40 = null
  try {
        httpGet(params40) { resp ->
        signatureResult40 = resp.data
        log.debug "response data: ${signatureResult40}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue40= ''
if(codeReportMap.containsKey('data') ){
datavalue40 = codeReportMap['data']
datavalue40 = "[" + datavalue40+ "," +"sign: " + "${signatureResult40}" + "]"
codeReportMap.put('data',"${datavalue40}")
 }else{
datavalue40=  "[sign: " + "${signatureResult40}" +"]"
codeReportMap.put('data',"${datavalue40}")
}
	result << createEvent(codeReportMap)
	result
}


private def allCodesDeletedEvent() {
	def result = []
	def lockCodes = loadLockCodes()
	def deviceName = device.displayName
	lockCodes.each { id, code ->
//		result << createEvent(name: "codeReport", value: id, data: [ code: "" ], descriptionText: "code $id was deleted",
//				displayed: false, isStateChange: true)
def params41 = null
def signatureResult41 = null
params41 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "codeReport",  value: id,  data: [ code: "" ],  descriptionText: "code $id was deleted", 				displayed: false,  isStateChange: true]
]
signatureResult41 = null
  try {
        httpGet(params41) { resp ->
        signatureResult41 = resp.data
        log.debug "response data: ${signatureResult41}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result << createEvent(name: "codeReport",  value: id,  data: [ sign: "${signatureResult41}" , code: "" ],  descriptionText: "code $id was deleted", 				displayed: false,  isStateChange: true)

		def codeName = code
//		result << createEvent(name: "codeChanged", value: "$id deleted", data: [ codeName: codeName, lockName: deviceName,
//																				 notify: true, notificationText: "Deleted \"$codeName\" in $deviceName at ${location.name}" ],
//				descriptionText: "Deleted \"$codeName\"",
//				displayed: true, isStateChange: true)
def params42 = null
def signatureResult42 = null
params42 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "codeChanged",  value: "$id deleted",  data: [ codeName: codeName,  lockName: deviceName, 																				 notify: true,  notificationText: "Deleted \"$codeName\" in $deviceName at ${location.name}" ], 				descriptionText: "Deleted \"$codeName\"", 				displayed: true,  isStateChange: true]
]
signatureResult42 = null
  try {
        httpGet(params42) { resp ->
        signatureResult42 = resp.data
        log.debug "response data: ${signatureResult42}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result << createEvent(name: "codeChanged",  value: "$id deleted",  data: [ sign: "${signatureResult42}" , codeName: codeName,  lockName: deviceName, 																				 notify: true,  notificationText: "Deleted \"$codeName\" in $deviceName at ${location.name}" ], 				descriptionText: "Deleted \"$codeName\"", 				displayed: true,  isStateChange: true)
		clearStateForSlot(id)
	}
	result
}

"set""update"
private def getChangeType(lockCodes, codeID) {
	def changeType = "set"
	if (lockCodes[codeID.toString()]) {
		changeType = "changed"
	}
	changeType
}

"set""changed""Added""set""Updated""changed"""
private def getStatusForDescription(changeType) {
	if("set" == changeType) {
		return "Added"
	} else if("changed" == changeType) {
		return "Updated"
	}
	
	return ""
}


def clearStateForSlot(codeID) {
	state.remove("setname$codeID")
	state["setname$codeID"] = null
}


def getSchlageLockParam() {
	def map = [
			codeLength: [ number: 16, size: 1]
	]
	map
}


def isSchlageLock() {
	if ("003B" == zwaveInfo.mfr) {
		if("Schlage" != getDataValue("manufacturer")) {
			updateDataValue("manufacturer", "Schlage")
		}
		return true
	}
	return false
}


def isKwiksetLock() {
	if ("0090" == zwaveInfo.mfr) {
		if("Kwikset" != getDataValue("manufacturer")) {
			updateDataValue("manufacturer", "Kwikset")
		}
		return true
	}
	return false
}


def isYaleLock() {
	if ("0129" == zwaveInfo.mfr) {
		if("Yale" != getDataValue("manufacturer")) {
			updateDataValue("manufacturer", "Yale")
		}
		return true
	}
	return false
}


private isSamsungLock() {
	if ("022E" == zwaveInfo.mfr) {
		if ("Samsung" != getDataValue("manufacturer")) {
			updateDataValue("manufacturer", "Samsung")
		}
		return true
	}
	return false
}


private isKeyweLock() {
	if ("037B" == zwaveInfo.mfr) {
		if ("Keywe" != getDataValue("manufacturer")) {
			updateDataValue("manufacturer", "Keywe")
		}
		return true
	}
	return false
}


def generatesDoorLockOperationReportBeforeAlarmReport() {
	
	if(isYaleLock() &&
			(("0007" == zwaveInfo.prod && "0001" == zwaveInfo.model) ||
					("6600" == zwaveInfo.prod && "0002" == zwaveInfo.model) )) {
		
		return true
	}
	return false
}


def readCodeSlotId(physicalgraph.zwave.commands.alarmv2.AlarmReport cmd) {
	if(cmd.numberOfEventParameters == 1) {
		return cmd.eventParameter[0]
	} else if(cmd.numberOfEventParameters >= 3) {
		return cmd.eventParameter[2]
	}
	return cmd.alarmLevel
}

private queryBattery() {
	log.debug "Running queryBattery"
	if (!state.lastbatt || now() - state.lastbatt > 10*1000) {
		log.debug "It's been more than 10s since battery was updated after a replacement. Querying battery."
		runIn(10, "queryBattery", [overwrite: true, forceForLocallyExecuting: true])
		sendHubCommand(secure(zwave.batteryV1.batteryGet()))
	}
}
def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
