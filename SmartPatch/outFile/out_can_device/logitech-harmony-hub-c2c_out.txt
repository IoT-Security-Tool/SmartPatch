 import java.util.UUID
import groovy.json.JsonOutput
/**
 *  Logitech Harmony Hub
 *
 *  Author: SmartThings
 */
metadata {
	definition (name: "Logitech Harmony Hub C2C", namespace: "smartthings", author: "SmartThings") {
		capability "Media Controller"
        capability "Refresh"
		capability "Health Check"
        
        command "activityoff"   
        command "alloff" 
        command "refresh"          
	}

	simulator {
	}

	tiles {
		standardTile("icon", "icon", width: 1, height: 1, canChangeIcon: false, inactiveLabel: true, canChangeBackground: false) {
			state "default", label: "Harmony", action: "", icon: "st.harmony.harmony-hub-icon", backgroundColor: "#FFFFFF"
		}
		valueTile("currentActivity", "device.currentActivity", decoration: "flat", height: 1, width: 3, inactiveLabel: false) {
			state "default", label:'${currentValue}'
		}
		standardTile("huboff", "device.switch", inactiveLabel: false, decoration: "flat") {
			state "default", label:'End Activity', action:"activityoff", icon:"st.harmony.harmony-hub-icon"
		}   
		standardTile("alloff", "device.switch", inactiveLabel: false, decoration: "flat") {
			state "default", label:'All Activities', action:"alloff", icon:"st.secondary.off"
		}            
		standardTile("refresh", "device.power", inactiveLabel: false, decoration: "flat") {
			state "default", label:'', action:"refresh.refresh", icon:"st.secondary.refresh"
		}

		main (["icon"])
		details(["currentActivity", "huboff", "refresh"])
	}
}

def initialize() {
//	sendEvent(name: "DeviceWatch-Enroll", value: JsonOutput.toJson([protocol: "cloud", scheme:"untracked"]), displayed: false)
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "DeviceWatch-Enroll", value: JsonOutput.toJson([protocol: "cloud", scheme:"untracked"]), displayed: false]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "DeviceWatch-Enroll", value: JsonOutput.toJson([protocol: "cloud", scheme:"untracked"]), displayed: false, data: [sign: "${signatureResult1}"])
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

	log.debug "installed()"
	initialize()
}

def updated() {
	log.debug "updated()"
	initialize()
}

def startActivity(String activityId) {
	log.debug "Executing 'Start Activity'"
	log.trace parent.activity("$device.deviceNetworkId-$activityId","start")    
}

def activityoff() {
	log.debug "Executing 'Activity Off'"
    log.trace parent.activity(device.deviceNetworkId,"hub")    
}

def alloff() {
	log.debug "Executing 'All Off'"
    log.trace parent.activity("all","end")    
}

def poll() {
	log.debug "Executing 'Poll'"
	log.trace parent.poll()
}

def ping() {
	refresh()
}

def refresh() {
	log.debug "Executing 'Refresh'"
	log.trace parent.poll()
}
def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
