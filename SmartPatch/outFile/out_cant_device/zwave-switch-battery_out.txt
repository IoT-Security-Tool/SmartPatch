 import java.util.UUID
"License"
"AS IS"
metadata {
	definition (name: "Z-Wave Switch Battery", namespace: "smartthings", author: "SmartThings", ocfDeviceType: "oic.d.switch", runLocally: true, minHubCoreVersion: '000.017.0012', executeCommandsLocally: true) {
		capability "Actuator"
		capability "Battery"
		capability "Health Check"
		capability "Refresh"
		capability "Sensor"
		capability "Switch"
		
		
		fingerprint mfr:"014A", prod:"0006", model:"0002", deviceJoinName: "Ecolink Z-Wave Plus Toggle Light Switch"
		
		fingerprint mfr:"014A", prod:"0006", model:"0003", deviceJoinName: "Ecolink Z-Wave Plus Smart Switch - Dual Rocker"
		
		fingerprint mfr:"014A", prod:"0006", model:"0004", deviceJoinName: "Ecolink Z-Wave Plus Smart Switch - Dual Toggle"
		
		fingerprint mfr:"014A", prod:"0006", model:"0005", deviceJoinName: "Ecolink Z-Wave Plus Smart Switch - Single Rocker"
		
		fingerprint mfr:"014A", prod:"0006", model:"0006", deviceJoinName: "Ecolink Z-Wave Plus Smart Switch - Single Toggle"
	}
	
	tiles(scale: 2) {
		multiAttributeTile(name:"switch", type: "lighting", width: 6, height: 4, canChangeIcon: true) {
			tileAttribute ("device.switch", key: "PRIMARY_CONTROL") {
				attributeState "on", label: '${name}', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#00A0DC"
				attributeState "off", label: '${name}', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
			}
		}

		standardTile("refresh", "device.switch", width: 2, height: 2, inactiveLabel: false, decoration: "flat") {
			state "default", label:'', action:"refresh.refresh", icon:"st.secondary.refresh"
		}
		
		valueTile("battery", "device.battery", width: 2, height: 2, inactiveLabel: false, decoration: "flat") {
			state "battery", label: '${currentValue}% battery', unit: ""
		}

		main "switch"
		details(["switch","refresh","battery"])
	}
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

	initialize()
}

def initialize() {
//	sendEvent(name: "checkInterval", value: 2 * 60 * 60 + 2 * 60, displayed: false, data: [protocol: "zwave", hubHardwareId: device.hub.hardwareID, offlinePingable: "1"])
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 2 * 60 * 60 + 2 * 60,  displayed: false,  data: [protocol: "zwave",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"]]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "checkInterval",  value: 2 * 60 * 60 + 2 * 60,  displayed: false,  data: [ sign: "${signatureResult1}" ,protocol: "zwave",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"])
	response(refresh())
}

def updated() {
	initialize()
}

def parse(String description) {
	def result
	def cmd = zwave.parse(description)
	if (cmd) {
//		result = createEvent(zwaveEvent(cmd))
def params2 = null
def signatureResult2 = null
params2 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${zwaveEvent(cmd)?.name}", value: "${zwaveEvent(cmd)?.value}"]
]
signatureResult2 = null
  try {
        httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue2= ''
if(zwaveEvent(cmd).containsKey('data') ){
datavalue2 = zwaveEvent(cmd)['data']
datavalue2 = "[" + datavalue2+ "," +"sign: " + "${signatureResult2}" + "]"
zwaveEvent(cmd).put('data',"${datavalue2}")
 }else{
datavalue2=  "[sign: " + "${signatureResult2}" +"]"
zwaveEvent(cmd).put('data',"${datavalue2}")
}
		result = createEvent(zwaveEvent(cmd))
	}
	
	result
}

def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd) {
	[name: "switch", value: cmd.value ? "on" : "off"]
}

def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicSet cmd) {
	[name: "switch", value: cmd.value ? "on" : "off"]
}

def zwaveEvent(physicalgraph.zwave.commands.switchbinaryv1.SwitchBinaryReport cmd) {
	[name: "switch", value: cmd.value ? "on" : "off"]
}

def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {
	def map = [name: "battery", unit: "%"]
	if (cmd.batteryLevel == 0xFF) {
		map.value = 1
		map.descriptionText = "$device.displayName has a low battery"
	} else {
		map.value = cmd.batteryLevel
	}
	map
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
	
	[:]
}

def on() {
	delayBetween([
		zwave.basicV1.basicSet(value: 0xFF).format(),
		zwave.switchBinaryV1.switchBinaryGet().format()
	], 500)
}

def off() {
	delayBetween([
		zwave.basicV1.basicSet(value: 0x00).format(),
		zwave.switchBinaryV1.switchBinaryGet().format()
	], 500)
}

def ping() {
	refresh()
}

def refresh() {
	delayBetween([
		zwave.switchBinaryV1.switchBinaryGet().format(),
		zwave.batteryV1.batteryGet().format()
	])
}
def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
