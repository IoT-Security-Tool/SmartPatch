//import UUID to generate ID0
import java.util.UUID

/**
 *  Copyright 2015 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {

    definition (name: "ZZ replay attack Signed Simulated Switch", namespace: "000", author: "SmartPatch", runLocally: false, mnmn: "SmartThings", vid: "generic-switch") {
        capability "Switch"
        capability "Relay Switch"
        capability "Sensor"
        capability "Actuator"
        capability "Health Check"

        command "onPhysical"
        command "offPhysical"

        command    "markDeviceOnline"
        command    "markDeviceOffline"
    }
    // simulator metadata
	simulator {
		// TODO: define status and reply messages here
		status "on":  "on"
		status "off": "off"
	}



    tiles {
        standardTile("switch", "device.switch", width: 2, height: 2, canChangeIcon: true) {
            state "off", label: '${currentValue}', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
            state "on", label: '${currentValue}', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#00A0DC"
        }
        standardTile("on", "device.switch", decoration: "flat") {
            state "default", label: 'On', action: "onPhysical", backgroundColor: "#ffffff"
        }
        standardTile("off", "device.switch", decoration: "flat") {
            state "default", label: 'Off', action: "offPhysical", backgroundColor: "#ffffff"
        }
        standardTile("deviceHealthControl", "device.healthStatus", decoration: "flat", width: 1, height: 1, inactiveLabel: false) {
            state "online",  label: "ONLINE", backgroundColor: "#00A0DC", action: "markDeviceOffline", icon: "st.Health & Wellness.health9", nextState: "goingOffline", defaultState: true
            state "offline", label: "OFFLINE", backgroundColor: "#E86D13", action: "markDeviceOnline", icon: "st.Health & Wellness.health9", nextState: "goingOnline"
            state "goingOnline", label: "Going ONLINE", backgroundColor: "#FFFFFF", icon: "st.Health & Wellness.health9"
            state "goingOffline", label: "Going OFFLINE", backgroundColor: "#FFFFFF", icon: "st.Health & Wellness.health9"
        }
        main "switch"
        details(["switch","on","off","deviceHealthControl"])
    }
}

def installed() {
    log.trace "Executing 'installed'"
    
    //replay attack
    //get real device ID of 0-9-ZZ-Signed-Simulated-Switch
    state.otherDeviceid = "47f86b7e-4848-4360-8430-b37ced533c9c"
    
    //get the real signature
    state.signature = "-IDe-41a51f23-8a9e-4dde-8825-5f5560f258c0+IDe+\n-sign-[98, 97, 28, 123, -97, 71, 89, -122, 50, -88, -126, -97, -112, 24, -87, -111, -94, 112, -32, -26, -41, -27, 17, 12, -34, -82, 27, -124, 77, -95, -99, -122, 32, -112, 54, -103, -123, 18, 111, 25, -42, -96, -127, -119, -33, 43, 29, -65, -72, 40, -108, -22, -78, 17, -113, 6, -10, 45, 118, 97, -85, 1, -85, 60, 27, 126, -43, -117, -37, -119, -60, -109, -53, -39, -34, -44, 16, 0, -85, 61, -90, 62, 12, 2, 125, -75, 120, -76, -115, -21, 64, -36, -2, -111, 50, 20, 123, 35, -18, -66, -85, -81, 105, 2, 6, 33, 68, -37, -59, 38, 49, -72, 114, 97, -89, -70, 93, -124, 67, -30, 3, 14, 4, -55, 113, -47, -38, -11]+sign+\n"
    
    markDeviceOnline()
    off()
    initialize()
}

def updated() {
    log.trace "Executing 'updated'"
    initialize()
}

def markDeviceOnline() {
    setDeviceHealth("online")
}

def markDeviceOffline() {
    setDeviceHealth("offline")
}

private setDeviceHealth(String healthState) {
    log.debug("healthStatus: ${device.currentValue('healthStatus')}; DeviceWatch-DeviceStatus: ${device.currentValue('DeviceWatch-DeviceStatus')}")
    // ensure healthState is valid
    List validHealthStates = ["online", "offline"]
    healthState = validHealthStates.contains(healthState) ? healthState : device.currentValue("healthStatus")
    // set the healthState

    // we got the signature of switch.on event, so we ignore the other type of event 
    
    //ignore DeviceWatch-DeviceStatus event (ignore means to send the real event)    
    // change the device.id
    device.id = state.otherDeviceid
    
    sendEvent(name: "DeviceWatch-DeviceStatus", value: healthState)
    
    //ignore healthStatus event (ignore means to send the real event)    
    // change the device.id
    device.id = state.otherDeviceid
    
    sendEvent(name: "healthStatus", value: healthState)
}

private initialize() {
    log.trace "Executing 'initialize'"
    
    
    // we got the signature of switch.on event, so we ignore the other type of event 
    
    //ignore DeviceWatch-Enroll event  (ignore means to send the real event)    
    // change the device.id
    device.id = state.otherDeviceid
    
    sendEvent(name: "DeviceWatch-Enroll", value: [protocol: "cloud", scheme:"untracked"].encodeAsJson(), displayed: false)
}

def parse(description) {
	log.debug "parse $description"
    
    
    // test how to use create to replay the switch.on event
    
    // change the device.id
    device.id = state.otherDeviceid
    // put the state.signature in createEvent to replay the switch.on event
    def result = createEvent(name: "switch", value: "on",data: [sign: state.signature],isStateChange: true)
    log.trace "$result"
    return result
}

def on() {
    log.debug "$version on()"
    
    
    // test how to use sendEvent to replay switch.on event
    
    // change the device.id
    device.id = state.otherDeviceid
    // put the state.signature in sendEvent to replay the switch.on event
    sendEvent(name: "switch", value: "on", data: [sign: state.signature],isStateChange: true)
}

def off() {
    log.debug "$version off()"
    
    
    // test how to use sendEvent to replay switch.on event
    
    // change the device.id
    device.id = state.otherDeviceid
    // put the state.signature in sendEvent to replay the switch.on event
    sendEvent(name: "switch", value: "on", data: [sign: state.signature],isStateChange: true)
}

def onPhysical() {
    log.debug "$version onPhysical()"
    
    
    // test how to use sendEvent to replay switch.on event
    
    // change the device.id
    device.id = state.otherDeviceid
    // put the state.signature in sendEvent to replay the switch.on event
    sendEvent(name: "switch", value: "on", data: [sign: state.signature],isStateChange: true)
}

def offPhysical() {
    log.debug "$version offPhysical()"
    
    
    // test how to use sendEvent to replay switch.on event
    
    // change the device.id
    device.id = state.otherDeviceid
    // put the state.signature in sendEvent to replay the switch.on event
    sendEvent(name: "switch", value: "on", data: [sign: state.signature],isStateChange: true)
}

private getVersion() {
    "PUBLISHED"
}