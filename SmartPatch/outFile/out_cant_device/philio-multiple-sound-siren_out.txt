 import java.util.UUID
"License"
"AS IS"

import physicalgraph.zwave.commands.*

metadata {
 definition (name: "Philio Multiple Sound Siren", namespace: "smartthings", author: "SmartThings", ocfDeviceType: "x.com.st.d.siren") {
	capability "Actuator"
	capability "Alarm"
	capability "Switch"
	capability "Health Check"
	capability "Chime"
	capability "Tamper Alert"

	command "test"

	fingerprint mfr: "013C", prod: "0004", model: "000A", deviceJoinName: "Philio Multiple Sound Siren PSE02"
 }

 simulator {
	
	reply "9881002001FF,9881002002": "command: 9881, payload: 002003FF"
	reply "988100200100,9881002002": "command: 9881, payload: 00200300"
	reply "9881002001FF,delay 3000,988100200100,9881002002": "command: 9881, payload: 00200300"
 }

 tiles(scale: 2) {
	multiAttributeTile(name:"alarm", type: "generic", width: 6, height: 4){
		tileAttribute ("device.alarm", key: "PRIMARY_CONTROL") {
			attributeState "off", label:'off', action:'alarm.both', icon:"st.alarm.alarm.alarm", backgroundColor:"#ffffff"
			attributeState "both", label:'alarm!', action:'alarm.off', icon:"st.alarm.alarm.alarm", backgroundColor:"#e86d13"
			attributeState "siren", label:'alarm!', action:'alarm.off', icon:"st.alarm.alarm.alarm", backgroundColor:"#e86d13"
		}
	}
	standardTile("test", "device.alarm", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
		state "default", label:'', action:"test", icon:"st.secondary.test"
	}
	standardTile("off", "device.alarm", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
		state "default", label:'', action:"alarm.off", icon:"st.secondary.off"
	}
	standardTile("chime", "device.chime", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
		state "default", label:'chime', action:"chime.chime", icon:"st.illuminance.illuminance.dark"
	}
	valueTile("tamper", "device.tamper", inactiveLabel: false, width: 2, height: 2, decoration: "flat") {
		state "detected", label:'tampered', backgroundColor: "#ff0000"
		state "clear", label:'tamper clear', backgroundColor: "#ffffff"
	}

	preferences {
		
		input "sound", "enum", title: "What sound should play for an alarm event?", description: "Default is 'Emergency'", options: ["Smoke", "Emergency", "Police", "Fire", "Ambulance"]
		input "duration", "enum", title: "How long should the sound play?", description: "Default is 'Forever'", options: ["Forever", "30 seconds", "1 minute", "2 minutes", "3 minutes", "5 minutes", "10 minutes", "20 minutes", "30 minutes", "45 minutes", "1 hour"]
	}

	main "alarm"
	details(["alarm", "test", "off", "chime", "tamper"])
 }
}

def getSoundMap() {[
	Smoke: [
			notificationType: 0x01,
			event: 0x01
		],
	
	
	Chime: [
			notificationType: 0x06,
			event: 0x16
		],
	Emergency: [
			notificationType: 0x07,
			event: 0x01
		],
	Police: [
			notificationType: 0x0A,
			event: 0x01
		],
	Fire: [
			notificationType: 0x0A,
			event: 0x02
		],
	Ambulance: [
			notificationType: 0x0A,
			event: 0x03
		]
]}


def getDurationMap() {[
	"Forever": 0,
	"30 seconds": 1,
	"1 minute": 2,
	"2 minutes": 4,
	"3 minutes": 6,
	"5 minutes": 10,
	"10 minutes": 20,
	"20 minutes": 40,
	"30 minutes": 60,
	"45 minutes": 90,
	"1 hour": 120
]}

def getDefaultSound() { "Emergency" }
def getDefaultDuration() { "Forever" }

def setupHealthCheck() {
	
//	sendEvent(name: "checkInterval", value: 2 * 15 * 60 + 2 * 60, displayed: false, data: [protocol: "zwave", hubHardwareId: device.hub.hardwareID, offlinePingable: "1"])
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 2 * 15 * 60 + 2 * 60,  displayed: false,  data: [protocol: "zwave",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"]]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "checkInterval",  value: 2 * 15 * 60 + 2 * 60,  displayed: false,  data: [ sign: "${signatureResult1}" ,protocol: "zwave",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"])
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

	setupHealthCheck()

	state.sound = defaultSound
	state.duration = defaultDuration

	
	response([
			secure(zwave.basicV1.basicGet()),
			secure(zwave.configurationV1.configurationSet(parameterNumber: 31, size: 1, configurationValue: [durationMap[state.duration]]))
		])
}

def updated() {
	def commands = []

	setupHealthCheck()

	log.debug "settings: ${settings.inspect()}, state: ${state.inspect()}"

	def sound = settings.sound ?: state.sound
	def duration = settings.duration ?: state.duration

	if (sound != state.sound || duration != state.duration) {
		state.sound = sound
		state.duration = duration
		commands << secure(zwave.configurationV1.configurationSet(parameterNumber: 31, size: 1, configurationValue: [durationMap[duration]]))
	}

	response(commands)
}


private getCommandClassVersions() {
	[
		0x20: 1,  
		0x70: 1,  
		0x85: 2,  
		0x98: 1,  
	]
}


def parse(String description) {
	log.debug "parse($description)"
	def result = null

	if (description.startsWith("Err")) {
		if (zwInfo?.zw?.contains("s")) {
//			result = createEvent(descriptionText:description, displayed:false)
def params2 = null
def signatureResult2 = null
params2 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText:description,  displayed:false]
]
signatureResult2 = null
  try {
        httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			result = createEvent(descriptionText:description,  displayed:false, data: [sign: "${signatureResult2}"])
		} else {
//			result = createEvent(
//					descriptionText: "This device failed to complete the network security key exchange. If you are unable to control it via SmartThings, you must remove it from your network and add it again.",
//					eventType: "ALERT",
//					name: "secureInclusion",
//					value: "failed",
//					displayed: true,
//			)
def params3 = null
def signatureResult3 = null
params3 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "This device failed to complete the network security key exchange. If you are unable to control it via SmartThings,  you must remove it from your network and add it again.", 					eventType: "ALERT", 					name: "secureInclusion", 					value: "failed", 					displayed: true,]
]
signatureResult3 = null
  try {
        httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			result = createEvent(descriptionText: "This device failed to complete the network security key exchange. If you are unable to control it via SmartThings,  you must remove it from your network and add it again.", 					eventType: "ALERT", 					name: "secureInclusion", 					value: "failed", 					displayed: true,, data: [sign: "${signatureResult3}"])
		}
	} else {
		def cmd = zwave.parse(description, commandClassVersions)
		if (cmd) {
			result = zwaveEvent(cmd)
		}
	}
	log.debug "Parse returned ${result?.inspect()}"
	return result
}

def zwaveEvent(securityv1.SecurityMessageEncapsulation cmd) {
	def encapsulatedCommand = cmd.encapsulatedCommand(commandClassVersions)
	
	if (encapsulatedCommand) {
		zwaveEvent(encapsulatedCommand)
	}
}

def zwaveEvent(basicv1.BasicReport cmd) {
	log.debug "rx $cmd"
	handleDeviceEvent(cmd.value)
}

def zwaveEvent(sensorbinaryv2.SensorBinaryReport cmd) {
	log.debug "rx $cmd"
	def result = []

	if (cmd.sensorType == sensorbinaryv2.SensorBinaryReport.SENSOR_TYPE_TAMPER) {
//		result << createEvent(name: "tamper", value: "detected")
def params4 = null
def signatureResult4 = null
params4 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "tamper",  value: "detected"]
]
signatureResult4 = null
  try {
        httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result << createEvent(name: "tamper",  value: "detected", data: [sign: "${signatureResult4}"])
	} else {
		result = handleDeviceEvent(cmd.sensorValue)
	}
	result
}

def zwaveEvent(notificationv3.NotificationReport cmd) {
	def result = []

	log.debug "rx $cmd"

	if (cmd.notificationType == notificationv3.NotificationReport.NOTIFICATION_TYPE_BURGLAR) {
		if (cmd.event == 3) {
//			result << createEvent(name: "tamper", value: "detected")
def params5 = null
def signatureResult5 = null
params5 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "tamper",  value: "detected"]
]
signatureResult5 = null
  try {
        httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			result << createEvent(name: "tamper",  value: "detected", data: [sign: "${signatureResult5}"])
		}
	} else {
		log.warn "Unknown cmd.notificationType: ${cmd.notificationType}"
//		result << createEvent(descriptionText: cmd.toString(), isStateChange: false)
def params6 = null
def signatureResult6 = null
params6 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: cmd.toString(),  isStateChange: false]
]
signatureResult6 = null
  try {
        httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result << createEvent(descriptionText: cmd.toString(),  isStateChange: false, data: [sign: "${signatureResult6}"])
	}
	result
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
	log.debug "Unhandled Z-Wave command $cmd"
//	createEvent(displayed: false, descriptionText: "$device.displayName: $cmd")
def params7 = null
def signatureResult7 = null
params7 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",displayed: false,  descriptionText: "$device.displayName: $cmd"]
]
signatureResult7 = null
  try {
        httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(displayed: false,  descriptionText: "$device.displayName: $cmd", data: [sign: "${signatureResult7}"])
}

def handleDeviceEvent(value) {
	log.debug "handleDeviceEvent $value"
	def result = [
//		createEvent([name: "switch", value: value == 0xFF ? "on" : "off", displayed: false]),
def params8 = null
def signatureResult8 = null
params8 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",[name: "switch",  value: value == 0xFF ? "on" : "off",  displayed: false]]
]
signatureResult8 = null
  try {
        httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		createEvent([name: "switch",  value: value == 0xFF ? "on" : "off",  displayed: false], data: [sign: "${signatureResult8}"]),
//		createEvent([name: "alarm", value: value == 0xFF ? "both" : "off"])
def params9 = null
def signatureResult9 = null
params9 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",[name: "alarm",  value: value == 0xFF ? "both" : "off"]]
]
signatureResult9 = null
  try {
        httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		createEvent([name: "alarm",  value: value == 0xFF ? "both" : "off"], data: [sign: "${signatureResult9}"])
	]

	
	
	if (value == 0) {
//		result << createEvent([name: "chime", value: "off"])
def params10 = null
def signatureResult10 = null
params10 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",[name: "chime",  value: "off"]]
]
signatureResult10 = null
  try {
        httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result << createEvent([name: "chime",  value: "off"], data: [sign: "${signatureResult10}"])
//		result << createEvent([name: "tamper", value: "clear"])
def params11 = null
def signatureResult11 = null
params11 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",[name: "tamper",  value: "clear"]]
]
signatureResult11 = null
  try {
        httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result << createEvent([name: "tamper",  value: "clear"], data: [sign: "${signatureResult11}"])
	}

	result
}

def generateCommand(command) {
	def sound = (command && soundMap.containsKey(command)) ? soundMap[command] : soundMap[defaultSound]
	log.debug "Sending $command"

	secure(zwave.notificationV3.notificationReport(notificationType: sound.notificationType, event: sound.event))
}

def chimeOff() {
	log.debug "chimeOff()"
//	sendEvent(name: "chime", value: "off")
def params12 = null
def signatureResult12 = null
log.debug "id is ${device.id}"
 params12 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "chime",  value: "off"]
	]
signatureResult12 = null
try {
    httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "chime",  value: "off", data: [sign: "${signatureResult12}"])

	
	
	def currentAlarm = device.currentValue("alarm")
	if (currentAlarm && currentAlarm != "off") {
		log.debug "resetting alarm..."

		sendHubCommand(on())
	}
}

def chime() {
	def results = []
	log.debug "chime!"

	
	
//	sendEvent(name: "chime", value: "chime")
def params13 = null
def signatureResult13 = null
log.debug "id is ${device.id}"
 params13 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "chime",  value: "chime"]
	]
signatureResult13 = null
try {
    httpGet(params13) { resp ->
        signatureResult13 = resp.data
        log.debug "response data: ${signatureResult13}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "chime",  value: "chime", data: [sign: "${signatureResult13}"])
	runIn(1, "chimeOff", [overwrite: true])

	generateCommand("Chime")
}

def on() {
	log.debug "sending on"
	generateCommand(state.sound)
}

def off() {
	log.debug "sending off"

	secure(zwave.basicV1.basicSet(value: 0x00))
}

def strobe() {
	on()
}

def siren() {
	on()
}

def both() {
	on()
}

def test() {
	[
		on(),
		"delay 3000",
		off()
	]
}

private secure(physicalgraph.zwave.Command cmd) {
	def zwInfo = zwaveInfo
	
	if (!zwInfo || (zwInfo?.zw?.contains("s") && zwInfo.sec?.contains(String.format("%02X", cmd.commandClassId)))) {
		log.debug "securely sending $cmd"
		zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
	} else {
		log.debug "insecurely sending $cmd"
		cmd.format()
	}
}


def ping() {
	secure(zwave.basicV1.basicGet())
}
def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
