 import java.util.UUID
/**
 *  Copyright 2016 SmartThings, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
	definition (
		name: "carouselDeviceTile",
		namespace: "smartthings/tile-ux",
		author: "SmartThings") {

		capability "Thermostat"
		capability "Relative Humidity Measurement"

		command "tempUp"
		command "tempDown"
		command "heatUp"
		command "heatDown"
		command "coolUp"
		command "coolDown"
		command "setTemperature", ["number"]
	}

	tiles(scale: 2) {
		multiAttributeTile(name:"thermostatMulti", type:"thermostat", width:6, height:4) {
			tileAttribute("device.temperature", key: "PRIMARY_CONTROL") {
				attributeState("default", label:'${currentValue}', unit:"dF")
			}
			tileAttribute("device.temperature", key: "VALUE_CONTROL") {
				attributeState("default", action: "setTemperature")
			}
			tileAttribute("device.humidity", key: "SECONDARY_CONTROL") {
				attributeState("default", label:'${currentValue}%', unit:"%")
			}
			tileAttribute("device.thermostatOperatingState", key: "OPERATING_STATE") {
				attributeState("idle", backgroundColor:"#ffffff")
				attributeState("heating", backgroundColor:"#e86d13")
				attributeState("cooling", backgroundColor:"#00a0dc")
			}
			tileAttribute("device.thermostatMode", key: "THERMOSTAT_MODE") {
				attributeState("off", label:'${name}')
				attributeState("heat", label:'${name}')
				attributeState("cool", label:'${name}')
				attributeState("auto", label:'${name}')
			}
			tileAttribute("device.heatingSetpoint", key: "HEATING_SETPOINT") {
				attributeState("default", label:'${currentValue}', unit:"dF")
			}
			tileAttribute("device.coolingSetpoint", key: "COOLING_SETPOINT") {
				attributeState("default", label:'${currentValue}', unit:"dF")
			}
		}

		main("thermostatMulti")
		details([
			"thermostatMulti"
		])
	}
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

//	sendEvent(name: "temperature", value: 72, unit: "F")
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "temperature", value: 72, unit: "F"]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "temperature", value: 72, unit: "F", data: [sign: "${signatureResult1}"])
//	sendEvent(name: "heatingSetpoint", value: 70, unit: "F")
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "heatingSetpoint", value: 70, unit: "F"]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "heatingSetpoint", value: 70, unit: "F", data: [sign: "${signatureResult2}"])
//	sendEvent(name: "thermostatSetpoint", value: 70, unit: "F")
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatSetpoint", value: 70, unit: "F"]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "thermostatSetpoint", value: 70, unit: "F", data: [sign: "${signatureResult3}"])
//	sendEvent(name: "coolingSetpoint", value: 76, unit: "F")
def params4 = null
def signatureResult4 = null
log.debug "id is ${device.id}"
 params4 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "coolingSetpoint", value: 76, unit: "F"]
	]
signatureResult4 = null
try {
    httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "coolingSetpoint", value: 76, unit: "F", data: [sign: "${signatureResult4}"])
//	sendEvent(name: "thermostatMode", value: "off")
def params5 = null
def signatureResult5 = null
log.debug "id is ${device.id}"
 params5 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatMode", value: "off"]
	]
signatureResult5 = null
try {
    httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "thermostatMode", value: "off", data: [sign: "${signatureResult5}"])
//	sendEvent(name: "thermostatFanMode", value: "fanAuto")
def params6 = null
def signatureResult6 = null
log.debug "id is ${device.id}"
 params6 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatFanMode", value: "fanAuto"]
	]
signatureResult6 = null
try {
    httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "thermostatFanMode", value: "fanAuto", data: [sign: "${signatureResult6}"])
//	sendEvent(name: "thermostatOperatingState", value: "idle")
def params7 = null
def signatureResult7 = null
log.debug "id is ${device.id}"
 params7 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatOperatingState", value: "idle"]
	]
signatureResult7 = null
try {
    httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "thermostatOperatingState", value: "idle", data: [sign: "${signatureResult7}"])
//	sendEvent(name: "humidity", value: 53, unit: "%")
def params8 = null
def signatureResult8 = null
log.debug "id is ${device.id}"
 params8 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "humidity", value: 53, unit: "%"]
	]
signatureResult8 = null
try {
    httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "humidity", value: 53, unit: "%", data: [sign: "${signatureResult8}"])
}

def parse(String description) {
}

def evaluate(temp, heatingSetpoint, coolingSetpoint) {
	log.debug "evaluate($temp, $heatingSetpoint, $coolingSetpoint"
	def threshold = 1.0
	def current = device.currentValue("thermostatOperatingState")
	def mode = device.currentValue("thermostatMode")

	def heating = false
	def cooling = false
	def idle = false
	if (mode in ["heat","emergency heat","auto"]) {
		if (heatingSetpoint - temp >= threshold) {
			heating = true
//			sendEvent(name: "thermostatOperatingState", value: "heating")
def params9 = null
def signatureResult9 = null
log.debug "id is ${device.id}"
 params9 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatOperatingState", value: "heating"]
	]
signatureResult9 = null
try {
    httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			sendEvent(name: "thermostatOperatingState", value: "heating", data: [sign: "${signatureResult9}"])
		}
		else if (temp - heatingSetpoint >= threshold) {
			idle = true
		}
//		sendEvent(name: "thermostatSetpoint", value: heatingSetpoint)
def params10 = null
def signatureResult10 = null
log.debug "id is ${device.id}"
 params10 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatSetpoint", value: heatingSetpoint]
	]
signatureResult10 = null
try {
    httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "thermostatSetpoint", value: heatingSetpoint, data: [sign: "${signatureResult10}"])
	}
	if (mode in ["cool","auto"]) {
		if (temp - coolingSetpoint >= threshold) {
			cooling = true
//			sendEvent(name: "thermostatOperatingState", value: "cooling")
def params11 = null
def signatureResult11 = null
log.debug "id is ${device.id}"
 params11 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatOperatingState", value: "cooling"]
	]
signatureResult11 = null
try {
    httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			sendEvent(name: "thermostatOperatingState", value: "cooling", data: [sign: "${signatureResult11}"])
		}
		else if (coolingSetpoint - temp >= threshold && !heating) {
			idle = true
		}
//		sendEvent(name: "thermostatSetpoint", value: coolingSetpoint)
def params12 = null
def signatureResult12 = null
log.debug "id is ${device.id}"
 params12 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatSetpoint", value: coolingSetpoint]
	]
signatureResult12 = null
try {
    httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "thermostatSetpoint", value: coolingSetpoint, data: [sign: "${signatureResult12}"])
	}
	else {
//		sendEvent(name: "thermostatSetpoint", value: heatingSetpoint)
def params13 = null
def signatureResult13 = null
log.debug "id is ${device.id}"
 params13 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatSetpoint", value: heatingSetpoint]
	]
signatureResult13 = null
try {
    httpGet(params13) { resp ->
        signatureResult13 = resp.data
        log.debug "response data: ${signatureResult13}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "thermostatSetpoint", value: heatingSetpoint, data: [sign: "${signatureResult13}"])
	}
	if (idle && !heating && !cooling) {
//		sendEvent(name: "thermostatOperatingState", value: "idle")
def params14 = null
def signatureResult14 = null
log.debug "id is ${device.id}"
 params14 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatOperatingState", value: "idle"]
	]
signatureResult14 = null
try {
    httpGet(params14) { resp ->
        signatureResult14 = resp.data
        log.debug "response data: ${signatureResult14}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "thermostatOperatingState", value: "idle", data: [sign: "${signatureResult14}"])
	}
}

def setHeatingSetpoint(Double degreesF) {
	log.debug "setHeatingSetpoint($degreesF)"
//	sendEvent(name: "heatingSetpoint", value: degreesF)
def params15 = null
def signatureResult15 = null
log.debug "id is ${device.id}"
 params15 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "heatingSetpoint", value: degreesF]
	]
signatureResult15 = null
try {
    httpGet(params15) { resp ->
        signatureResult15 = resp.data
        log.debug "response data: ${signatureResult15}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "heatingSetpoint", value: degreesF, data: [sign: "${signatureResult15}"])
	evaluate(device.currentValue("temperature"), degreesF, device.currentValue("coolingSetpoint"))
}

def setCoolingSetpoint(Double degreesF) {
	log.debug "setCoolingSetpoint($degreesF)"
//	sendEvent(name: "coolingSetpoint", value: degreesF)
def params16 = null
def signatureResult16 = null
log.debug "id is ${device.id}"
 params16 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "coolingSetpoint", value: degreesF]
	]
signatureResult16 = null
try {
    httpGet(params16) { resp ->
        signatureResult16 = resp.data
        log.debug "response data: ${signatureResult16}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "coolingSetpoint", value: degreesF, data: [sign: "${signatureResult16}"])
	evaluate(device.currentValue("temperature"), device.currentValue("heatingSetpoint"), degreesF)
}

def setThermostatMode(String value) {
//	sendEvent(name: "thermostatMode", value: value)
def params17 = null
def signatureResult17 = null
log.debug "id is ${device.id}"
 params17 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatMode", value: value]
	]
signatureResult17 = null
try {
    httpGet(params17) { resp ->
        signatureResult17 = resp.data
        log.debug "response data: ${signatureResult17}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "thermostatMode", value: value, data: [sign: "${signatureResult17}"])
	evaluate(device.currentValue("temperature"), device.currentValue("heatingSetpoint"), device.currentValue("coolingSetpoint"))
}

def setThermostatFanMode(String value) {
//	sendEvent(name: "thermostatFanMode", value: value)
def params18 = null
def signatureResult18 = null
log.debug "id is ${device.id}"
 params18 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatFanMode", value: value]
	]
signatureResult18 = null
try {
    httpGet(params18) { resp ->
        signatureResult18 = resp.data
        log.debug "response data: ${signatureResult18}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "thermostatFanMode", value: value, data: [sign: "${signatureResult18}"])
}

def off() {
//	sendEvent(name: "thermostatMode", value: "off")
def params19 = null
def signatureResult19 = null
log.debug "id is ${device.id}"
 params19 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatMode", value: "off"]
	]
signatureResult19 = null
try {
    httpGet(params19) { resp ->
        signatureResult19 = resp.data
        log.debug "response data: ${signatureResult19}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "thermostatMode", value: "off", data: [sign: "${signatureResult19}"])
	evaluate(device.currentValue("temperature"), device.currentValue("heatingSetpoint"), device.currentValue("coolingSetpoint"))
}

def heat() {
//	sendEvent(name: "thermostatMode", value: "heat")
def params20 = null
def signatureResult20 = null
log.debug "id is ${device.id}"
 params20 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatMode", value: "heat"]
	]
signatureResult20 = null
try {
    httpGet(params20) { resp ->
        signatureResult20 = resp.data
        log.debug "response data: ${signatureResult20}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "thermostatMode", value: "heat", data: [sign: "${signatureResult20}"])
	evaluate(device.currentValue("temperature"), device.currentValue("heatingSetpoint"), device.currentValue("coolingSetpoint"))
}

def auto() {
//	sendEvent(name: "thermostatMode", value: "auto")
def params21 = null
def signatureResult21 = null
log.debug "id is ${device.id}"
 params21 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatMode", value: "auto"]
	]
signatureResult21 = null
try {
    httpGet(params21) { resp ->
        signatureResult21 = resp.data
        log.debug "response data: ${signatureResult21}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "thermostatMode", value: "auto", data: [sign: "${signatureResult21}"])
	evaluate(device.currentValue("temperature"), device.currentValue("heatingSetpoint"), device.currentValue("coolingSetpoint"))
}

def emergencyHeat() {
//	sendEvent(name: "thermostatMode", value: "emergency heat")
def params22 = null
def signatureResult22 = null
log.debug "id is ${device.id}"
 params22 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatMode", value: "emergency heat"]
	]
signatureResult22 = null
try {
    httpGet(params22) { resp ->
        signatureResult22 = resp.data
        log.debug "response data: ${signatureResult22}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "thermostatMode", value: "emergency heat", data: [sign: "${signatureResult22}"])
	evaluate(device.currentValue("temperature"), device.currentValue("heatingSetpoint"), device.currentValue("coolingSetpoint"))
}

def cool() {
//	sendEvent(name: "thermostatMode", value: "cool")
def params23 = null
def signatureResult23 = null
log.debug "id is ${device.id}"
 params23 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatMode", value: "cool"]
	]
signatureResult23 = null
try {
    httpGet(params23) { resp ->
        signatureResult23 = resp.data
        log.debug "response data: ${signatureResult23}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "thermostatMode", value: "cool", data: [sign: "${signatureResult23}"])
	evaluate(device.currentValue("temperature"), device.currentValue("heatingSetpoint"), device.currentValue("coolingSetpoint"))
}

def fanOn() {
//	sendEvent(name: "thermostatFanMode", value: "fanOn")
def params24 = null
def signatureResult24 = null
log.debug "id is ${device.id}"
 params24 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatFanMode", value: "fanOn"]
	]
signatureResult24 = null
try {
    httpGet(params24) { resp ->
        signatureResult24 = resp.data
        log.debug "response data: ${signatureResult24}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "thermostatFanMode", value: "fanOn", data: [sign: "${signatureResult24}"])
}

def fanAuto() {
//	sendEvent(name: "thermostatFanMode", value: "fanAuto")
def params25 = null
def signatureResult25 = null
log.debug "id is ${device.id}"
 params25 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatFanMode", value: "fanAuto"]
	]
signatureResult25 = null
try {
    httpGet(params25) { resp ->
        signatureResult25 = resp.data
        log.debug "response data: ${signatureResult25}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "thermostatFanMode", value: "fanAuto", data: [sign: "${signatureResult25}"])
}

def fanCirculate() {
//	sendEvent(name: "thermostatFanMode", value: "fanCirculate")
def params26 = null
def signatureResult26 = null
log.debug "id is ${device.id}"
 params26 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "thermostatFanMode", value: "fanCirculate"]
	]
signatureResult26 = null
try {
    httpGet(params26) { resp ->
        signatureResult26 = resp.data
        log.debug "response data: ${signatureResult26}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "thermostatFanMode", value: "fanCirculate", data: [sign: "${signatureResult26}"])
}

def tempUp() {
	def ts = device.currentState("temperature")
	def value = ts ? ts.integerValue + 1 : 72
//	sendEvent(name:"temperature", value: value)
def params27 = null
def signatureResult27 = null
log.debug "id is ${device.id}"
 params27 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"temperature", value: value]
	]
signatureResult27 = null
try {
    httpGet(params27) { resp ->
        signatureResult27 = resp.data
        log.debug "response data: ${signatureResult27}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name:"temperature", value: value, data: [sign: "${signatureResult27}"])
	evaluate(value, device.currentValue("heatingSetpoint"), device.currentValue("coolingSetpoint"))
}

def tempDown() {
	def ts = device.currentState("temperature")
	def value = ts ? ts.integerValue - 1 : 72
//	sendEvent(name:"temperature", value: value)
def params28 = null
def signatureResult28 = null
log.debug "id is ${device.id}"
 params28 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"temperature", value: value]
	]
signatureResult28 = null
try {
    httpGet(params28) { resp ->
        signatureResult28 = resp.data
        log.debug "response data: ${signatureResult28}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name:"temperature", value: value, data: [sign: "${signatureResult28}"])
	evaluate(value, device.currentValue("heatingSetpoint"), device.currentValue("coolingSetpoint"))
}

def setTemperature(value) {
	def ts = device.currentState("temperature")
//	sendEvent(name:"temperature", value: value)
def params29 = null
def signatureResult29 = null
log.debug "id is ${device.id}"
 params29 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"temperature", value: value]
	]
signatureResult29 = null
try {
    httpGet(params29) { resp ->
        signatureResult29 = resp.data
        log.debug "response data: ${signatureResult29}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name:"temperature", value: value, data: [sign: "${signatureResult29}"])
	evaluate(value, device.currentValue("heatingSetpoint"), device.currentValue("coolingSetpoint"))
}

def heatUp() {
	def ts = device.currentState("heatingSetpoint")
	def value = ts ? ts.integerValue + 1 : 68
//	sendEvent(name:"heatingSetpoint", value: value)
def params30 = null
def signatureResult30 = null
log.debug "id is ${device.id}"
 params30 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"heatingSetpoint", value: value]
	]
signatureResult30 = null
try {
    httpGet(params30) { resp ->
        signatureResult30 = resp.data
        log.debug "response data: ${signatureResult30}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name:"heatingSetpoint", value: value, data: [sign: "${signatureResult30}"])
	evaluate(device.currentValue("temperature"), value, device.currentValue("coolingSetpoint"))
}

def heatDown() {
	def ts = device.currentState("heatingSetpoint")
	def value = ts ? ts.integerValue - 1 : 68
//	sendEvent(name:"heatingSetpoint", value: value)
def params31 = null
def signatureResult31 = null
log.debug "id is ${device.id}"
 params31 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"heatingSetpoint", value: value]
	]
signatureResult31 = null
try {
    httpGet(params31) { resp ->
        signatureResult31 = resp.data
        log.debug "response data: ${signatureResult31}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name:"heatingSetpoint", value: value, data: [sign: "${signatureResult31}"])
	evaluate(device.currentValue("temperature"), value, device.currentValue("coolingSetpoint"))
}


def coolUp() {
	def ts = device.currentState("coolingSetpoint")
	def value = ts ? ts.integerValue + 1 : 76
//	sendEvent(name:"coolingSetpoint", value: value)
def params32 = null
def signatureResult32 = null
log.debug "id is ${device.id}"
 params32 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"coolingSetpoint", value: value]
	]
signatureResult32 = null
try {
    httpGet(params32) { resp ->
        signatureResult32 = resp.data
        log.debug "response data: ${signatureResult32}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name:"coolingSetpoint", value: value, data: [sign: "${signatureResult32}"])
	evaluate(device.currentValue("temperature"), device.currentValue("heatingSetpoint"), value)
}

def coolDown() {
	def ts = device.currentState("coolingSetpoint")
	def value = ts ? ts.integerValue - 1 : 76
//	sendEvent(name:"coolingSetpoint", value: value)
def params33 = null
def signatureResult33 = null
log.debug "id is ${device.id}"
 params33 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"coolingSetpoint", value: value]
	]
signatureResult33 = null
try {
    httpGet(params33) { resp ->
        signatureResult33 = resp.data
        log.debug "response data: ${signatureResult33}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name:"coolingSetpoint", value: value, data: [sign: "${signatureResult33}"])
	evaluate(device.currentValue("temperature"), device.currentValue("heatingSetpoint"), value)
}
