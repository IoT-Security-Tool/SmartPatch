 import java.util.UUID
"License"
"AS IS"
import physicalgraph.zigbee.zcl.DataType

metadata {
	definition (name: "ZigBee Battery Accessory Dimmer", namespace: "smartthings", author: "SmartThings", ocfDeviceType: "oic.d.switch") {
		capability "Actuator"
		capability "Battery"
		capability "Configuration"
		capability "Health Check"
		capability "Switch"
		capability "Switch Level"

		
		fingerprint profileId: "0104", inClusters: "0000,0001,0003,0020,FC11", outClusters: "0003,0004,0006,0008,FC10", manufacturer: "sengled", model: "E1E-G7F", deviceJoinName: "Sengled Smart Switch", mnmn:"SmartThings", vid: "generic-dimmer"
		fingerprint manufacturer: "IKEA of Sweden", model: "TRADFRI wireless dimmer", deviceJoinName: "IKEA TRÃ…DFRI Wireless dimmer" 
		fingerprint profileId: "0104", inClusters: "0000,0001,0003,0020,0B05", outClusters: "0003,0006,0008,0019", manufacturer: "Centralite Systems", model: "3131-G", deviceJoinName: "Centralite Smart Switch"
	}

	tiles(scale: 2) {
		multiAttributeTile(name:"switch", type: "lighting", width: 6, height: 4, canChangeIcon: true){
			tileAttribute ("device.switch", key: "PRIMARY_CONTROL") {
				attributeState "on", label:'${name}', action:"switch.off", icon:"st.switches.light.on", backgroundColor:"#00A0DC", nextState:"turningOff"
				attributeState "off", label:'${name}', action:"switch.on", icon:"st.switches.light.off", backgroundColor:"#ffffff", nextState:"turningOn"
				attributeState "turningOn", label:'${name}', action:"switch.off", icon:"st.switches.light.on", backgroundColor:"#00A0DC", nextState:"turningOff"
				attributeState "turningOff", label:'${name}', action:"switch.on", icon:"st.switches.light.off", backgroundColor:"#ffffff", nextState:"turningOn"
			}
			tileAttribute ("device.level", key: "SLIDER_CONTROL") {
				attributeState "level", action:"switch level.setLevel"
			}
			tileAttribute ("device.battery", key: "SECONDARY_CONTROL") {
				attributeState "battery", label: 'battery ${currentValue}%', unit: "%"
			}
		}
		main "switch"
		details(["switch"])
	}
}

def getDOUBLE_STEP() { 10 }
def getSTEP() { 5 }

def getONOFF_ON_COMMAND() { 0x0001 }
def getONOFF_OFF_COMMAND() { 0x0000 }
def getLEVEL_MOVE_LEVEL_COMMAND() { 0x0000 }
def getLEVEL_MOVE_COMMAND() { 0x0001 }
def getLEVEL_STEP_COMMAND() { 0x0002 }
def getLEVEL_STOP_COMMAND() { 0x0003 }
def getLEVEL_MOVE_LEVEL_ONOFF_COMMAND() { 0x0004 }
def getLEVEL_MOVE_ONOFF_COMMAND() { 0x0005 }
def getLEVEL_STEP_ONOFF_COMMAND() { 0x0006 }
def getLEVEL_STOP_ONOFF_COMMAND() { 0x0007 }
def getLEVEL_DIRECTION_UP() { "00" }
def getLEVEL_DIRECTION_DOWN() { "01" }

def getBATTERY_VOLTAGE_ATTR() { 0x0020 }
def getBATTERY_PERCENT_ATTR() { 0x0021 }

def getMFR_SPECIFIC_CLUSTER() { 0xFC10 }

def getUINT8_STR() { "20" }


private boolean isIkeaDimmer() {
	device.getDataValue("model") == "TRADFRI wireless dimmer"
}
private boolean isSengledSwitch() {
	device.getDataValue("model") == "E1E-G7F"
}
private boolean isCentraliteSwitch() {
	device.getDataValue("model") == "3131-G"
}

def parse(String description) {
	log.debug "description is $description"
	def results = []

	def event = zigbee.getEvent(description)
	if (event) {
//		results << createEvent(event)
def params1 = null
def signatureResult1 = null
params1 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${event?.name}", value: "${event?.value}"]
]
signatureResult1 = null
  try {
        httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue1= ''
if(event.containsKey('data') ){
datavalue1 = event['data']
datavalue1 = "[" + datavalue1+ "," +"sign: " + "${signatureResult1}" + "]"
event.put('data',"${datavalue1}")
 }else{
datavalue1=  "[sign: " + "${signatureResult1}" +"]"
event.put('data',"${datavalue1}")
}
		results << createEvent(event)
	} else {
		def descMap = zigbee.parseDescriptionAsMap(description)

		if (descMap.clusterInt == zigbee.POWER_CONFIGURATION_CLUSTER) {
			results = handleBatteryEvents(descMap)
		} else if (isSengledSwitch()) {
			results = handleSengledSwitchEvents(descMap)
		} else if (descMap.clusterInt == zigbee.ONOFF_CLUSTER) {
			results = handleSwitchEvent(descMap)
		} else if (descMap.clusterInt == zigbee.LEVEL_CONTROL_CLUSTER) {
			if (isCentraliteSwitch()) {
				results = handleCentraliteSmartSwitchLevelEvent(descMap)
			} else if (isIkeaDimmer()) {
				results = handleIkeaDimmerLevelEvent(descMap)
			}
		} else {
			log.warn "DID NOT PARSE MESSAGE for description : $description"
			log.debug "${descMap}"
		}
	}

	log.debug "parse returned $results"
	return results
}

def handleSengledSwitchEvents(descMap) {
	def results = []

	if (descMap?.clusterInt == MFR_SPECIFIC_CLUSTER && descMap.data) {
		def currentLevel = device.currentValue("level") as Integer ?: 0
		def value = currentLevel

		switch (descMap.data[0]) {
			case '01':
				
//				results << createEvent(name: "switch", value: "on")
def params2 = null
def signatureResult2 = null
params2 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "on"]
]
signatureResult2 = null
  try {
        httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
				results << createEvent(name: "switch",  value: "on", data: [sign: "${signatureResult2}"])
				break
			case '02':
				
				if (descMap.data[2] == '02') {
					
					value = Math.min(currentLevel + DOUBLE_STEP, 100)
				} else if (descMap.data[2] == '01') {
					
					value = Math.min(currentLevel + STEP, 100)
				} else {
					log.info "Invalid value ${descMap.data[2]} received for descMap.data[2]"
				}

//				results << createEvent(name: "switch", value: "on")
def params3 = null
def signatureResult3 = null
params3 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "on"]
]
signatureResult3 = null
  try {
        httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
				results << createEvent(name: "switch",  value: "on", data: [sign: "${signatureResult3}"])
//				results << createEvent(name: "level", value: value)
def params4 = null
def signatureResult4 = null
params4 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: value]
]
signatureResult4 = null
  try {
        httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
				results << createEvent(name: "level",  value: value, data: [sign: "${signatureResult4}"])
				break
			case '03':
				
				if (descMap.data[2] == '02') {
					
					value = Math.max(currentLevel - DOUBLE_STEP, 0)
				} else if (descMap.data[2] == '01') {
					
					value = Math.max(currentLevel - STEP, 0)
				} else {
					log.info "Invalid value ${descMap.data[2]} received for descMap.data[2]"
				}

				if (value == 0) {
//					results << createEvent(name: "switch", value: "off")
def params5 = null
def signatureResult5 = null
params5 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "off"]
]
signatureResult5 = null
  try {
        httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
					results << createEvent(name: "switch",  value: "off", data: [sign: "${signatureResult5}"])
				} else {
//					results << createEvent(name: "level", value: value)
def params6 = null
def signatureResult6 = null
params6 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: value]
]
signatureResult6 = null
  try {
        httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
					results << createEvent(name: "level",  value: value, data: [sign: "${signatureResult6}"])
				}
				break
			case '04':
				
//				results << createEvent(name: "switch", value: "off")
def params7 = null
def signatureResult7 = null
params7 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "off"]
]
signatureResult7 = null
  try {
        httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
				results << createEvent(name: "switch",  value: "off", data: [sign: "${signatureResult7}"])
				break
			case '06':
				
//				results << createEvent(name: "switch", value: "on")
def params8 = null
def signatureResult8 = null
params8 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "on"]
]
signatureResult8 = null
  try {
        httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
				results << createEvent(name: "switch",  value: "on", data: [sign: "${signatureResult8}"])
				break
			case '08':
				
//				results << createEvent(name: "switch", value: "off")
def params9 = null
def signatureResult9 = null
params9 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "off"]
]
signatureResult9 = null
  try {
        httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
				results << createEvent(name: "switch",  value: "off", data: [sign: "${signatureResult9}"])
				break
			default:
				break
		}
	}

	return results
}

def handleCentraliteSmartSwitchLevelEvent(descMap) {
	def results = []

	if (descMap.commandInt == LEVEL_MOVE_ONOFF_COMMAND) {
		
		results = handleStepEvent(LEVEL_DIRECTION_UP, descMap)
	} else if (descMap.commandInt == LEVEL_MOVE_COMMAND) {
		
		results = handleStepEvent(LEVEL_DIRECTION_DOWN, descMap)
	}

	return results
}

def handleIkeaDimmerLevelEvent(descMap) {
	def results = []

	if (descMap.commandInt == LEVEL_STEP_COMMAND) {
		results = handleStepEvent(descMap.data[0], descMap)
	} else if (descMap.commandInt == LEVEL_MOVE_COMMAND || descMap.commandInt == LEVEL_MOVE_ONOFF_COMMAND) {
		
		results = handleStepEvent(descMap.data[0], descMap)
	} else if (descMap.commandInt == LEVEL_STOP_COMMAND || descMap.commandInt == LEVEL_STOP_ONOFF_COMMAND) {
		
		log.debug "Received stop move - not handling"
	} else if (descMap.commandInt == LEVEL_MOVE_LEVEL_ONOFF_COMMAND) {
		
		
		if (descMap.data[0] == "00") {
//			results << createEvent(name: "switch", value: "off", isStateChange: true)
def params10 = null
def signatureResult10 = null
params10 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "off",  isStateChange: true]
]
signatureResult10 = null
  try {
        httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			results << createEvent(name: "switch",  value: "off",  isStateChange: true, data: [sign: "${signatureResult10}"])
		} else if (descMap.data[0] == "FF") {
			
			if (device.currentValue("level") == 0) {
//				results << createEvent(name: "level", value: DOUBLE_STEP)
def params11 = null
def signatureResult11 = null
params11 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: DOUBLE_STEP]
]
signatureResult11 = null
  try {
        httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
				results << createEvent(name: "level",  value: DOUBLE_STEP, data: [sign: "${signatureResult11}"])
			}

//			results << createEvent(name: "switch", value: "on", isStateChange: true)
def params12 = null
def signatureResult12 = null
params12 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "on",  isStateChange: true]
]
signatureResult12 = null
  try {
        httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			results << createEvent(name: "switch",  value: "on",  isStateChange: true, data: [sign: "${signatureResult12}"])
		} else {
//			results << createEvent(name: "switch", value: "on", isStateChange: true)
def params13 = null
def signatureResult13 = null
params13 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "on",  isStateChange: true]
]
signatureResult13 = null
  try {
        httpGet(params13) { resp ->
        signatureResult13 = resp.data
        log.debug "response data: ${signatureResult13}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			results << createEvent(name: "switch",  value: "on",  isStateChange: true, data: [sign: "${signatureResult13}"])
			
			
//			results << createEvent(zigbee.getEventFromAttrData(descMap.clusterInt, descMap.commandInt, UINT8_STR, descMap.data[0]))
def params14 = null
def signatureResult14 = null
params14 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${zigbee.getEventFromAttrData(descMap.clusterInt,  descMap.commandInt,  UINT8_STR,  descMap.data[0])?.name}", value: "${zigbee.getEventFromAttrData(descMap.clusterInt,  descMap.commandInt,  UINT8_STR,  descMap.data[0])?.value}"]
]
signatureResult14 = null
  try {
        httpGet(params14) { resp ->
        signatureResult14 = resp.data
        log.debug "response data: ${signatureResult14}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue14= ''
if(zigbee.getEventFromAttrData(descMap.clusterInt,  descMap.commandInt,  UINT8_STR,  descMap.data[0]).containsKey('data') ){
datavalue14 = zigbee.getEventFromAttrData(descMap.clusterInt,  descMap.commandInt,  UINT8_STR,  descMap.data[0])['data']
datavalue14 = "[" + datavalue14+ "," +"sign: " + "${signatureResult14}" + "]"
zigbee.getEventFromAttrData(descMap.clusterInt,  descMap.commandInt,  UINT8_STR,  descMap.data[0]).put('data',"${datavalue14}")
 }else{
datavalue14=  "[sign: " + "${signatureResult14}" +"]"
zigbee.getEventFromAttrData(descMap.clusterInt,  descMap.commandInt,  UINT8_STR,  descMap.data[0]).put('data',"${datavalue14}")
}
			results << createEvent(zigbee.getEventFromAttrData(descMap.clusterInt,  descMap.commandInt,  UINT8_STR,  descMap.data[0]))
		}
	}

	return results
}

def handleSwitchEvent(descMap) {
	def results = []

	if (descMap.commandInt == ONOFF_ON_COMMAND) {
		if (device.currentValue("level") == 0) {
//			results << createEvent(name: "level", value: DOUBLE_STEP)
def params15 = null
def signatureResult15 = null
params15 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: DOUBLE_STEP]
]
signatureResult15 = null
  try {
        httpGet(params15) { resp ->
        signatureResult15 = resp.data
        log.debug "response data: ${signatureResult15}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			results << createEvent(name: "level",  value: DOUBLE_STEP, data: [sign: "${signatureResult15}"])
		}
//		results << createEvent(name: "switch", value: "on")
def params16 = null
def signatureResult16 = null
params16 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "on"]
]
signatureResult16 = null
  try {
        httpGet(params16) { resp ->
        signatureResult16 = resp.data
        log.debug "response data: ${signatureResult16}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		results << createEvent(name: "switch",  value: "on", data: [sign: "${signatureResult16}"])
	} else if (descMap.commandInt == ONOFF_OFF_COMMAND) {
//		results << createEvent(name: "switch", value: "off")
def params17 = null
def signatureResult17 = null
params17 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "off"]
]
signatureResult17 = null
  try {
        httpGet(params17) { resp ->
        signatureResult17 = resp.data
        log.debug "response data: ${signatureResult17}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		results << createEvent(name: "switch",  value: "off", data: [sign: "${signatureResult17}"])
	}

	return results
}

def handleStepEvent(direction, descMap) {
	def results = []
	def currentLevel = device.currentValue("level") as Integer ?: 0
	def value = null

	if (direction == LEVEL_DIRECTION_UP) {
		value = Math.min(currentLevel + DOUBLE_STEP, 100)
	} else if (direction == LEVEL_DIRECTION_DOWN) {
		value = Math.max(currentLevel - DOUBLE_STEP, 0)
	}

	if (value != null) {
		log.debug "Step ${direction == LEVEL_DIRECTION_UP ? "up" : "down"} by $DOUBLE_STEP to $value"

		
		if (value == 0) {
//			results << createEvent(name: "switch", value: "off")
def params18 = null
def signatureResult18 = null
params18 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "off"]
]
signatureResult18 = null
  try {
        httpGet(params18) { resp ->
        signatureResult18 = resp.data
        log.debug "response data: ${signatureResult18}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			results << createEvent(name: "switch",  value: "off", data: [sign: "${signatureResult18}"])
		} else {
//			results << createEvent(name: "switch", value: "on")
def params19 = null
def signatureResult19 = null
params19 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "on"]
]
signatureResult19 = null
  try {
        httpGet(params19) { resp ->
        signatureResult19 = resp.data
        log.debug "response data: ${signatureResult19}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			results << createEvent(name: "switch",  value: "on", data: [sign: "${signatureResult19}"])
//			results << createEvent(name: "level", value: value)
def params20 = null
def signatureResult20 = null
params20 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: value]
]
signatureResult20 = null
  try {
        httpGet(params20) { resp ->
        signatureResult20 = resp.data
        log.debug "response data: ${signatureResult20}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			results << createEvent(name: "level",  value: value, data: [sign: "${signatureResult20}"])
		}
	} else {
		log.debug "Received invalid direction ${direction} - descMap.data = ${descMap.data}"
	}

	return results
}

def handleBatteryEvents(descMap) {
	def results = []

	if (descMap.value) {
		def rawValue = zigbee.convertHexToInt(descMap.value)
		def batteryValue = null

		if (rawValue == 0xFF) {
			
			
			log.info "Invalid battery reading returned"
		} else if (descMap.attrInt == BATTERY_VOLTAGE_ATTR && !isIkeaDimmer()) { 
			def minVolts = 2.3
			def maxVolts = 3.0
			def batteryValueVoltage = rawValue / 10

			batteryValue = Math.round(((batteryValueVoltage - minVolts) / (maxVolts - minVolts)) * 100)
		} else if (descMap.attrInt == BATTERY_PERCENT_ATTR) {
			
			batteryValue = Math.round(rawValue / (isIkeaDimmer() ? 1 : 2))
		}

		if (batteryValue != null) {
			batteryValue = Math.min(100, Math.max(0, batteryValue))

//			results << createEvent(name: "battery", value: batteryValue, unit: "%", descriptionText: "{{ device.displayName }} battery was {{ value }}%", translatable: true)
def params21 = null
def signatureResult21 = null
params21 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "battery",  value: batteryValue,  unit: "%",  descriptionText: "{{ device.displayName }} battery was {{ value }}%",  translatable: true]
]
signatureResult21 = null
  try {
        httpGet(params21) { resp ->
        signatureResult21 = resp.data
        log.debug "response data: ${signatureResult21}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			results << createEvent(name: "battery",  value: batteryValue,  unit: "%",  descriptionText: "{{ device.displayName }} battery was {{ value }}%",  translatable: true, data: [sign: "${signatureResult21}"])
		}
	}

	return results
}

def off() {
//	sendEvent(name: "switch", value: "off", isStateChange: true)
def params22 = null
def signatureResult22 = null
log.debug "id is ${device.id}"
 params22 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "off",  isStateChange: true]
	]
signatureResult22 = null
try {
    httpGet(params22) { resp ->
        signatureResult22 = resp.data
        log.debug "response data: ${signatureResult22}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "switch",  value: "off",  isStateChange: true, data: [sign: "${signatureResult22}"])
}

def on() {
//	sendEvent(name: "switch", value: "on", isStateChange: true)
def params23 = null
def signatureResult23 = null
log.debug "id is ${device.id}"
 params23 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "on",  isStateChange: true]
	]
signatureResult23 = null
try {
    httpGet(params23) { resp ->
        signatureResult23 = resp.data
        log.debug "response data: ${signatureResult23}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "switch",  value: "on",  isStateChange: true, data: [sign: "${signatureResult23}"])
}

def setLevel(value, rate = null) {
	if (value == 0) {
//		sendEvent(name: "switch", value: "off")
def params24 = null
def signatureResult24 = null
log.debug "id is ${device.id}"
 params24 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "off"]
	]
signatureResult24 = null
try {
    httpGet(params24) { resp ->
        signatureResult24 = resp.data
        log.debug "response data: ${signatureResult24}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "switch",  value: "off", data: [sign: "${signatureResult24}"])
		
		value = device.currentValue("level")
	} else {
//		sendEvent(name: "switch", value: "on")
def params25 = null
def signatureResult25 = null
log.debug "id is ${device.id}"
 params25 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "on"]
	]
signatureResult25 = null
try {
    httpGet(params25) { resp ->
        signatureResult25 = resp.data
        log.debug "response data: ${signatureResult25}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "switch",  value: "on", data: [sign: "${signatureResult25}"])
	}
//	runIn(1, delayedSend, [data: createEvent(name: "level", value: value), overwrite: true])
def params26 = null
def signatureResult26 = null
params26 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: value),  overwrite: true]]
]
signatureResult26 = null
  try {
        httpGet(params26) { resp ->
        signatureResult26 = resp.data
        log.debug "response data: ${signatureResult26}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	runIn(1, delayedSend, [data: createEvent(name: "level",  value: value),  overwrite: true], data: [sign: "${signatureResult26}"]), overwrite: true])
}

def delayedSend(data) {
//	sendEvent(data)
def params27 = null
def signatureResult27 = null
log.debug "id is ${device.id}"
 params27 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${data?.name}", value: "${data?.value}"]
	]
signatureResult27 = null
try {
    httpGet(params27) { resp ->
        signatureResult27 = resp.data
        log.debug "response data: ${signatureResult27}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue27= ''
if(data.containsKey('data') ){
datavalue27 = data['data']
datavalue27 = "[" + datavalue27+ "," +"sign: " + "${signatureResult27}" + "]"
data.put('data',"${datavalue27}")
 }else{
datavalue27=  "[sign: " + "${signatureResult27}" +"]"
data.put('data',"${datavalue27}")
}
	sendEvent(data)
}

def ping() {
	if (isCentraliteSwitch()) {
		zigbee.readAttribute(zigbee.POWER_CONFIGURATION_CLUSTER, BATTERY_VOLTAGE_ATTR)
	} else {
		zigbee.readAttribute(zigbee.POWER_CONFIGURATION_CLUSTER, BATTERY_PERCENT_ATTR)
	}
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

//	sendEvent(name: "switch", value: "on")
def params28 = null
def signatureResult28 = null
log.debug "id is ${device.id}"
 params28 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "on"]
	]
signatureResult28 = null
try {
    httpGet(params28) { resp ->
        signatureResult28 = resp.data
        log.debug "response data: ${signatureResult28}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "switch",  value: "on", data: [sign: "${signatureResult28}"])
//	sendEvent(name: "level", value: 100)
def params29 = null
def signatureResult29 = null
log.debug "id is ${device.id}"
 params29 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: 100]
	]
signatureResult29 = null
try {
    httpGet(params29) { resp ->
        signatureResult29 = resp.data
        log.debug "response data: ${signatureResult29}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "level",  value: 100, data: [sign: "${signatureResult29}"])
}

def configure() {
	def offlinePingable = isIkeaDimmer() ? "0" : "1" 
	int reportInterval = 3 * 60 * 60

	
//	sendEvent(name: "checkInterval", value: 2 * 60 + 2 * reportInterval, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID, offlinePingable: offlinePingable], displayed: false)
def params30 = null
def signatureResult30 = null
log.debug "id is ${device.id}"
 params30 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 2 * 60 + 2 * reportInterval,  data: [protocol: "zigbee",  hubHardwareId: device.hub.hardwareID,  offlinePingable: offlinePingable],  displayed: false]
	]
signatureResult30 = null
try {
    httpGet(params30) { resp ->
        signatureResult30 = resp.data
        log.debug "response data: ${signatureResult30}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "checkInterval",  value: 2 * 60 + 2 * reportInterval,  data: [ sign: "${signatureResult30}" ,protocol: "zigbee",  hubHardwareId: device.hub.hardwareID,  offlinePingable: offlinePingable],  displayed: false)

	if (isCentraliteSwitch()) {
		zigbee.addBinding(zigbee.ONOFF_CLUSTER) + zigbee.addBinding(zigbee.LEVEL_CONTROL_CLUSTER) +
			zigbee.readAttribute(zigbee.POWER_CONFIGURATION_CLUSTER, BATTERY_VOLTAGE_ATTR) +
			zigbee.batteryConfig(0, reportInterval, null)
	} else {
		zigbee.readAttribute(zigbee.POWER_CONFIGURATION_CLUSTER, BATTERY_PERCENT_ATTR) +
			
			zigbee.configureReporting(zigbee.POWER_CONFIGURATION_CLUSTER, BATTERY_PERCENT_ATTR, DataType.UINT8, 30, reportInterval, 20)
	}
}

