 import java.util.UUID
"License"
"AS IS"

import groovy.json.JsonOutput
import physicalgraph.zigbee.zcl.DataType

metadata {
    definition(name: "Rooms Beautiful Curtain", namespace: "Rooms Beautiful", author: "Alex Feng", ocfDeviceType: "oic.d.blind", mnmn: "SmartThings", vid: "generic-shade-2") {
        capability "Actuator"
        capability "Battery"
        capability "Configuration"
        capability "Refresh"
        capability "Health Check"
        capability "Window Shade"
        capability "Switch"
        capability "Switch Level"

        attribute("replay", "enum")
        attribute("battLife", "enum")

        command "cont"

        fingerprint profileId: "0104", inClusters: "0000, 0001, 0003, 0006, FC00, DC00, 0102", deviceJoinName: "Rooms Beautiful Window Treatment", manufacturer: "Rooms Beautiful", model: "C001" 
    }

    preferences {
        input name: "invert", type: "bool", title: "Invert Direction", description: "Invert Curtain Direction", defaultValue: false, displayDuringSetup: false, required: true
    }

    tiles(scale: 2) {
        multiAttributeTile(name: "windowShade", type: "generic", width: 6, height: 4) {
            tileAttribute("device.windowShade", key: "PRIMARY_CONTROL") {
                attributeState "open", label: 'Open', action: "close", icon: "http://www.ezex.co.kr/img/st/window_open.png", backgroundColor: "#00A0DC", nextState: "closing"
                attributeState "closed", label: 'Closed', action: "open", icon: "http://www.ezex.co.kr/img/st/window_close.png", backgroundColor: "#ffffff", nextState: "opening"
                attributeState "partially open", label: 'Partially open', action: "close", icon: "http://www.ezex.co.kr/img/st/window_open.png", backgroundColor: "#d45614", nextState: "closing"
                attributeState "opening", label: 'Opening', action: "close", icon: "http://www.ezex.co.kr/img/st/window_open.png", backgroundColor: "#00A0DC", nextState: "closing"
                attributeState "closing", label: 'Closing', action: "open", icon: "http://www.ezex.co.kr/img/st/window_close.png", backgroundColor: "#ffffff", nextState: "opening"
            }
            tileAttribute("device.battLife", key: "SECONDARY_CONTROL") {
                attributeState "full", icon: "https://raw.githubusercontent.com/gearsmotion789/ST-Images/master/full.png", label: ""
                attributeState "medium", icon: "https://raw.githubusercontent.com/gearsmotion789/ST-Images/master/medium.png", label: ""
                attributeState "low", icon: "https://raw.githubusercontent.com/gearsmotion789/ST-Images/master/low.png", label: ""
                attributeState "dead", icon: "https://raw.githubusercontent.com/gearsmotion789/ST-Images/master/dead.png", label: ""
            }
            tileAttribute("device.level", key: "SLIDER_CONTROL") {
                attributeState "level", action: "switch level.setLevel"
            }
        }
        standardTile("contPause", "device.replay", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
            state "pause", label: "Pause", icon: 'https:
            state "cont", label: "Cont.", icon: 'https:
        }
        standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat", width: 2, height: 1) {
            state "default", label: "", action: "refresh.refresh", icon: "st.secondary.refresh"
        }

        main "windowShade"
        details(["windowShade", "contPause", "refresh"])
    }
}

private getCLUSTER_WINDOW_COVERING() {
    0x0102
}
private getCOMMAND_GOTO_LIFT_PERCENTAGE() {
    0x05
}
private getATTRIBUTE_POSITION_LIFT() {
    0x0008
}
private getBATTERY_VOLTAGE() {
    0x0020
}


def parse(String description) {
    

    def linkText = getLinkText(device)
    def event = zigbee.getEvent(description)
    def descMap = zigbee.parseDescriptionAsMap(description)
    def value
    def attrId

    if (event) {
        if (!descMap.attrId)
//            sendEvent(name: "replay", value: "pause")
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "replay",  value: "pause"]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
            sendEvent(name: "replay",  value: "pause", data: [sign: "${signatureResult1}"])

        if (event.name == "switch" || event.name == "windowShade") {
            if (event.value == "on" || event.value == "open") {
                log.info "${linkText} - Open"
//                sendEvent(name: "switch", value: "on")
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "on"]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
                sendEvent(name: "switch",  value: "on", data: [sign: "${signatureResult2}"])
//                sendEvent(name: "windowShade", value: "open")
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade",  value: "open"]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
                sendEvent(name: "windowShade",  value: "open", data: [sign: "${signatureResult3}"])
            } else {
                log.info "${linkText} - Close"
//                sendEvent(name: "switch", value: "off")
def params4 = null
def signatureResult4 = null
log.debug "id is ${device.id}"
 params4 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "off"]
	]
signatureResult4 = null
try {
    httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
                sendEvent(name: "switch",  value: "off", data: [sign: "${signatureResult4}"])
//                sendEvent(name: "windowShade", value: "closed")
def params5 = null
def signatureResult5 = null
log.debug "id is ${device.id}"
 params5 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade",  value: "closed"]
	]
signatureResult5 = null
try {
    httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
                sendEvent(name: "windowShade",  value: "closed", data: [sign: "${signatureResult5}"])
            }
        }
    } else {
        if (descMap.attrId) {
            if (descMap.clusterInt != 0xDC00) {
                value = Integer.parseInt(descMap.value, 16)
                attrId = Integer.parseInt(descMap.attrId, 16)
            }
        }

        switch (descMap.clusterInt) {
            case zigbee.POWER_CONFIGURATION_CLUSTER:
                if (attrId == BATTERY_VOLTAGE)
                    handleBatteryEvent(value)
                break;
            case CLUSTER_WINDOW_COVERING:
                if (attrId == ATTRIBUTE_POSITION_LIFT) {
                    log.info "${linkText} - Level: ${value}"
//                    sendEvent(name: "level", value: value)
def params6 = null
def signatureResult6 = null
log.debug "id is ${device.id}"
 params6 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: value]
	]
signatureResult6 = null
try {
    httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
                    sendEvent(name: "level",  value: value, data: [sign: "${signatureResult6}"])

                    if (value == 0 || value == 100) {
//                        sendEvent(name: "switch", value: value == 0 ? "off" : "on")
def params7 = null
def signatureResult7 = null
log.debug "id is ${device.id}"
 params7 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: value == 0 ? "off" : "on"]
	]
signatureResult7 = null
try {
    httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
                        sendEvent(name: "switch",  value: value == 0 ? "off" : "on", data: [sign: "${signatureResult7}"])
//                        sendEvent(name: "windowShade", value: value == 0 ? "closed" : "open")
def params8 = null
def signatureResult8 = null
log.debug "id is ${device.id}"
 params8 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade",  value: value == 0 ? "closed" : "open"]
	]
signatureResult8 = null
try {
    httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
                        sendEvent(name: "windowShade",  value: value == 0 ? "closed" : "open", data: [sign: "${signatureResult8}"])
                    } else if (value > 0 && value < 100) {
//                        sendEvent(name: "replay", value: "cont")
def params9 = null
def signatureResult9 = null
log.debug "id is ${device.id}"
 params9 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "replay",  value: "cont"]
	]
signatureResult9 = null
try {
    httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
                        sendEvent(name: "replay",  value: "cont", data: [sign: "${signatureResult9}"])
//                        sendEvent(name: "windowShade", value: "partially open")
def params10 = null
def signatureResult10 = null
log.debug "id is ${device.id}"
 params10 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade",  value: "partially open"]
	]
signatureResult10 = null
try {
    httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
                        sendEvent(name: "windowShade",  value: "partially open", data: [sign: "${signatureResult10}"])
                    }
                }
                break;
            case 0xFC00:
                if (description?.startsWith('read attr -'))
                    log.info "${linkText} - Inverted: ${value}"
                else
                    log.debug "${linkText} - Inverted set to: ${invert}"
                break;
            case 0xDC00:
                value = descMap.value
                def shortAddr = value.substring(4)
                def lqi = zigbee.convertHexToInt(value.substring(2, 4))
                def rssi = (byte) zigbee.convertHexToInt(value.substring(0, 2))
                log.info "${linkText} - Parent Addr: ${shortAddr} **** LQI: ${lqi} **** RSSI: ${rssi}"
                break;
            default:
                log.warn "${linkText} - DID NOT PARSE MESSAGE for description: $description"
                log.debug descMap
                break;
        }
    }
}

def off() {
    zigbee.off() +
//        sendEvent(name: "level", value: 0)
def params11 = null
def signatureResult11 = null
log.debug "id is ${device.id}"
 params11 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: 0]
	]
signatureResult11 = null
try {
    httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "level",  value: 0, data: [sign: "${signatureResult11}"])
}

def on() {
    zigbee.on() +
//        sendEvent(name: "level", value: 100)
def params12 = null
def signatureResult12 = null
log.debug "id is ${device.id}"
 params12 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: 100]
	]
signatureResult12 = null
try {
    httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "level",  value: 100, data: [sign: "${signatureResult12}"])
}

def close() {
    zigbee.off() +
//        sendEvent(name: "level", value: 0)
def params13 = null
def signatureResult13 = null
log.debug "id is ${device.id}"
 params13 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: 0]
	]
signatureResult13 = null
try {
    httpGet(params13) { resp ->
        signatureResult13 = resp.data
        log.debug "response data: ${signatureResult13}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "level",  value: 0, data: [sign: "${signatureResult13}"])
}

def open() {
    zigbee.on() +
//        sendEvent(name: "level", value: 100)
def params14 = null
def signatureResult14 = null
log.debug "id is ${device.id}"
 params14 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: 100]
	]
signatureResult14 = null
try {
    httpGet(params14) { resp ->
        signatureResult14 = resp.data
        log.debug "response data: ${signatureResult14}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "level",  value: 100, data: [sign: "${signatureResult14}"])
}

def pause() {
    zigbee.command(CLUSTER_WINDOW_COVERING, 0x02) +
//        sendEvent(name: "replay", value: "cont") +
def params15 = null
def signatureResult15 = null
log.debug "id is ${device.id}"
 params15 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "replay",  value: "cont") ]
	]
signatureResult15 = null
try {
    httpGet(params15) { resp ->
        signatureResult15 = resp.data
        log.debug "response data: ${signatureResult15}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "replay",  value: "cont") , data: [sign: "${signatureResult15}"])
//        sendEvent(name: "windowShade", value: "partially open")
def params16 = null
def signatureResult16 = null
log.debug "id is ${device.id}"
 params16 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade",  value: "partially open"]
	]
signatureResult16 = null
try {
    httpGet(params16) { resp ->
        signatureResult16 = resp.data
        log.debug "response data: ${signatureResult16}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "windowShade",  value: "partially open", data: [sign: "${signatureResult16}"])
}

def cont() {
    zigbee.command(CLUSTER_WINDOW_COVERING, 0x02) +
//        sendEvent(name: "replay", value: "pause")
def params17 = null
def signatureResult17 = null
log.debug "id is ${device.id}"
 params17 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "replay",  value: "pause"]
	]
signatureResult17 = null
try {
    httpGet(params17) { resp ->
        signatureResult17 = resp.data
        log.debug "response data: ${signatureResult17}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "replay",  value: "pause", data: [sign: "${signatureResult17}"])
}

def setLevel(value) {
    def time
    if (state.updatedDate == null) {
        time = now()
    } else {
        time = now() - state.updatedDate
    }
    state.updatedDate = now()
    log.trace("Time: ${time}")

    if (time > 1000) {
        log.debug("Setting level to: ${value}")
        zigbee.command(CLUSTER_WINDOW_COVERING, COMMAND_GOTO_LIFT_PERCENTAGE, zigbee.convertToHexString(100 - value, 2)) +
//            sendEvent(name: "level", value: value)
def params18 = null
def signatureResult18 = null
log.debug "id is ${device.id}"
 params18 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: value]
	]
signatureResult18 = null
try {
    httpGet(params18) { resp ->
        signatureResult18 = resp.data
        log.debug "response data: ${signatureResult18}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
            sendEvent(name: "level",  value: value, data: [sign: "${signatureResult18}"])
    }
}

private handleBatteryEvent(volts) {
    def linkText = getLinkText(device)

    if (volts > 30 || volts < 20) {
        log.warn "${linkText} - Ignoring invalid value for voltage (${volts/10}V)"
    } else {
        def batteryMap = [30: "full", 29: "full", 28: "full", 27: "medium", 26: "low", 25: "dead"]

        def value = batteryMap[volts]
        if (value != null) {
            def minVolts = 25
            def maxVolts = 30
            def pct = (volts - minVolts) / (maxVolts - minVolts)
            def roundedPct = Math.round(pct * 100)
            def percent = Math.min(100, roundedPct)

            log.info "${linkText} - Batt: ${value} **** Volts: ${volts/10}v **** Percent: ${percent}%"
//            sendEvent(name: "battery", value: percent)
def params19 = null
def signatureResult19 = null
log.debug "id is ${device.id}"
 params19 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "battery",  value: percent]
	]
signatureResult19 = null
try {
    httpGet(params19) { resp ->
        signatureResult19 = resp.data
        log.debug "response data: ${signatureResult19}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
            sendEvent(name: "battery",  value: percent, data: [sign: "${signatureResult19}"])
//            sendEvent(name: "battLife", value: value)
def params20 = null
def signatureResult20 = null
log.debug "id is ${device.id}"
 params20 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "battLife",  value: value]
	]
signatureResult20 = null
try {
    httpGet(params20) { resp ->
        signatureResult20 = resp.data
        log.debug "response data: ${signatureResult20}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
            sendEvent(name: "battLife",  value: value, data: [sign: "${signatureResult20}"])
        }
    }
}

def refresh() {
    zigbee.onOffRefresh() +
        zigbee.readAttribute(CLUSTER_WINDOW_COVERING, ATTRIBUTE_POSITION_LIFT) + 
        zigbee.readAttribute(zigbee.POWER_CONFIGURATION_CLUSTER, BATTERY_VOLTAGE) + 

        
        zigbee.readAttribute(0xFC00, 0x0000) + 
        zigbee.readAttribute(0xDC00, 0x0000) 
}

def ping() {
    return refresh()
}

def configure() {
    
//    sendEvent(name: "checkInterval", value: 2 * 10 * 60 + 2 * 60, displayed: false, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID])
def params21 = null
def signatureResult21 = null
log.debug "id is ${device.id}"
 params21 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 2 * 10 * 60 + 2 * 60,  displayed: false,  data: [protocol: "zigbee",  hubHardwareId: device.hub.hardwareID]]
	]
signatureResult21 = null
try {
    httpGet(params21) { resp ->
        signatureResult21 = resp.data
        log.debug "response data: ${signatureResult21}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "checkInterval",  value: 2 * 10 * 60 + 2 * 60,  displayed: false,  data: [ sign: "${signatureResult21}" ,protocol: "zigbee",  hubHardwareId: device.hub.hardwareID])
    log.debug "Configuring Reporting and Bindings."
    return refresh()
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

//    sendEvent(name: "supportedWindowShadeCommands", value: JsonOutput.toJson(["open", "close", "pause"]), displayed: false)
def params22 = null
def signatureResult22 = null
log.debug "id is ${device.id}"
 params22 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "supportedWindowShadeCommands",  value: JsonOutput.toJson(["open",  "close",  "pause"]),  displayed: false]
	]
signatureResult22 = null
try {
    httpGet(params22) { resp ->
        signatureResult22 = resp.data
        log.debug "response data: ${signatureResult22}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "supportedWindowShadeCommands",  value: JsonOutput.toJson(["open",  "close",  "pause"]),  displayed: false, data: [sign: "${signatureResult22}"])
//    sendEvent(name: "battery", value: 100)
def params23 = null
def signatureResult23 = null
log.debug "id is ${device.id}"
 params23 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "battery",  value: 100]
	]
signatureResult23 = null
try {
    httpGet(params23) { resp ->
        signatureResult23 = resp.data
        log.debug "response data: ${signatureResult23}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "battery",  value: 100, data: [sign: "${signatureResult23}"])
//    sendEvent(name: "battLife", value: "full")
def params24 = null
def signatureResult24 = null
log.debug "id is ${device.id}"
 params24 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "battLife",  value: "full"]
	]
signatureResult24 = null
try {
    httpGet(params24) { resp ->
        signatureResult24 = resp.data
        log.debug "response data: ${signatureResult24}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "battLife",  value: "full", data: [sign: "${signatureResult24}"])
    response(refresh())
}

def updated() {
    if (invert.value == false)
        response(normal())
    else if (invert.value == true)
        response(reverse())
}

def normal() {
    if (device.currentState("windowShade").value == "open") {
//        sendEvent(name: "switch", value: "off")
def params25 = null
def signatureResult25 = null
log.debug "id is ${device.id}"
 params25 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "off"]
	]
signatureResult25 = null
try {
    httpGet(params25) { resp ->
        signatureResult25 = resp.data
        log.debug "response data: ${signatureResult25}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "switch",  value: "off", data: [sign: "${signatureResult25}"])
//        sendEvent(name: "windowShade", value: "closed")
def params26 = null
def signatureResult26 = null
log.debug "id is ${device.id}"
 params26 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade",  value: "closed"]
	]
signatureResult26 = null
try {
    httpGet(params26) { resp ->
        signatureResult26 = resp.data
        log.debug "response data: ${signatureResult26}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "windowShade",  value: "closed", data: [sign: "${signatureResult26}"])
//        sendEvent(name: "level", value: 100 - Integer.parseInt(device.currentState("level").value))
def params27 = null
def signatureResult27 = null
log.debug "id is ${device.id}"
 params27 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: 100 - Integer.parseInt(device.currentState("level").value)]
	]
signatureResult27 = null
try {
    httpGet(params27) { resp ->
        signatureResult27 = resp.data
        log.debug "response data: ${signatureResult27}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "level",  value: 100 - Integer.parseInt(device.currentState("level").value), data: [sign: "${signatureResult27}"])
        log.debug("normal-close")
        zigbee.writeAttribute(0xFC00, 0x0000, DataType.BOOLEAN, 0x00)
    } else {
//        sendEvent(name: "switch", value: "on")
def params28 = null
def signatureResult28 = null
log.debug "id is ${device.id}"
 params28 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "on"]
	]
signatureResult28 = null
try {
    httpGet(params28) { resp ->
        signatureResult28 = resp.data
        log.debug "response data: ${signatureResult28}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "switch",  value: "on", data: [sign: "${signatureResult28}"])
//        sendEvent(name: "windowShade", value: "open")
def params29 = null
def signatureResult29 = null
log.debug "id is ${device.id}"
 params29 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade",  value: "open"]
	]
signatureResult29 = null
try {
    httpGet(params29) { resp ->
        signatureResult29 = resp.data
        log.debug "response data: ${signatureResult29}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "windowShade",  value: "open", data: [sign: "${signatureResult29}"])
//        sendEvent(name: "level", value: 100 - Integer.parseInt(device.currentState("level").value))
def params30 = null
def signatureResult30 = null
log.debug "id is ${device.id}"
 params30 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: 100 - Integer.parseInt(device.currentState("level").value)]
	]
signatureResult30 = null
try {
    httpGet(params30) { resp ->
        signatureResult30 = resp.data
        log.debug "response data: ${signatureResult30}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "level",  value: 100 - Integer.parseInt(device.currentState("level").value), data: [sign: "${signatureResult30}"])
        log.debug("normal-open")
        zigbee.writeAttribute(0xFC00, 0x0000, DataType.BOOLEAN, 0x00)
    }
}

def reverse() {
    if (device.currentState("windowShade").value == "open") {
//        sendEvent(name: "switch", value: "off")
def params31 = null
def signatureResult31 = null
log.debug "id is ${device.id}"
 params31 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "off"]
	]
signatureResult31 = null
try {
    httpGet(params31) { resp ->
        signatureResult31 = resp.data
        log.debug "response data: ${signatureResult31}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "switch",  value: "off", data: [sign: "${signatureResult31}"])
//        sendEvent(name: "windowShade", value: "closed")
def params32 = null
def signatureResult32 = null
log.debug "id is ${device.id}"
 params32 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade",  value: "closed"]
	]
signatureResult32 = null
try {
    httpGet(params32) { resp ->
        signatureResult32 = resp.data
        log.debug "response data: ${signatureResult32}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "windowShade",  value: "closed", data: [sign: "${signatureResult32}"])
//        sendEvent(name: "level", value: 100 - Integer.parseInt(device.currentState("level").value))
def params33 = null
def signatureResult33 = null
log.debug "id is ${device.id}"
 params33 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: 100 - Integer.parseInt(device.currentState("level").value)]
	]
signatureResult33 = null
try {
    httpGet(params33) { resp ->
        signatureResult33 = resp.data
        log.debug "response data: ${signatureResult33}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "level",  value: 100 - Integer.parseInt(device.currentState("level").value), data: [sign: "${signatureResult33}"])
        log.debug("reverse-close")
        zigbee.writeAttribute(0xFC00, 0x0000, DataType.BOOLEAN, 0x01)
    } else {
//        sendEvent(name: "switch", value: "on")
def params34 = null
def signatureResult34 = null
log.debug "id is ${device.id}"
 params34 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "on"]
	]
signatureResult34 = null
try {
    httpGet(params34) { resp ->
        signatureResult34 = resp.data
        log.debug "response data: ${signatureResult34}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "switch",  value: "on", data: [sign: "${signatureResult34}"])
//        sendEvent(name: "windowShade", value: "open")
def params35 = null
def signatureResult35 = null
log.debug "id is ${device.id}"
 params35 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "windowShade",  value: "open"]
	]
signatureResult35 = null
try {
    httpGet(params35) { resp ->
        signatureResult35 = resp.data
        log.debug "response data: ${signatureResult35}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "windowShade",  value: "open", data: [sign: "${signatureResult35}"])
//        sendEvent(name: "level", value: 100 - Integer.parseInt(device.currentState("level").value))
def params36 = null
def signatureResult36 = null
log.debug "id is ${device.id}"
 params36 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: 100 - Integer.parseInt(device.currentState("level").value)]
	]
signatureResult36 = null
try {
    httpGet(params36) { resp ->
        signatureResult36 = resp.data
        log.debug "response data: ${signatureResult36}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "level",  value: 100 - Integer.parseInt(device.currentState("level").value), data: [sign: "${signatureResult36}"])
        log.debug("reverse-open")
        zigbee.writeAttribute(0xFC00, 0x0000, DataType.BOOLEAN, 0x01)
    }
}
