 import java.util.UUID
"License"
"AS IS"

import groovy.json.JsonOutput
import physicalgraph.zigbee.zcl.DataType

metadata {
	definition (name: "Zigbee Multi Button", namespace: "smartthings", author: "SmartThings", mcdSync: true, ocfDeviceType: "x.com.st.d.remotecontroller") {
		capability "Actuator"
		capability "Battery"
		capability "Button"
		capability "Holdable Button"
		capability "Configuration"
		capability "Refresh"
		capability "Sensor"
		capability "Health Check"

		fingerprint inClusters: "0000, 0001, 0003, 0007, 0020, 0B05", outClusters: "0003, 0006, 0019", manufacturer: "CentraLite", model:"3450-L", deviceJoinName: "Iris KeyFob", mnmn: "SmartThings", vid: "generic-4-button"
		fingerprint inClusters: "0000, 0001, 0003, 0007, 0020, 0B05", outClusters: "0003, 0006, 0019", manufacturer: "CentraLite", model:"3450-L2", deviceJoinName: "Iris KeyFob", mnmn: "SmartThings", vid: "generic-4-button"
		fingerprint profileId: "0104", inClusters: "0004", outClusters: "0000, 0001, 0003, 0004, 0005, 0B05", manufacturer: "HEIMAN", model: "SceneSwitch-EM-3.0", deviceJoinName: "HEIMAN Scene Keypad", vid: "generic-4-button"

		
		fingerprint inClusters: "0000, 0003, 0004, 0005, 0006, 0008, 0300, FCCC, 1000", outClusters: "0000, 0003, 0004, 0005, 0006, 0008, 0300, FCCC, 1000", manufacturer: "AduroSmart Eria", model: "ADUROLIGHT_CSC", deviceJoinName: "Eria scene button switch V2.1", mnmn: "SmartThings", vid: "generic-4-button"
		fingerprint inClusters: "0000, 0003, 0004, 0005, 0006, 0008, 0300, FCCC, 1000", outClusters: "0000, 0003, 0004, 0005, 0006, 0008, 0300, FCCC, 1000", manufacturer: "ADUROLIGHT", model: "ADUROLIGHT_CSC", deviceJoinName: "Eria scene button switch V2.0", mnmn: "SmartThings", vid: "generic-4-button"
		fingerprint inClusters: "0000, 0003, 0008, FCCC, 1000", outClusters: "0003, 0004, 0006, 0008, FCCC, 1000", manufacturer: "AduroSmart Eria", model: "Adurolight_NCC", deviceJoinName: "Eria dimming button switch V2.1", mnmn: "SmartThings", vid: "generic-4-button"
		fingerprint inClusters: "0000, 0003, 0008, FCCC, 1000", outClusters: "0003, 0004, 0006, 0008, FCCC, 1000", manufacturer: "ADUROLIGHT", model: "Adurolight_NCC", deviceJoinName: "Eria dimming button switch V2.0", mnmn: "SmartThings", vid: "generic-4-button"
	}

	tiles {
		standardTile("button", "device.button", width: 2, height: 2) {
			state "default", label: "", icon: "st.unknown.zwave.remote-controller", backgroundColor: "#ffffff"
			state "button 1 pushed", label: "pushed #1", icon: "st.unknown.zwave.remote-controller", backgroundColor: "#00A0DC"
		}

		valueTile("battery", "device.battery", decoration: "flat", inactiveLabel: false) {
			state "battery", label:'${currentValue}% battery', unit:""
		}

		standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat") {
			state "default", action:"refresh.refresh", icon:"st.secondary.refresh"
		}
		main (["button"])
		details(["button", "battery", "refresh"])
	}
}

def parse(String description) {
	def map = zigbee.getEvent(description)
	def result = map ? map : parseAttrMessage(description)
	if (result.name == "switch") {
//		result = createEvent(descriptionText: "Wake up event came in", isStateChange: true)
def params1 = null
def signatureResult1 = null
params1 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "Wake up event came in",  isStateChange: true]
]
signatureResult1 = null
  try {
        httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result = createEvent(descriptionText: "Wake up event came in",  isStateChange: true, data: [sign: "${signatureResult1}"])
	}
	log.debug "Description ${description} parsed to ${result}"
	return result
}

def parseAttrMessage(description) {
	def descMap = zigbee.parseDescriptionAsMap(description)
	def map = [:]
	if (descMap?.clusterInt == zigbee.POWER_CONFIGURATION_CLUSTER && descMap.commandInt != 0x07 && descMap?.value) {
		map = getBatteryPercentageResult(Integer.parseInt(descMap.value, 16))
	} else if (isAduroSmartRemote()) {
		map = parseAduroSmartButtonMessage(descMap)
    	} else if (descMap?.clusterInt == zigbee.ONOFF_CLUSTER && descMap.isClusterSpecific) {
		map = getButtonEvent(descMap)
	} else if (descMap?.clusterInt == 0x0005) {
		def buttonNumber
		buttonNumber = buttonMap[device.getDataValue("model")][descMap.data[2]]
       
		log.debug "Number is ${buttonNumber}"
		def descriptionText = getButtonName() + " ${buttonNumber} was pushed"
//		sendEventToChild(buttonNumber, createEvent(name: "button", value: "pushed", data: [buttonNumber: buttonNumber], descriptionText: descriptionText, isStateChange: true))
def params2 = null
def signatureResult2 = null
params2 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",oChild(buttonNumber,  createEvent(name: "button",  value: "pushed",  data: [buttonNumber: buttonNumber],  descriptionText: descriptionText,  isStateChange: true)]
]
signatureResult2 = null
  try {
        httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		createEvent(oChild(buttonNumber,  createEvent(name: "button",  value: "pushed",  data: [ sign: "${signatureResult2}" ,buttonNumber: buttonNumber],  descriptionText: descriptionText,  isStateChange: true)))
//		map = createEvent(name: "button", value: "pushed", data: [buttonNumber: buttonNumber], descriptionText: descriptionText, isStateChange: true)
def params3 = null
def signatureResult3 = null
params3 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "button",  value: "pushed",  data: [buttonNumber: buttonNumber],  descriptionText: descriptionText,  isStateChange: true]
]
signatureResult3 = null
  try {
        httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		map = createEvent(name: "button",  value: "pushed",  data: [ sign: "${signatureResult3}" ,buttonNumber: buttonNumber],  descriptionText: descriptionText,  isStateChange: true)
   	}
	map
}

def getButtonEvent(descMap) {
	if (descMap.commandInt == 1) {
		getButtonResult("press")
	}
	else if (descMap.commandInt == 0) {
		def button = buttonMap[device.getDataValue("model")][descMap.sourceEndpoint]
		getButtonResult("release", button)
	}
}

def getButtonResult(buttonState, buttonNumber = 1) {
	def event = [:]
	if (buttonState == 'release') {
		def timeDiff = now() - state.pressTime
		if (timeDiff > 10000) {
			return event
		} else {
			buttonState = timeDiff < holdTime ? "pushed" : "held"
			def descriptionText = getButtonName() + " ${buttonNumber} was ${buttonState}"
//			event = createEvent(name: "button", value: buttonState, data: [buttonNumber: buttonNumber], descriptionText: descriptionText, isStateChange: true)
def params4 = null
def signatureResult4 = null
params4 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "button",  value: buttonState,  data: [buttonNumber: buttonNumber],  descriptionText: descriptionText,  isStateChange: true]
]
signatureResult4 = null
  try {
        httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			event = createEvent(name: "button",  value: buttonState,  data: [ sign: "${signatureResult4}" ,buttonNumber: buttonNumber],  descriptionText: descriptionText,  isStateChange: true)
			sendEventToChild(buttonNumber, event)
//			return createEvent(descriptionText: descriptionText)
def params5 = null
def signatureResult5 = null
params5 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: descriptionText]
]
signatureResult5 = null
  try {
        httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			return createEvent(descriptionText: descriptionText, data: [sign: "${signatureResult5}"])
		}
	} else if (buttonState == 'press') {
		state.pressTime = now()
		return event
	}
}

def sendEventToChild(buttonNumber, event) {
	String childDni = "${device.deviceNetworkId}:$buttonNumber"
	def child = childDevices.find { it.deviceNetworkId == childDni }
//	child?.sendEvent(event)
		def signatureResult6= null
		signatureResult6 = 	child?.getSignature(event.name,event.value)
event.put('data',[sign: "${signatureResult6}"])
	child?.sendEvent(event)
}

def getBatteryPercentageResult(rawValue) {
	log.debug 'Battery'
	def volts = rawValue / 10
	if (volts > 3.0 || volts == 0 || rawValue == 0xFF) {
		[:]
	} else {
		def result = [
				name: 'battery'
		]
		def minVolts = 2.1
		def maxVolts = 3.0
		def pct = (volts - minVolts) / (maxVolts - minVolts)
		result.value = Math.min(100, (int)(pct * 100))
		def linkText = getLinkText(device)
		result.descriptionText = "${linkText} battery was ${result.value}%"
//		createEvent(result)
def params7 = null
def signatureResult7 = null
params7 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${result?.name}", value: "${result?.value}"]
]
signatureResult7 = null
  try {
        httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue7= ''
if(result.containsKey('data') ){
datavalue7 = result['data']
datavalue7 = "[" + datavalue7+ "," +"sign: " + "${signatureResult7}" + "]"
result.put('data',"${datavalue7}")
 }else{
datavalue7=  "[sign: " + "${signatureResult7}" +"]"
result.put('data',"${datavalue7}")
}
		createEvent(result)
	}
}

def refresh() {
	return zigbee.readAttribute(zigbee.POWER_CONFIGURATION_CLUSTER, batteryVoltage) +
			zigbee.readAttribute(zigbee.ONOFF_CLUSTER, switchType)
			zigbee.enrollResponse()
}

def ping() {
	refresh()
}

def configure() {
	def bindings = getModelBindings(device.getDataValue("model"))
	def cmds = zigbee.onOffConfig() +
			zigbee.configureReporting(zigbee.POWER_CONFIGURATION_CLUSTER, batteryVoltage, DataType.UINT8, 30, 21600, 0x01) +
			zigbee.enrollResponse() +
			zigbee.readAttribute(zigbee.POWER_CONFIGURATION_CLUSTER, batteryVoltage) + bindings
	if (isHeimanButton())
		cmds += zigbee.writeAttribute(0x0000, 0x0012, DataType.BOOLEAN, 0x01) +
		addHubToGroup(0x000F) + addHubToGroup(0x0010) + addHubToGroup(0x0011) + addHubToGroup(0x0012)
	return cmds
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

//	sendEvent(name: "button", value: "pushed", isStateChange: true, displayed: false)
def params8 = null
def signatureResult8 = null
log.debug "id is ${device.id}"
 params8 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "button",  value: "pushed",  isStateChange: true,  displayed: false]
	]
signatureResult8 = null
try {
    httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "button",  value: "pushed",  isStateChange: true,  displayed: false, data: [sign: "${signatureResult8}"])
//	sendEvent(name: "supportedButtonValues", value: supportedButtonValues.encodeAsJSON(), displayed: false)
def params9 = null
def signatureResult9 = null
log.debug "id is ${device.id}"
 params9 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "supportedButtonValues",  value: supportedButtonValues.encodeAsJSON(),  displayed: false]
	]
signatureResult9 = null
try {
    httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "supportedButtonValues",  value: supportedButtonValues.encodeAsJSON(),  displayed: false, data: [sign: "${signatureResult9}"])
	
	initialize()
}

def updated() {
	runIn(2, "initialize", [overwrite: true])
}

def initialize() {
	def numberOfButtons = modelNumberOfButtons[device.getDataValue("model")]
//	sendEvent(name: "numberOfButtons", value: numberOfButtons, displayed: false)
def params10 = null
def signatureResult10 = null
log.debug "id is ${device.id}"
 params10 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "numberOfButtons",  value: numberOfButtons,  displayed: false]
	]
signatureResult10 = null
try {
    httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "numberOfButtons",  value: numberOfButtons,  displayed: false, data: [sign: "${signatureResult10}"])
//	sendEvent(name: "checkInterval", value: 2 * 60 * 60 + 2 * 60, displayed: false, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID])
def params11 = null
def signatureResult11 = null
log.debug "id is ${device.id}"
 params11 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 2 * 60 * 60 + 2 * 60,  displayed: false,  data: [protocol: "zigbee",  hubHardwareId: device.hub.hardwareID]]
	]
signatureResult11 = null
try {
    httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "checkInterval",  value: 2 * 60 * 60 + 2 * 60,  displayed: false,  data: [ sign: "${signatureResult11}" ,protocol: "zigbee",  hubHardwareId: device.hub.hardwareID])
    
	if(!childDevices) {
		addChildButtons(numberOfButtons)
	}
	if(childDevices) {
		def event
		for(def endpoint : 1..device.currentValue("numberOfButtons")) {
//			event = createEvent(name: "button", value: "pushed", isStateChange: true)
def params12 = null
def signatureResult12 = null
params12 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "button",  value: "pushed",  isStateChange: true]
]
signatureResult12 = null
  try {
        httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			event = createEvent(name: "button",  value: "pushed",  isStateChange: true, data: [sign: "${signatureResult12}"])
			sendEventToChild(endpoint, event)
		}
	}
}

private addChildButtons(numberOfButtons) {
	for(def endpoint : 1..numberOfButtons) {
		try {
			String childDni = "${device.deviceNetworkId}:$endpoint"
			def componentLabel = getButtonName() + "${endpoint}"

			if (isAduroSmartRemote()) {
				componentLabel = device.displayName + " - ${endpoint}"
			}
			def child = addChildDevice("Child Button", childDni, device.getHub().getId(), [
					completedSetup: true,
					label         : componentLabel,
					isComponent   : true,
					componentName : "button$endpoint",
					componentLabel: "Button $endpoint"
			])
//			child.sendEvent(name: "supportedButtonValues", value: supportedButtonValues.encodeAsJSON(), displayed: false)
		def signatureResult13= null
		signatureResult13 = 			child.getSignature("supportedButtonValues",supportedButtonValues.encodeAsJSON())
			child.sendEvent(name: "supportedButtonValues",  value: supportedButtonValues.encodeAsJSON(),  displayed: false,data: [sign: "${signatureResult13}"])
		} catch(Exception e) {
			log.debug "Exception: ${e}"
		}
	}
}

private getBatteryVoltage() { 0x0020 }
private getSwitchType() { 0x0000 }
private getHoldTime() { 1000 }
private getButtonMap() {[
		"3450-L" : [
				"01" : 4,
				"02" : 3,
				"03" : 1,
				"04" : 2
		],
		"3450-L2" : [
				"01" : 4,
				"02" : 3,
				"03" : 1,
				"04" : 2
		],
		"SceneSwitch-EM-3.0" : [
				"01" : 1,
				"02" : 2,
				"03" : 3,
				"04" : 4
		]
]}

private getSupportedButtonValues() {
	def values
	if (device.getDataValue("model") == "SceneSwitch-EM-3.0") {
		values = ["pushed"]
	} else if (isAduroSmartRemote()) {
		values = ["pushed"]
	} else {
		values = ["pushed", "held"]
	}
	return values
}

private getModelNumberOfButtons() {[
		"3450-L" : 4,
		"3450-L2" : 4,
		"SceneSwitch-EM-3.0" : 4, 
		"ADUROLIGHT_CSC" : 4,
		"Adurolight_NCC" : 4
]}

private getModelBindings(model) {
	def bindings = []
	for(def endpoint : 1..modelNumberOfButtons[model]) {
		bindings += zigbee.addBinding(zigbee.ONOFF_CLUSTER, ["destEndpoint" : endpoint])
	}
	if (isAduroSmartRemote()) {
		bindings += zigbee.addBinding(zigbee.LEVEL_CONTROL_CLUSTER, ["destEndpoint" : 2]) + 
			zigbee.addBinding(zigbee.LEVEL_CONTROL_CLUSTER, ["destEndpoint" : 3])
	}
	bindings
}

private getButtonName() {
	def values = device.displayName.endsWith(' 1') ? "${device.displayName[0..-2]}" : "${device.displayName}"
	return values
}

private Map parseAduroSmartButtonMessage(Map descMap){
	def buttonState = "pushed"
	def buttonNumber = 0
	if (descMap.clusterInt == zigbee.ONOFF_CLUSTER) {
		if (descMap.command == "01") {
		    buttonNumber = 1
		} else if (descMap.command == "00") {
		    buttonNumber = 4
		}
	} else if (descMap.clusterInt == zigbee.LEVEL_CONTROL_CLUSTER) {
		if (descMap.command == "02") {
		    def data = descMap.data
		    def d0 = data[0]
		    if (d0 == "00") {
			buttonNumber = 2
		    } else if (d0 == "01") {
			buttonNumber = 3
		    }
		}
	} else if (descMap.clusterInt == ADUROSMART_SPECIFIC_CLUSTER) {
		def list2 = descMap.data
		buttonNumber = (list2[1] as int) + 1
	}
	if (buttonNumber != 0) {
//		def childevent = createEvent(name: "button", value: "pushed", data: [buttonNumber: 1], isStateChange: true)
def params14 = null
def signatureResult14 = null
params14 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "button",  value: "pushed",  data: [buttonNumber: 1],  isStateChange: true]
]
signatureResult14 = null
  try {
        httpGet(params14) { resp ->
        signatureResult14 = resp.data
        log.debug "response data: ${signatureResult14}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		def childevent = createEvent(name: "button",  value: "pushed",  data: [ sign: "${signatureResult14}" ,buttonNumber: 1],  isStateChange: true)
		sendEventToChild(buttonNumber, childevent)
		def descriptionText = "$device.displayName button $buttonNumber was $buttonState"
//		return createEvent(name: "button", value: buttonState, data: [buttonNumber: buttonNumber], descriptionText: descriptionText, isStateChange: true)
def params15 = null
def signatureResult15 = null
params15 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "button",  value: buttonState,  data: [buttonNumber: buttonNumber],  descriptionText: descriptionText,  isStateChange: true]
]
signatureResult15 = null
  try {
        httpGet(params15) { resp ->
        signatureResult15 = resp.data
        log.debug "response data: ${signatureResult15}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		return createEvent(name: "button",  value: buttonState,  data: [ sign: "${signatureResult15}" ,buttonNumber: buttonNumber],  descriptionText: descriptionText,  isStateChange: true)
        } else {
		return [:]
	}
}

def isAduroSmartRemote(){
	((device.getDataValue("model") == "Adurolight_NCC") || (device.getDataValue("model") == "ADUROLIGHT_CSC"))
}

def getADUROSMART_SPECIFIC_CLUSTER() {0xFCCC}

private getCLUSTER_GROUPS() { 0x0004 }

private List addHubToGroup(Integer groupAddr) {
	["st cmd 0x0000 0x01 ${CLUSTER_GROUPS} 0x00 {${zigbee.swapEndianHex(zigbee.convertToHexString(groupAddr,4))} 00}",
	 "delay 200"]
}

def isHeimanButton(){
	device.getDataValue("model") == "SceneSwitch-EM-3.0"
}



def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
