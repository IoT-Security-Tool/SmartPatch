 import java.util.UUID
"License"
"AS IS"
metadata {
	definition(name: "Z-Wave Binary Switch Endpoint", namespace: "smartthings", author: "SmartThings", mnmn: "SmartThings", vid: "generic-switch") {
		capability "Actuator"
		capability "Health Check"
		capability "Refresh"
		capability "Sensor"
		capability "Switch"
	}

	simulator {
	}

	
	tiles(scale: 2) {
		multiAttributeTile(name: "switch", type: "lighting", width: 6, height: 4, canChangeIcon: true) {
			tileAttribute("device.switch", key: "PRIMARY_CONTROL") {
				attributeState "on", label: '${name}', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#00A0DC"
				attributeState "off", label: '${name}', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
			}
		}

		standardTile("refresh", "device.switch", width: 2, height: 2, inactiveLabel: false, decoration: "flat") {
			state "default", label: '', action: "refresh.refresh", icon: "st.secondary.refresh"
		}

		main "switch"
		details(["switch", "refresh"])
	}
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

	configure()
}

def updated() {
	configure()
}

def configure() {
	
//	sendEvent(name: "checkInterval", value: 30 * 60 + 2 * 60, displayed: false, data: [protocol: "zwave", hubHardwareId: parent.hubID, offlinePingable: "1"])
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 30 * 60 + 2 * 60,  displayed: false,  data: [protocol: "zwave",  hubHardwareId: parent.hubID,  offlinePingable: "1"]]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "checkInterval",  value: 30 * 60 + 2 * 60,  displayed: false,  data: [ sign: "${signatureResult1}" ,protocol: "zwave",  hubHardwareId: parent.hubID,  offlinePingable: "1"])
	refresh()
}

def handleZWave(physicalgraph.zwave.commands.basicv1.BasicReport cmd) {
	switchEvents(cmd)
}

def handleZWave(physicalgraph.zwave.commands.basicv1.BasicSet cmd) {
	switchEvents(cmd)
}

def handleZWave(physicalgraph.zwave.commands.switchbinaryv1.SwitchBinaryReport cmd) {
	switchEvents(cmd)
}

def switchEvents(physicalgraph.zwave.Command cmd) {
	def value = (cmd.value ? "on" : "off")
//	sendEvent(name: "switch", value: value, descriptionText: "$device.displayName was turned $value")
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: value,  descriptionText: "$device.displayName was turned $value"]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "switch",  value: value,  descriptionText: "$device.displayName was turned $value", data: [sign: "${signatureResult2}"])
}

def handleZWave(physicalgraph.zwave.Command cmd) {
//	sendEvent(descriptionText: "$device.displayName: $cmd", isStateChange: true, displayed: false)
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "$device.displayName: $cmd",  isStateChange: true,  displayed: false]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(descriptionText: "$device.displayName: $cmd",  isStateChange: true,  displayed: false, data: [sign: "${signatureResult3}"])
}

def on() {
	
	parent.sendCommand(device, [zwave.switchBinaryV1.switchBinarySet(switchValue: 0xFF),
								zwave.switchBinaryV1.switchBinaryGet()])
}

def off() {
	
	parent.sendCommand(device, [zwave.switchBinaryV1.switchBinarySet(switchValue: 0x00),
								zwave.switchBinaryV1.switchBinaryGet()])
}


def ping() {
	refresh()
}

def refresh() {
	parent.sendCommand(device, zwave.switchBinaryV1.switchBinaryGet())
}
def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
