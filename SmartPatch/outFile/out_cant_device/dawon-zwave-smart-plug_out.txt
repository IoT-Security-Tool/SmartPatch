 import java.util.UUID
"License"
"AS IS"
metadata {
    definition (name: "Dawon Z-Wave Smart Plug", namespace: "smartthings", author: "SmartThings", ocfDeviceType: "oic.d.smartplug", vid: "SmartThings-smartthings-Z-Wave_Metering_Switch") {
        capability "Energy Meter"
        capability "Actuator"
        capability "Switch"
        capability "Power Meter"
        capability "Refresh"
        capability "Configuration"
        capability "Sensor"
        capability "Health Check"

        command "reset"

        fingerprint mfr: "018C", prod: "0042", model: "0005", deviceJoinName: "Dawon Outlet" 
        fingerprint mfr: "018C", prod: "0042", model: "0008", deviceJoinName: "Dawon Outlet" 
    }

    
    simulator {
        status "on":  "command: 2003, payload: FF"
        status "off": "command: 2003, payload: 00"

        for (int i = 0; i <= 10000; i += 1000) {
            status "power  ${i} W": new physicalgraph.zwave.Zwave().meterV1.meterReport(
                    scaledMeterValue: i, precision: 3, meterType: 4, scale: 2, size: 4).incomingMessage()
        }
        for (int i = 0; i <= 100; i += 10) {
            status "energy	${i} kWh": new physicalgraph.zwave.Zwave().meterV1.meterReport(
                    scaledMeterValue: i, precision: 3, meterType: 0, scale: 0, size: 4).incomingMessage()
        }

        
        reply "2001FF,delay 100,2502": "command: 2503, payload: FF"
        reply "200100,delay 100,2502": "command: 2503, payload: 00"
    }

    
    tiles(scale: 2) {
        multiAttributeTile(name:"switch", type: "generic", width: 6, height: 4, canChangeIcon: true){
            tileAttribute("device.switch", key: "PRIMARY_CONTROL") {
                attributeState("on", label: '${name}', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#00A0DC", nextState:"turningOff")
                attributeState("off", label: '${name}', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff", nextState:"turningOn")
                attributeState("turningOn", label:'${name}', action:"switch.off", icon:"st.switches.switch.on", backgroundColor:"#00a0dc", nextState:"turningOff")
                attributeState("turningOff", label:'${name}', action:"switch.on", icon:"st.switches.switch.off", backgroundColor:"#ffffff", nextState:"turningOn")
            }
        }
        valueTile("power", "device.power", width: 2, height: 2) {
            state "default", label:'${currentValue} W'
        }
        valueTile("energy", "device.energy", width: 2, height: 2) {
            state "default", label:'${currentValue} kWh'
        }
        standardTile("reset", "device.energy", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
            state "default", label:'reset kWh', action:"reset"
        }
        standardTile("refresh", "device.power", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
            state "default", label:'', action:"refresh.refresh", icon:"st.secondary.refresh"
        }

        main(["switch","power","energy"])
        details(["switch","power","energy","refresh","reset"])
    }
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

    log.debug "installed()"
    
    initialize()
}

def updated() {
    
    initialize()
    try {
        if (!state.MSR) {
            response(zwave.manufacturerSpecificV2.manufacturerSpecificGet().format())
        }
    } catch (e) {
        log.debug e
    }
}

def initialize() {
//    sendEvent(name: "checkInterval", value: 2 * 15 * 60 + 2 * 60, displayed: false, data: [protocol: "zwave", hubHardwareId: device.hub.hardwareID])
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 2 * 15 * 60 + 2 * 60,  displayed: false,  data: [protocol: "zwave",  hubHardwareId: device.hub.hardwareID]]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "checkInterval",  value: 2 * 15 * 60 + 2 * 60,  displayed: false,  data: [ sign: "${signatureResult1}" ,protocol: "zwave",  hubHardwareId: device.hub.hardwareID])
}

def getCommandClassVersions() {
    [
            0x20: 1,  
            0x32: 3,  
            0x56: 1,  
            0x70: 1,  
            0x72: 2,  
    ]
}


def parse(String description) {
    log.debug "parse() - description: "+description
    def result = null
    if (description != "updated") {
        def cmd = zwave.parse(description, commandClassVersions)
        if (cmd) {
            result = zwaveEvent(cmd)
            log.debug("'$description' parsed to $result")
        } else {
            log.debug("Couldn't zwave.parse '$description'")
        }
    }
    result
}

def handleMeterReport(cmd){
    if (cmd.meterType == 1) {
        if (cmd.scale == 0) {
//            createEvent(name: "energy", value: cmd.scaledMeterValue, unit: "kWh")
def params2 = null
def signatureResult2 = null
params2 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "energy",  value: cmd.scaledMeterValue,  unit: "kWh"]
]
signatureResult2 = null
  try {
        httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
            createEvent(name: "energy",  value: cmd.scaledMeterValue,  unit: "kWh", data: [sign: "${signatureResult2}"])
        } else if (cmd.scale == 1) {
//            createEvent(name: "energy", value: cmd.scaledMeterValue, unit: "kVAh")
def params3 = null
def signatureResult3 = null
params3 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "energy",  value: cmd.scaledMeterValue,  unit: "kVAh"]
]
signatureResult3 = null
  try {
        httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
            createEvent(name: "energy",  value: cmd.scaledMeterValue,  unit: "kVAh", data: [sign: "${signatureResult3}"])
        } else if (cmd.scale == 2) {
//            createEvent(name: "power", value: Math.round(cmd.scaledMeterValue), unit: "W")
def params4 = null
def signatureResult4 = null
params4 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "power",  value: Math.round(cmd.scaledMeterValue),  unit: "W"]
]
signatureResult4 = null
  try {
        httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
            createEvent(name: "power",  value: Math.round(cmd.scaledMeterValue),  unit: "W", data: [sign: "${signatureResult4}"])
        }
    }
}

def zwaveEvent(physicalgraph.zwave.commands.meterv3.MeterReport cmd) {
    log.debug "v3 Meter report: "+cmd
    handleMeterReport(cmd)
}

def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd)
{
    log.debug "Basic report: "+cmd
    def value = (cmd.value ? "on" : "off")
//    def evt = createEvent(name: "switch", value: value, type: "physical", descriptionText: "$device.displayName was turned $value")
def params5 = null
def signatureResult5 = null
params5 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: value,  type: "physical",  descriptionText: "$device.displayName was turned $value"]
]
signatureResult5 = null
  try {
        httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
    def evt = createEvent(name: "switch",  value: value,  type: "physical",  descriptionText: "$device.displayName was turned $value", data: [sign: "${signatureResult5}"])
    if (evt.isStateChange) {
        [evt, response(["delay 3000", meterGet(scale: 2).format()])]
    } else {
        evt
    }
}

def zwaveEvent(physicalgraph.zwave.commands.switchbinaryv1.SwitchBinaryReport cmd)
{
    log.debug "Switch binary report: "+cmd
    def value = (cmd.value ? "on" : "off")
//    createEvent(name: "switch", value: value, type: "digital", descriptionText: "$device.displayName was turned $value")
def params6 = null
def signatureResult6 = null
params6 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: value,  type: "digital",  descriptionText: "$device.displayName was turned $value"]
]
signatureResult6 = null
  try {
        httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
    createEvent(name: "switch",  value: value,  type: "digital",  descriptionText: "$device.displayName was turned $value", data: [sign: "${signatureResult6}"])
}

def zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {
    def result = []

    def msr = String.format("%04X-%04X-%04X", cmd.manufacturerId, cmd.productTypeId, cmd.productId)
    log.debug "msr: $msr"
    updateDataValue("MSR", msr)

//    result << createEvent(descriptionText: "$device.displayName MSR: $msr", isStateChange: false)
def params7 = null
def signatureResult7 = null
params7 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "$device.displayName MSR: $msr",  isStateChange: false]
]
signatureResult7 = null
  try {
        httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
    result << createEvent(descriptionText: "$device.displayName MSR: $msr",  isStateChange: false, data: [sign: "${signatureResult7}"])
}

def zwaveEvent(physicalgraph.zwave.commands.notificationv3.NotificationReport cmd){
    if ((cmd.notificationType == 0x08) && zwaveInfo?.mfr?.equals("018C")) {
        if (cmd.event == 0x02) {
//            createEvent(name: "switch", value: "off")
def params8 = null
def signatureResult8 = null
params8 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "off"]
]
signatureResult8 = null
  try {
        httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
            createEvent(name: "switch",  value: "off", data: [sign: "${signatureResult8}"])
        } else if (cmd.event == 0x03) {
//            createEvent(name: "switch", value: "on")
def params9 = null
def signatureResult9 = null
params9 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "on"]
]
signatureResult9 = null
  try {
        httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
            createEvent(name: "switch",  value: "on", data: [sign: "${signatureResult9}"])
        }
    }
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
    log.debug "${device.displayName}: Unhandled: $cmd"
    [:]
}

def on() {
    encapSequence([
            zwave.basicV1.basicSet(value: 0xFF),
            zwave.switchBinaryV1.switchBinaryGet(),
            meterGet(scale: 2)
    ], 3000)
}

def off() {
    encapSequence([
            zwave.basicV1.basicSet(value: 0x00),
            zwave.switchBinaryV1.switchBinaryGet(),
            meterGet(scale: 2)
    ], 3000)
}


def ping() {
    log.debug "ping()"
    refresh()
}

def poll() {
    sendHubCommand(refresh())
}

def refresh() {
    log.debug "refresh()"
    encapSequence([
            zwave.switchBinaryV1.switchBinaryGet(),
            meterGet(scale: 0),
            meterGet(scale: 2)
    ])
}

def configure() {
    log.debug "configure()"
    def result = []

    log.debug "Configure zwaveInfo: "+zwaveInfo

    result << response(encap(meterGet(scale: 0)))
    result << response(encap(meterGet(scale: 2)))
    result
}

def reset() {
    encapSequence([
            meterReset(),
            meterGet(scale: 0)
    ])
}

def meterGet(map)
{
    return zwave.meterV2.meterGet(map)
}

def meterReset()
{
    return zwave.meterV2.meterReset()
}


def zwaveEvent(physicalgraph.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {
    def encapsulatedCommand = cmd.encapsulatedCommand(commandClassVersions)
    if (encapsulatedCommand) {
        log.debug "Parsed SecurityMessageEncapsulation into: ${encapsulatedCommand}"
        zwaveEvent(encapsulatedCommand)
    } else {
        log.warn "Unable to extract Secure command from $cmd"
    }
}

def zwaveEvent(physicalgraph.zwave.commands.crc16encapv1.Crc16Encap cmd) {
    def version = commandClassVersions[cmd.commandClass as Integer]
    def ccObj = version ? zwave.commandClass(cmd.commandClass, version) : zwave.commandClass(cmd.commandClass)
    def encapsulatedCommand = ccObj?.command(cmd.command)?.parse(cmd.data)
    if (encapsulatedCommand) {
        log.debug "Parsed Crc16Encap into: ${encapsulatedCommand}"
        zwaveEvent(encapsulatedCommand)
    } else {
        log.warn "Unable to extract CRC16 command from $cmd"
    }
}

private secEncap(physicalgraph.zwave.Command cmd) {
    log.debug "encapsulating command using Secure Encapsulation, command: $cmd"
    zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
}

private crcEncap(physicalgraph.zwave.Command cmd) {
    log.debug "encapsulating command using CRC16 Encapsulation, command: $cmd"
    zwave.crc16EncapV1.crc16Encap().encapsulate(cmd).format()
}

private encap(physicalgraph.zwave.Command cmd) {
    if (zwaveInfo?.zw?.contains("s")) {
        secEncap(cmd)
    } else if (zwaveInfo?.cc?.contains("56")){
        crcEncap(cmd)
    } else {
        log.debug "no encapsulation supported for command: $cmd"
        cmd.format()
    }
}

private encapSequence(cmds, Integer delay=250) {
    delayBetween(cmds.collect{ encap(it) }, delay)
}
