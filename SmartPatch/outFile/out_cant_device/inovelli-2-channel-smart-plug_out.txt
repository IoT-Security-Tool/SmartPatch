 import java.util.UUID
"License"
"AS IS"
metadata {
	definition(name: "Inovelli 2-Channel Smart Plug", namespace: "erocm123", author: "Eric Maycock", ocfDeviceType: "oic.d.smartplug", mnmn: "SmartThings", vid: "generic-switch") {
		capability "Actuator"
		capability "Sensor"
		capability "Switch"
		capability "Polling"
		capability "Refresh"
		capability "Health Check"

		fingerprint manufacturer: "015D", prod: "0221", model: "251C", deviceJoinName: "Show Home Outlet" 
		fingerprint manufacturer: "0312", prod: "0221", model: "251C", deviceJoinName: "Inovelli Outlet" 
		fingerprint manufacturer: "0312", prod: "B221", model: "251C", deviceJoinName: "Inovelli Outlet" 
		fingerprint manufacturer: "0312", prod: "0221", model: "611C", deviceJoinName: "Inovelli Outlet" 
		fingerprint manufacturer: "015D", prod: "0221", model: "611C", deviceJoinName: "Inovelli Outlet" 
		fingerprint manufacturer: "015D", prod: "6100", model: "6100", deviceJoinName: "Inovelli Outlet" 
		fingerprint manufacturer: "0312", prod: "6100", model: "6100", deviceJoinName: "Inovelli Outlet" 
		fingerprint manufacturer: "015D", prod: "2500", model: "2500", deviceJoinName: "Inovelli Outlet" 
	}
	simulator {}
	preferences {}
	tiles {
		multiAttributeTile(name: "switch", type: "lighting", width: 6, height: 4, canChangeIcon: true) {
			tileAttribute("device.switch", key: "PRIMARY_CONTROL") {
				attributeState "off", label: '${name}', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff", nextState: "turningOn"
				attributeState "on", label: '${name}', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#00a0dc", nextState: "turningOff"
				attributeState "turningOff", label: '${name}', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff", nextState: "turningOn"
				attributeState "turningOn", label: '${name}', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#00a0dc", nextState: "turningOff"
			}
		}
		standardTile("refresh", "device.switch", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "default", label: "", action: "refresh.refresh", icon: "st.secondary.refresh"
		}
		main(["switch"])
		details(["switch",
				 childDeviceTiles("all"), "refresh"
		])
	}
}
def parse(String description) {
	def result = []
	def cmd = zwave.parse(description)
	if (cmd) {
		result += zwaveEvent(cmd)
		logging("Parsed ${cmd} to ${result.inspect()}", 1)
	} else {
		logging("Non-parsed event: ${description}", 2)
	}
	return result
}
def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd, ep = null) {
	logging("BasicReport ${cmd} - ep ${ep}", 2)
	if (ep) {
		def event
		childDevices.each {
			childDevice ->
				if (childDevice.deviceNetworkId == "$device.deviceNetworkId-ep$ep") {
//					childDevice.sendEvent(name: "switch", value: cmd.value ? "on" : "off")
		def signatureResult1= null
		signatureResult1 = 					childDevice.getSignature("switch",cmd.value ? "on")
					childDevice.sendEvent(name: "switch",  value: cmd.value ? "on" : "off",data: [sign: "${signatureResult1}"])
				}
		}
		if (cmd.value) {
//			event = [createEvent([name: "switch", value: "on"])]
def params2 = null
def signatureResult2 = null
params2 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",[name: "switch",  value: "on"]]
]
signatureResult2 = null
  try {
        httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			event = [createEvent([name: "switch",  value: "on"], data: [sign: "${signatureResult2}"])]
		} else {
			def allOff = true
			childDevices.each {
				n ->
					if (n.currentState("switch")?.value != "off") allOff = false
			}
			if (allOff) {
//				event = [createEvent([name: "switch", value: "off"])]
def params3 = null
def signatureResult3 = null
params3 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",[name: "switch",  value: "off"]]
]
signatureResult3 = null
  try {
        httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
				event = [createEvent([name: "switch",  value: "off"], data: [sign: "${signatureResult3}"])]
			} else {
//				event = [createEvent([name: "switch", value: "on"])]
def params4 = null
def signatureResult4 = null
params4 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",[name: "switch",  value: "on"]]
]
signatureResult4 = null
  try {
        httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
				event = [createEvent([name: "switch",  value: "on"], data: [sign: "${signatureResult4}"])]
			}
		}
		return event
	}
}
def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicSet cmd) {
	logging("BasicSet ${cmd}", 2)
//	def result = createEvent(name: "switch", value: cmd.value ? "on" : "off", type: "digital")
def params5 = null
def signatureResult5 = null
params5 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: cmd.value ? "on" : "off",  type: "digital"]
]
signatureResult5 = null
  try {
        httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	def result = createEvent(name: "switch",  value: cmd.value ? "on" : "off",  type: "digital", data: [sign: "${signatureResult5}"])
	def cmds = []
	cmds << encap(zwave.switchBinaryV1.switchBinaryGet(), 1)
	cmds << encap(zwave.switchBinaryV1.switchBinaryGet(), 2)
	return [result, response(commands(cmds))] 
}
def zwaveEvent(physicalgraph.zwave.commands.switchbinaryv1.SwitchBinaryReport cmd, ep = null) {
	logging("SwitchBinaryReport ${cmd} - ep ${ep}", 2)
	if (ep) {
		def event
		def childDevice = childDevices.find {
			it.deviceNetworkId == "$device.deviceNetworkId-ep$ep"
		}
//		if (childDevice) childDevice.sendEvent(name: "switch", value: cmd.value ? "on" : "off")
		def signatureResult6= null
		signatureResult6 = 		if (childDevice) childDevice.getSignature("switch",cmd.value ? "on")
		if (childDevice) childDevice.sendEvent(name: "switch",  value: cmd.value ? "on" : "off",data: [sign: "${signatureResult6}"])
		if (cmd.value) {
//			event = [createEvent([name: "switch", value: "on"])]
def params7 = null
def signatureResult7 = null
params7 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",[name: "switch",  value: "on"]]
]
signatureResult7 = null
  try {
        httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			event = [createEvent([name: "switch",  value: "on"], data: [sign: "${signatureResult7}"])]
		} else {
			def allOff = true
			childDevices.each {
				n->
					if (n.currentState("switch")?.value != "off") allOff = false
			}
			if (allOff) {
//				event = [createEvent([name: "switch", value: "off"])]
def params8 = null
def signatureResult8 = null
params8 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",[name: "switch",  value: "off"]]
]
signatureResult8 = null
  try {
        httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
				event = [createEvent([name: "switch",  value: "off"], data: [sign: "${signatureResult8}"])]
			} else {
//				event = [createEvent([name: "switch", value: "on"])]
def params9 = null
def signatureResult9 = null
params9 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",[name: "switch",  value: "on"]]
]
signatureResult9 = null
  try {
        httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
				event = [createEvent([name: "switch",  value: "on"], data: [sign: "${signatureResult9}"])]
			}
		}
		return event
	} else {
//		def result = createEvent(name: "switch", value: cmd.value ? "on" : "off", type: "digital")
def params10 = null
def signatureResult10 = null
params10 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: cmd.value ? "on" : "off",  type: "digital"]
]
signatureResult10 = null
  try {
        httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		def result = createEvent(name: "switch",  value: cmd.value ? "on" : "off",  type: "digital", data: [sign: "${signatureResult10}"])
		def cmds = []
		cmds << encap(zwave.switchBinaryV1.switchBinaryGet(), 1)
		cmds << encap(zwave.switchBinaryV1.switchBinaryGet(), 2)
		return [result, response(commands(cmds))] 
	}
}
def zwaveEvent(physicalgraph.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd) {
	if (cmd.commandClass == 0x6C && cmd.parameter.size >= 4) { 
		
		cmd.parameter = cmd.parameter.drop(2)
		
		cmd.commandClass = cmd.parameter[0]
		cmd.command = cmd.parameter[1]
		cmd.parameter = cmd.parameter.drop(2)
	}
	logging("MultiChannelCmdEncap ${cmd}", 2)
	def encapsulatedCommand = cmd.encapsulatedCommand([0x32: 3, 0x25: 1, 0x20: 1])
	if (encapsulatedCommand) {
		zwaveEvent(encapsulatedCommand, cmd.sourceEndPoint as Integer)
	}
}
def zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {
	logging("ManufacturerSpecificReport ${cmd}", 2)
	def msr = String.format("%04X-%04X-%04X", cmd.manufacturerId, cmd.productTypeId, cmd.productId)
	logging("msr: $msr", 2)
	updateDataValue("MSR", msr)
}
def zwaveEvent(physicalgraph.zwave.Command cmd) {
	
	
	logging("Unhandled Event: ${cmd}", 2)
}
def on() {
	logging("on()", 1)
	commands([
			zwave.switchAllV1.switchAllOn(),
			encap(zwave.switchBinaryV1.switchBinaryGet(), 1),
			encap(zwave.switchBinaryV1.switchBinaryGet(), 2)
	])
}
def off() {
	logging("off()", 1)
	commands([
			zwave.switchAllV1.switchAllOff(),
			encap(zwave.switchBinaryV1.switchBinaryGet(), 1),
			encap(zwave.switchBinaryV1.switchBinaryGet(), 2)
	])
}
void childOn(String dni) {
	logging("childOn($dni)", 1)
	def cmds = []
	cmds << new physicalgraph.device.HubAction(command(encap(zwave.basicV1.basicSet(value: 0xFF), channelNumber(dni))))
	cmds << new physicalgraph.device.HubAction(command(encap(zwave.switchBinaryV1.switchBinaryGet(), channelNumber(dni))))
	sendHubCommand(cmds, 1000)
}
void childOff(String dni) {
	logging("childOff($dni)", 1)
	def cmds = []
	cmds << new physicalgraph.device.HubAction(command(encap(zwave.basicV1.basicSet(value: 0x00), channelNumber(dni))))
	cmds << new physicalgraph.device.HubAction(command(encap(zwave.switchBinaryV1.switchBinaryGet(), channelNumber(dni))))
	sendHubCommand(cmds, 1000)
}
void childRefresh(String dni) {
	logging("childRefresh($dni)", 1)
	def cmds = []
	cmds << new physicalgraph.device.HubAction(command(encap(zwave.switchBinaryV1.switchBinaryGet(), channelNumber(dni))))
	sendHubCommand(cmds, 1000)
}
def poll() {
	logging("poll()", 1)
	commands([
			encap(zwave.switchBinaryV1.switchBinaryGet(), 1),
			encap(zwave.switchBinaryV1.switchBinaryGet(), 2),
	])
}
def refresh() {
	logging("refresh()", 1)
	commands([
			encap(zwave.switchBinaryV1.switchBinaryGet(), 1),
			encap(zwave.switchBinaryV1.switchBinaryGet(), 2),
	])
}
def ping() {
	logging("ping()", 1)
	refresh()
}
def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

	logging("installed()", 1)
	command(zwave.manufacturerSpecificV1.manufacturerSpecificGet())
	createChildDevices()
}
def updated() {
	logging("updated()", 1)
	if (!childDevices) {
		createChildDevices()
	} else if (device.label != state.oldLabel) {
		childDevices.each {
			if (it.label == "${state.oldLabel} (CH${channelNumber(it.deviceNetworkId)})") {
				def newLabel = "${device.displayName} (CH${channelNumber(it.deviceNetworkId)})"
				it.setLabel(newLabel)
			}
		}
		state.oldLabel = device.label
	}
//	sendEvent(name: "checkInterval", value: 2 * 15 * 60 + 2 * 60, displayed: false, data: [protocol: "zwave", hubHardwareId: device.hub.hardwareID, offlinePingable: "1"])
def params11 = null
def signatureResult11 = null
log.debug "id is ${device.id}"
 params11 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 2 * 15 * 60 + 2 * 60,  displayed: false,  data: [protocol: "zwave",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"]]
	]
signatureResult11 = null
try {
    httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "checkInterval",  value: 2 * 15 * 60 + 2 * 60,  displayed: false,  data: [ sign: "${signatureResult11}" ,protocol: "zwave",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"])
//	sendEvent(name: "needUpdate", value: device.currentValue("needUpdate"), displayed: false, isStateChange: true)
def params12 = null
def signatureResult12 = null
log.debug "id is ${device.id}"
 params12 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "needUpdate",  value: device.currentValue("needUpdate"),  displayed: false,  isStateChange: true]
	]
signatureResult12 = null
try {
    httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "needUpdate",  value: device.currentValue("needUpdate"),  displayed: false,  isStateChange: true, data: [sign: "${signatureResult12}"])
}
def zwaveEvent(physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd) {
	logging("${device.displayName} parameter '${cmd.parameterNumber}' with a byte size of '${cmd.size}' is set to '${cmd2Integer(cmd.configurationValue)}'", 2)
}
private encap(cmd, endpoint) {
	if (endpoint) {
		zwave.multiChannelV3.multiChannelCmdEncap(destinationEndPoint: endpoint).encapsulate(cmd)
	} else {
		cmd
	}
}
private command(physicalgraph.zwave.Command cmd) {
	if (state.sec) {
		zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
	} else {
		cmd.format()
	}
}
private commands(commands, delay = 1000) {
	delayBetween(commands.collect {
		command(it)
	}, delay)
}
private channelNumber(String dni) {
	dni.split("-ep")[-1] as Integer
}
private void createChildDevices() {
	state.oldLabel = device.label
	for (i in 1..2) {
		addChildDevice("Switch Child Device",
				"${device.deviceNetworkId}-ep${i}",
				device.hubId,
				[completedSetup: true,
				 label: "${device.displayName} (CH${i})",
				 isComponent: true,
				 componentName: "ep$i",
				 componentLabel: "Channel $i"
		])
	}
}

private def logging(message, level) {
	if (logLevel != "0") {
		switch (logLevel) {
			case "1":
				if (level > 1) log.debug "$message"
				break
			case "99":
				log.debug "$message"
				break
		}
	}
}
def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
