 import java.util.UUID
metadata {
        definition (name: "Timevalve Smart", namespace: "timevalve.gaslock.t-08", author: "ruinnel") {
                capability "Valve"
                capability "Refresh"
                capability "Battery"
                capability "Temperature Measurement"
                
                command "setRemaining"
                command "setTimeout"
                command "setTimeout10"
                command "setTimeout20"
                command "setTimeout30"
                command "setTimeout40"
                
                command "remainingLevel"
                
                attribute "remaining", "number"
                attribute "remainingText", "String"
                attribute "timeout", "number"
                
                
                
        }

        tiles (scale: 2) {
        	multiAttributeTile(name:"statusTile", type:"generic", width:6, height:4) {
            	tileAttribute("device.contact", key: "PRIMARY_CONTROL") {
	            	attributeState "open", label: '${name}', action: "close", icon:"st.contact.contact.open", backgroundColor:"#e86d13"
	            	attributeState "closed", label:'${name}', action: "", icon:"st.contact.contact.closed", backgroundColor:"#00a0dc"
    	        }
                tileAttribute("device.remainingText", key: "SECONDARY_CONTROL") {
	            	attributeState "open", label: '${currentValue}', icon:"st.contact.contact.open", backgroundColor:"#e86d13"
	            	attributeState "closed", label:'', icon:"st.contact.contact.closed", backgroundColor:"#00a0dc"
    	        }
            }
            
            standardTile("refreshTile", "command.refresh", width: 2, height: 2, inactiveLabel: false, decoration: "flat") {
                state "default", label:'', action:"refresh.refresh", icon:"st.secondary.refresh"
            }
            
            controlTile("remainingSliderTile", "device.remaining", "slider", inactiveLabel: false, range:"(0..590)", height: 2, width: 4) {
            	state "level", action:"remainingLevel"
            }
            valueTile("setRemaining", "device.remainingText", inactiveLabel: false, decoration: "flat", height: 2, width: 2){
                state "remainingText", label:'${currentValue}\nRemaining'
            }

            standardTile("setTimeout10", "device.remaining", inactiveLabel: false, decoration: "flat") {
                state "default", label:'10Min', action: "setTimeout10", icon:"st.Health & Wellness.health7", defaultState: true
                state "10", label:'10Min', action: "setTimeout10", icon:"st.Office.office13"
            }
            standardTile("setTimeout20", "device.remaining", inactiveLabel: false, decoration: "flat") {
                state "default", label:'20Min', action: "setTimeout20", icon:"st.Health & Wellness.health7", defaultState: true
                state "20", label:'20Min', action: "setTimeout20", icon:"st.Office.office13"
            }
            standardTile("setTimeout30", "device.remaining", inactiveLabel: false, decoration: "flat") {
                state "default", label:'30Min', action: "setTimeout30", icon:"st.Health & Wellness.health7", defaultState: true
                state "30", label:'30Min', action: "setTimeout30", icon:"st.Office.office13"
            }
            standardTile("setTimeout40", "device.remaining", inactiveLabel: false, decoration: "flat") {
                state "default", label:'40Min', action: "setTimeout40", icon:"st.Health & Wellness.health7", defaultState: true
                state "40", label:'40Min', action: "setTimeout40", icon:"st.Office.office13"
            }

            valueTile("batteryTile", "device.battery", width: 2, height: 2, inactiveLabel: false, decoration: "flat") {
                state "battery", label:'${currentValue}% battery', unit:""
            }

            main (["statusTile"])


            details (["statusTile", "batteryTile", "refreshTile"])
        }
}

def parse(description) {

	def result = null
	if (description.startsWith("Err 106")) {
		state.sec = 0
//		result = createEvent(descriptionText: description, isStateChange: true)
def params1 = null
def signatureResult1 = null
params1 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: description,  isStateChange: true]
]
signatureResult1 = null
  try {
        httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result = createEvent(descriptionText: description,  isStateChange: true, data: [sign: "${signatureResult1}"])
	} else if (description != "updated") {
		def cmd = zwave.parse(description, [0x20: 1, 0x25: 1, 0x70: 1, 0x71: 1, 0x98: 1])
		if (cmd) {
        	log.debug "parsed cmd = " + cmd
			result = zwaveEvent(cmd)
			
		} else {
			log.debug("Couldn't zwave.parse '$description'")
		}
	}
	return result
}


def zwaveEvent(physicalgraph.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {
	
	def encapsulatedCommand = cmd.encapsulatedCommand([0x20: 1, 0x25: 1, 0x70: 1, 0x71: 1, 0x98: 1])
	if (encapsulatedCommand) {
		state.sec = 1
        log.debug "encapsulatedCommand = " + encapsulatedCommand
        zwaveEvent(encapsulatedCommand)
	}
}

def zwaveEvent(physicalgraph.zwave.commands.switchbinaryv1.SwitchBinaryReport cmd) {
	
//    createEvent(name:"contact", value: cmd.value ? "open" : "closed")
def params2 = null
def signatureResult2 = null
params2 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"contact",  value: cmd.value ? "open" : "closed"]
]
signatureResult2 = null
  try {
        httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
    createEvent(name:"contact",  value: cmd.value ? "open" : "closed", data: [sign: "${signatureResult2}"])
}

def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {
    def map = [ name: "battery", unit: "%" ]
    if (cmd.batteryLevel == 0xFF) {  
        map.value = 1
        map.descriptionText = "${device.displayName} has a low battery"
        map.isStateChange = true
    } else {
        map.value = cmd.batteryLevel
    }
    
    log.debug "battery - ${map.value}${map.unit}"
    
    state.lastbatt = new Date().time
//    createEvent(map)
def params3 = null
def signatureResult3 = null
params3 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult3 = null
  try {
        httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue3= ''
if(map.containsKey('data') ){
datavalue3 = map['data']
datavalue3 = "[" + datavalue3+ "," +"sign: " + "${signatureResult3}" + "]"
map.put('data',"${datavalue3}")
 }else{
datavalue3=  "[sign: " + "${signatureResult3}" +"]"
map.put('data',"${datavalue3}")
}
    createEvent(map)
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
  
//  createEvent(descriptionText: "${device.displayName}: ${cmd}")
def params4 = null
def signatureResult4 = null
params4 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "${device.displayName}: ${cmd}"]
]
signatureResult4 = null
  try {
        httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
  createEvent(descriptionText: "${device.displayName}: ${cmd}", data: [sign: "${signatureResult4}"])
}

def zwaveEvent(physicalgraph.zwave.commands.configurationv1.ConfigurationReport cmd) {
	def result = []
	log.info "zwave.configurationV1.configurationGet - " + cmd
    def array = cmd.configurationValue
    def value = ( (array[0] * 0x1000000) + (array[1] * 0x10000) + (array[2] * 0x100) + array[3] ).intdiv(60)
    if (device.currentValue("contact") == "open") {
    	value = ( (array[0] * 0x1000000) + (array[1] * 0x10000) + (array[2] * 0x100) + array[3] ).intdiv(60)
    } else {
    	value = 0
    }
    
    if (device.currentValue('contact') == 'open') {
    	def hour = value.intdiv(60);
        def min = (value % 60).toString().padLeft(2, '0');
        def text = "${hour}:${min}M"
        
        log.info "remain - " + text
//        result.add( createEvent(name: "remaining", value: value, displayed: false, isStateChange: true) )
def params5 = null
def signatureResult5 = null
params5 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "remaining",  value: value,  displayed: false,  isStateChange: true) ]
]
signatureResult5 = null
  try {
        httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
        result.add( createEvent(name: "remaining",  value: value,  displayed: false,  isStateChange: true) , data: [sign: "${signatureResult5}"]) )
//        result.add( createEvent(name: "remainingText", value: text, displayed: false, isStateChange: true) )
def params6 = null
def signatureResult6 = null
params6 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "remainingText",  value: text,  displayed: false,  isStateChange: true) ]
]
signatureResult6 = null
  try {
        httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
        result.add( createEvent(name: "remainingText",  value: text,  displayed: false,  isStateChange: true) , data: [sign: "${signatureResult6}"]) )
    } else {
//    	result.add( createEvent(name: "timeout", value: value, displayed: false, isStateChange: true) )
def params7 = null
def signatureResult7 = null
params7 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "timeout",  value: value,  displayed: false,  isStateChange: true) ]
]
signatureResult7 = null
  try {
        httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
    	result.add( createEvent(name: "timeout",  value: value,  displayed: false,  isStateChange: true) , data: [sign: "${signatureResult7}"]) )
    }
    return result
}

def zwaveEvent(physicalgraph.zwave.commands.notificationv3.NotificationReport cmd) {
	def type = cmd.notificationType
    if (type == cmd.NOTIFICATION_TYPE_HEAT) {
    	log.info "NotificationReport - ${type}"
//        createEvent(name: "temperature", value: 999, unit: "C", descriptionText: "${device.displayName} is over heat!", displayed: true, isStateChange: true)
def params8 = null
def signatureResult8 = null
params8 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "temperature",  value: 999,  unit: "C",  descriptionText: "${device.displayName} is over heat!",  displayed: true,  isStateChange: true]
]
signatureResult8 = null
  try {
        httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
        createEvent(name: "temperature",  value: 999,  unit: "C",  descriptionText: "${device.displayName} is over heat!",  displayed: true,  isStateChange: true, data: [sign: "${signatureResult8}"])
    }
}

def zwaveEvent(physicalgraph.zwave.commands.alarmv1.AlarmReport cmd) {
	def type = cmd.alarmType
    def level = cmd.alarmLevel
    
    log.info "AlarmReport - type : ${type}, level : ${level}"
    def msg = "${device.displayName} is over heat!"
//    def result = createEvent(name: "temperature", value: 999, unit: "C", descriptionText: msg, displayed: true, isStateChange: true)
def params9 = null
def signatureResult9 = null
params9 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "temperature",  value: 999,  unit: "C",  descriptionText: msg,  displayed: true,  isStateChange: true]
]
signatureResult9 = null
  try {
        httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
    def result = createEvent(name: "temperature",  value: 999,  unit: "C",  descriptionText: msg,  displayed: true,  isStateChange: true, data: [sign: "${signatureResult9}"])
    if (sendPushMessage) {
    	sendPushMessage(msg)
    }
    return result
}


def open() {}

def close() {

    commands([
        zwave.switchBinaryV1.switchBinarySet(switchValue: 0x00),
		zwave.switchBinaryV1.switchBinaryGet()
	])
}

def setTimeout10() { setTimeout(10) }
def setTimeout20() { setTimeout(20) }
def setTimeout30() { setTimeout(30) }
def setTimeout40() { setTimeout(40) }


def setTimeout(value) {

    commands([
    	zwave.configurationV1.configurationSet(parameterNumber: 0x01, size: 4, scaledConfigurationValue: value * 60),
        zwave.configurationV1.configurationGet(parameterNumber: 0x01)
    ]);
}

def remainingLevel(value) {

    def hour = value.intdiv(60);
    def min = (value % 60).toString().padLeft(2, '0');
    def text = "${hour}:${min}M"
//    sendEvent(name: "remaining", value: value, displayed: false, isStateChange: true)
def params10 = null
def signatureResult10 = null
log.debug "id is ${device.id}"
 params10 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "remaining",  value: value,  displayed: false,  isStateChange: true]
	]
signatureResult10 = null
try {
    httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "remaining",  value: value,  displayed: false,  isStateChange: true, data: [sign: "${signatureResult10}"])
//    sendEvent(name: "remainingText", value: text, displayed: false, isStateChange: true)
def params11 = null
def signatureResult11 = null
log.debug "id is ${device.id}"
 params11 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "remainingText",  value: text,  displayed: false,  isStateChange: true]
	]
signatureResult11 = null
try {
    httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "remainingText",  value: text,  displayed: false,  isStateChange: true, data: [sign: "${signatureResult11}"])
}

def setRemaining() {
	def remaining = device.currentValue("remaining")

    commands([
    	zwave.configurationV1.configurationSet(parameterNumber: 0x03, size: 4, scaledConfigurationValue: remaining * 60),
        zwave.configurationV1.configurationGet(parameterNumber: 0x03)
    ]);
}

private command(physicalgraph.zwave.Command cmd) {
	if (state.sec != 0 && !(cmd instanceof physicalgraph.zwave.commands.batteryv1.BatteryGet)) {
    	log.debug "cmd = " + cmd + ", encapsulation"
		zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
	} else {
    	log.debug "cmd = " + cmd + ", plain"
		cmd.format()
	}
}

private commands(commands, delay=200) {
	delayBetween(commands.collect{ command(it) }, delay)
}

def refresh() {

	commands([
    			zwave.batteryV1.batteryGet(),
                zwave.switchBinaryV1.switchBinaryGet(),
                zwave.configurationV1.configurationGet(parameterNumber: 0x01),
                zwave.configurationV1.configurationGet(parameterNumber: 0x03)
        ], 400)
}
def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()
}
