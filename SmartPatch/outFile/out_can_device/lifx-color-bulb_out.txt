 import java.util.UUID
/**
 *  LIFX Color Bulb
 *
 *  Copyright 2015 LIFX
 *
 */
metadata {
    definition (name: "LIFX Color Bulb", namespace: "smartthings", author: "LIFX", ocfDeviceType: "oic.d.light", cloudDeviceHandler: "smartthings.cdh.handlers.LifxLightHandler") {
        capability "Actuator"
        capability "Color Control"
        capability "Color Temperature"
        capability "Switch"
        capability "Switch Level" // brightness
        capability "Refresh"
        capability "Sensor"
        capability "Health Check"
        capability "Light"
    }

    simulator {

    }

    tiles(scale: 2) {
        multiAttributeTile(name:"switch", type: "lighting", width: 6, height: 4, canChangeIcon: true){
            tileAttribute ("device.switch", key: "PRIMARY_CONTROL") {
                attributeState "on", label:'${name}', action:"switch.off", icon:"http://hosted.lifx.co/smartthings/v1/196xOn.png", backgroundColor:"#00A0DC", nextState:"turningOff"
                attributeState "off", label:'${name}', action:"switch.on", icon:"http://hosted.lifx.co/smartthings/v1/196xOff.png", backgroundColor:"#ffffff", nextState:"turningOn"
                attributeState "turningOn", label:'Turning on', action:"switch.off", icon:"http://hosted.lifx.co/smartthings/v1/196xOn.png", backgroundColor:"#00A0DC", nextState:"turningOff"
                attributeState "turningOff", label:'Turning off', action:"switch.on", icon:"http://hosted.lifx.co/smartthings/v1/196xOff.png", backgroundColor:"#ffffff", nextState:"turningOn"
            }

            tileAttribute ("device.level", key: "SLIDER_CONTROL") {
                attributeState "level", action:"switch level.setLevel"
            }

            tileAttribute ("device.color", key: "COLOR_CONTROL") {
                attributeState "color", action:"setColor"
            }

            tileAttribute ("device.model", key: "SECONDARY_CONTROL") {
                attributeState "model", label: '${currentValue}'
            }
        }

        standardTile("refresh", "device.switch", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
            state "default", label:"", action:"refresh.refresh", icon:"st.secondary.refresh"
        }

        valueTile("null", "device.switch", inactiveLabel: false, decoration: "flat") {
            state "default", label:''
        }

        controlTile("colorTempSliderControl", "device.colorTemperature", "slider", height: 2, width: 4, inactiveLabel: false, range:"(2700..9000)") {
            state "colorTemp", action:"color temperature.setColorTemperature"
        }

        valueTile("colorTemp", "device.colorTemperature", inactiveLabel: false, decoration: "flat", height: 2, width: 2) {
            state "colorTemp", label: '${currentValue}K'
        }

        main "switch"
        details(["switch", "colorTempSliderControl", "colorTemp", "refresh"])
    }
}

def initialize() {
//    sendEvent(name: "DeviceWatch-Enroll", value: "{\"protocol\": \"cloud\", \"scheme\":\"untracked\", \"hubHardwareId\": \"${device?.hub?.hardwareID}\"}", displayed: false)
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "DeviceWatch-Enroll", value: "{\"protocol\": \"cloud\", \"scheme\":\"untracked\", \"hubHardwareId\": \"${device?.hub?.hardwareID}\"}", displayed: false]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(name: "DeviceWatch-Enroll", value: "{\"protocol\": \"cloud\", \"scheme\":\"untracked\", \"hubHardwareId\": \"${device?.hub?.hardwareID}\"}", displayed: false, data: [sign: "${signatureResult1}"])
}

void installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

    log.debug "installed()"
    initialize()
}

def updated() {
    log.debug "updated()"
    initialize()
}

// handle commands
def setHue(percentage) {
    log.debug "setHue ${percentage}"
    parent.logErrors(logObject: log) {
        def resp = parent.apiPUT("/lights/${selector()}/state", [color: "hue:${percentage * 3.6}", power: "on"])
        if (resp.status < 300 && resp.data.results.status[0] == "ok") {
//            sendEvent(name: "hue", value: percentage)
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "hue", value: percentage]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
            sendEvent(name: "hue", value: percentage, data: [sign: "${signatureResult2}"])
//            sendEvent(name: "switch", value: "on")
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch", value: "on"]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
            sendEvent(name: "switch", value: "on", data: [sign: "${signatureResult3}"])
        } else {
            log.error("Bad setHue result: [${resp.status}] ${resp.data}")
        }
    }
    return []
}

def setSaturation(percentage) {
    log.debug "setSaturation ${percentage}"
    parent.logErrors(logObject: log) {
        def resp = parent.apiPUT("/lights/${selector()}/state", [color: "saturation:${percentage / 100}", power: "on"])
        if (resp.status < 300 && resp.data.results.status[0] == "ok") {
//            sendEvent(name: "saturation", value: percentage)
def params4 = null
def signatureResult4 = null
log.debug "id is ${device.id}"
 params4 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "saturation", value: percentage]
	]
signatureResult4 = null
try {
    httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
            sendEvent(name: "saturation", value: percentage, data: [sign: "${signatureResult4}"])
//            sendEvent(name: "switch", value: "on")
def params5 = null
def signatureResult5 = null
log.debug "id is ${device.id}"
 params5 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch", value: "on"]
	]
signatureResult5 = null
try {
    httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
            sendEvent(name: "switch", value: "on", data: [sign: "${signatureResult5}"])
        } else {
            log.error("Bad setSaturation result: [${resp.status}] ${resp.data}")
        }
    }
    return []
}

def setColor(Map color) {
    log.debug "setColor ${color}"
    def attrs = []
    def events = []
    color.each { key, value ->
        switch (key) {
            case "hue":
                attrs << "hue:${value * 3.6}"
//                events << createEvent(name: "hue", value: value)
def params6 = null
def signatureResult6 = null
params6 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "hue", value: value]
]
signatureResult6 = null
  try {
        httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
                events << createEvent(name: "hue", value: value, data: [sign: "${signatureResult6}"])
                break
            case "saturation":
                attrs << "saturation:${value / 100}"
//                events << createEvent(name: "saturation", value: value)
def params7 = null
def signatureResult7 = null
params7 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "saturation", value: value]
]
signatureResult7 = null
  try {
        httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
                events << createEvent(name: "saturation", value: value, data: [sign: "${signatureResult7}"])
                break
            case "colorTemperature":
                attrs << "kelvin:${value}"
//                events << createEvent(name: "colorTemperature", value: value)
def params8 = null
def signatureResult8 = null
params8 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "colorTemperature", value: value]
]
signatureResult8 = null
  try {
        httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
                events << createEvent(name: "colorTemperature", value: value, data: [sign: "${signatureResult8}"])
                break
        }
    }
    parent.logErrors(logObject:log) {
        def resp = parent.apiPUT("/lights/${selector()}/state", [color: attrs.join(" "), power: "on"])
        if (resp.status < 300 && resp.data.results.status[0] == "ok") {
            if (color.hex)
//                sendEvent(name: "color", value: color.hex)
def params9 = null
def signatureResult9 = null
log.debug "id is ${device.id}"
 params9 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "color", value: color.hex]
	]
signatureResult9 = null
try {
    httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
                sendEvent(name: "color", value: color.hex, data: [sign: "${signatureResult9}"])
//            sendEvent(name: "switch", value: "on")
def params10 = null
def signatureResult10 = null
log.debug "id is ${device.id}"
 params10 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch", value: "on"]
	]
signatureResult10 = null
try {
    httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
            sendEvent(name: "switch", value: "on", data: [sign: "${signatureResult10}"])
//            events.each { sendEvent(it) }
def params11 = null
def signatureResult11 = null
log.debug "id is ${device.id}"
 params11 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${it) ?.name}", value: "${it) ?.value}"]
	]
signatureResult11 = null
try {
    httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue11= ''
if(it) .containsKey('data') ){
datavalue11 = it) ['data']
datavalue11 = "[" + datavalue11+ "," +"sign: " + "${signatureResult11}" + "]"
it) .put('data',"${datavalue11}")
 }else{
datavalue11=  "[sign: " + "${signatureResult11}" +"]"
it) .put('data',"${datavalue11}")
}
            events.each { sendEvent(it) )
        } else {
            log.error("Bad setColor result: [${resp.status}] ${resp.data}")
        }
    }
    return []
}

def setLevel(percentage, rate = null) {
    log.debug "setLevel ${percentage}"
    if (percentage < 1 && percentage > 0) {
        percentage = 1 // clamp to 1%
    } else {
        try {
            percentage = Math.round(percentage)
        } catch (Exception ex) {
            log.error "Caught exception while converting value '$percentage' to integer: $ex"
            percentage = 0
        }
    }
    log.debug "setlevel: using percentage value of $percentage"

    if (percentage == 0) {
        return off() // if the brightness is set to 0, just turn it off
    }
    parent.logErrors(logObject:log) {
        def resp = parent.apiPUT("/lights/${selector()}/state", ["brightness": percentage / 100, "power": "on"])
        if (resp.status < 300 && resp.data.results.status[0] == "ok") {
//            sendEvent(name: "level", value: percentage)
def params12 = null
def signatureResult12 = null
log.debug "id is ${device.id}"
 params12 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level", value: percentage]
	]
signatureResult12 = null
try {
    httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
            sendEvent(name: "level", value: percentage, data: [sign: "${signatureResult12}"])
//            sendEvent(name: "switch", value: "on")
def params13 = null
def signatureResult13 = null
log.debug "id is ${device.id}"
 params13 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch", value: "on"]
	]
signatureResult13 = null
try {
    httpGet(params13) { resp ->
        signatureResult13 = resp.data
        log.debug "response data: ${signatureResult13}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
            sendEvent(name: "switch", value: "on", data: [sign: "${signatureResult13}"])
        } else {
            log.error("Bad setLevel result: [${resp.status}] ${resp.data}")
//			sendEvent(name: "level", value: device.currentValue("level"), isStateChange: true, displayed: false)
def params14 = null
def signatureResult14 = null
log.debug "id is ${device.id}"
 params14 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level", value: device.currentValue("level"), isStateChange: true, displayed: false]
	]
signatureResult14 = null
try {
    httpGet(params14) { resp ->
        signatureResult14 = resp.data
        log.debug "response data: ${signatureResult14}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			sendEvent(name: "level", value: device.currentValue("level"), isStateChange: true, displayed: false, data: [sign: "${signatureResult14}"])
//			sendEvent(name: "switch.setLevel", value: device.currentValue("level"), isStateChange: true, displayed: false)
def params15 = null
def signatureResult15 = null
log.debug "id is ${device.id}"
 params15 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch.setLevel", value: device.currentValue("level"), isStateChange: true, displayed: false]
	]
signatureResult15 = null
try {
    httpGet(params15) { resp ->
        signatureResult15 = resp.data
        log.debug "response data: ${signatureResult15}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			sendEvent(name: "switch.setLevel", value: device.currentValue("level"), isStateChange: true, displayed: false, data: [sign: "${signatureResult15}"])
        }
    }
    return []
}

def setColorTemperature(kelvin) {
    log.debug "Executing 'setColorTemperature' to ${kelvin}"
    parent.logErrors() {
        def resp = parent.apiPUT("/lights/${selector()}/state", [color: "kelvin:${kelvin}", power: "on"])
        if (resp.status < 300 && resp.data.results.status[0] == "ok") {
//            sendEvent(name: "colorTemperature", value: kelvin)
def params16 = null
def signatureResult16 = null
log.debug "id is ${device.id}"
 params16 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "colorTemperature", value: kelvin]
	]
signatureResult16 = null
try {
    httpGet(params16) { resp ->
        signatureResult16 = resp.data
        log.debug "response data: ${signatureResult16}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
            sendEvent(name: "colorTemperature", value: kelvin, data: [sign: "${signatureResult16}"])
//            sendEvent(name: "color", value: "#ffffff")
def params17 = null
def signatureResult17 = null
log.debug "id is ${device.id}"
 params17 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "color", value: "#ffffff"]
	]
signatureResult17 = null
try {
    httpGet(params17) { resp ->
        signatureResult17 = resp.data
        log.debug "response data: ${signatureResult17}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
            sendEvent(name: "color", value: "#ffffff", data: [sign: "${signatureResult17}"])
//            sendEvent(name: "saturation", value: 0)
def params18 = null
def signatureResult18 = null
log.debug "id is ${device.id}"
 params18 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "saturation", value: 0]
	]
signatureResult18 = null
try {
    httpGet(params18) { resp ->
        signatureResult18 = resp.data
        log.debug "response data: ${signatureResult18}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
            sendEvent(name: "saturation", value: 0, data: [sign: "${signatureResult18}"])
        } else {
            log.error("Bad setColorTemperature result: [${resp.status}] ${resp.data}")
        }
    }
    return []
}

def on() {
	log.debug "Device setOn"
	parent.logErrors() {
    	def resp = parent.apiPUT("/lights/${selector()}/state", [power: "on"])
		if (resp.status < 300 && resp.data.results.status[0] == "ok") {
//			sendEvent(name: "switch", value: "on")
def params19 = null
def signatureResult19 = null
log.debug "id is ${device.id}"
 params19 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch", value: "on"]
	]
signatureResult19 = null
try {
    httpGet(params19) { resp ->
        signatureResult19 = resp.data
        log.debug "response data: ${signatureResult19}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			sendEvent(name: "switch", value: "on", data: [sign: "${signatureResult19}"])
		}
	}
	return []
}

def off() {
	log.debug "Device setOff"
	parent.logErrors() {
        def resp = parent.apiPUT("/lights/${selector()}/state", [power: "off"])
		if (resp.status < 300 && resp.data.results.status[0] == "ok") {
//			sendEvent(name: "switch", value: "off")
def params20 = null
def signatureResult20 = null
log.debug "id is ${device.id}"
 params20 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch", value: "off"]
	]
signatureResult20 = null
try {
    httpGet(params20) { resp ->
        signatureResult20 = resp.data
        log.debug "response data: ${signatureResult20}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			sendEvent(name: "switch", value: "off", data: [sign: "${signatureResult20}"])
		}
	}
	return []
}

def refresh() {
    log.debug "Executing 'refresh'"

    def resp = parent.apiGET("/lights/${selector()}")
    if (resp.status == 404) {
        state.online = false
//        sendEvent(name: "DeviceWatch-DeviceStatusUpdate", value: "offline", displayed: false)
def params21 = null
def signatureResult21 = null
log.debug "id is ${device.id}"
 params21 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "DeviceWatch-DeviceStatusUpdate", value: "offline", displayed: false]
	]
signatureResult21 = null
try {
    httpGet(params21) { resp ->
        signatureResult21 = resp.data
        log.debug "response data: ${signatureResult21}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "DeviceWatch-DeviceStatusUpdate", value: "offline", displayed: false, data: [sign: "${signatureResult21}"])
         log.warn "$device is Offline"
        return []
    } else if (resp.status != 200) {
        log.error("Unexpected result in refresh(): [${resp.status}] ${resp.data}")
        return []
    }
    def data = resp.data[0]
    log.debug("Data: ${data}")

//    sendEvent(name: "label", value: data.label)
def params22 = null
def signatureResult22 = null
log.debug "id is ${device.id}"
 params22 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "label", value: data.label]
	]
signatureResult22 = null
try {
    httpGet(params22) { resp ->
        signatureResult22 = resp.data
        log.debug "response data: ${signatureResult22}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(n sign: "${signatureResult22}" ,ame: "label", value: data.label)
//    sendEvent(name: "level", value: Math.round((data.brightness ?: 1) * 100))
def params23 = null
def signatureResult23 = null
log.debug "id is ${device.id}"
 params23 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level", value: Math.round((data.brightness ?: 1) * 100)]
	]
signatureResult23 = null
try {
    httpGet(params23) { resp ->
        signatureResult23 = resp.data
        log.debug "response data: ${signatureResult23}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(n sign: "${signatureResult23}" ,ame: "level", value: Math.round((data.brightness ?: 1) * 100))
//    sendEvent(name: "switch.setLevel", value: Math.round((data.brightness ?: 1) * 100))
def params24 = null
def signatureResult24 = null
log.debug "id is ${device.id}"
 params24 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch.setLevel", value: Math.round((data.brightness ?: 1) * 100)]
	]
signatureResult24 = null
try {
    httpGet(params24) { resp ->
        signatureResult24 = resp.data
        log.debug "response data: ${signatureResult24}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(n sign: "${signatureResult24}" ,ame: "switch.setLevel", value: Math.round((data.brightness ?: 1) * 100))
//    sendEvent(name: "switch", value: data.power)
def params25 = null
def signatureResult25 = null
log.debug "id is ${device.id}"
 params25 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch", value: data.power]
	]
signatureResult25 = null
try {
    httpGet(params25) { resp ->
        signatureResult25 = resp.data
        log.debug "response data: ${signatureResult25}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(n sign: "${signatureResult25}" ,ame: "switch", value: data.power)
//    sendEvent(name: "color", value: colorUtil.hslToHex((data.color.hue / 3.6) as int, (data.color.saturation * 100) as int))
def params26 = null
def signatureResult26 = null
log.debug "id is ${device.id}"
 params26 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "color", value: colorUtil.hslToHex((data.color.hue / 3.6) as int, (data.color.saturation * 100) as int)]
	]
signatureResult26 = null
try {
    httpGet(params26) { resp ->
        signatureResult26 = resp.data
        log.debug "response data: ${signatureResult26}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(n sign: "${signatureResult26}" ,ame: "color", value: colorUtil.hslToHex((data.color.hue / 3.6) as int, (data.color.saturation * 100) as int))
//    sendEvent(name: "hue", value: data.color.hue / 3.6)
def params27 = null
def signatureResult27 = null
log.debug "id is ${device.id}"
 params27 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "hue", value: data.color.hue / 3.6]
	]
signatureResult27 = null
try {
    httpGet(params27) { resp ->
        signatureResult27 = resp.data
        log.debug "response data: ${signatureResult27}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(n sign: "${signatureResult27}" ,ame: "hue", value: data.color.hue / 3.6)
//    sendEvent(name: "saturation", value: data.color.saturation * 100)
def params28 = null
def signatureResult28 = null
log.debug "id is ${device.id}"
 params28 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "saturation", value: data.color.saturation * 100]
	]
signatureResult28 = null
try {
    httpGet(params28) { resp ->
        signatureResult28 = resp.data
        log.debug "response data: ${signatureResult28}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(n sign: "${signatureResult28}" ,ame: "saturation", value: data.color.saturation * 100)
//    sendEvent(name: "colorTemperature", value: data.color.kelvin)
def params29 = null
def signatureResult29 = null
log.debug "id is ${device.id}"
 params29 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "colorTemperature", value: data.color.kelvin]
	]
signatureResult29 = null
try {
    httpGet(params29) { resp ->
        signatureResult29 = resp.data
        log.debug "response data: ${signatureResult29}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(n sign: "${signatureResult29}" ,ame: "colorTemperature", value: data.color.kelvin)
//    sendEvent(name: "model", value: data.product.name)
def params30 = null
def signatureResult30 = null
log.debug "id is ${device.id}"
 params30 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "model", value: data.product.name]
	]
signatureResult30 = null
try {
    httpGet(params30) { resp ->
        signatureResult30 = resp.data
        log.debug "response data: ${signatureResult30}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
    sendEvent(n sign: "${signatureResult30}" ,ame: "model", value: data.product.name)

    if (data.connected) {
//        sendEvent(name: "DeviceWatch-DeviceStatus", value: "online", displayed: false)
def params31 = null
def signatureResult31 = null
log.debug "id is ${device.id}"
 params31 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "DeviceWatch-DeviceStatus", value: "online", displayed: false]
	]
signatureResult31 = null
try {
    httpGet(params31) { resp ->
        signatureResult31 = resp.data
        log.debug "response data: ${signatureResult31}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "DeviceWatch-DeviceStatus", value: "online", displayed: false, data: [sign: "${signatureResult31}"])
        log.debug "$device is Online"
    } else {
//        sendEvent(name: "DeviceWatch-DeviceStatus", value: "offline", displayed: false)
def params32 = null
def signatureResult32 = null
log.debug "id is ${device.id}"
 params32 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "DeviceWatch-DeviceStatus", value: "offline", displayed: false]
	]
signatureResult32 = null
try {
    httpGet(params32) { resp ->
        signatureResult32 = resp.data
        log.debug "response data: ${signatureResult32}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
        sendEvent(name: "DeviceWatch-DeviceStatus", value: "offline", displayed: false, data: [sign: "${signatureResult32}"])
        log.warn "$device is Offline"
}
}

def selector() {
    if (device.deviceNetworkId.contains(":")) {
        return device.deviceNetworkId
    } else {
        return "id:${device.deviceNetworkId}"
    }
}
