 import java.util.UUID
"License"
"AS IS"
import physicalgraph.zigbee.zcl.DataType

metadata {
	definition (name: "ZigBee RGB Bulb", namespace: "smartthings", author: "SmartThings", runLocally: true, minHubCoreVersion: '000.019.00012', executeCommandsLocally: true, ocfDeviceType: "oic.d.light", genericHandler: "Zigbee") {

		capability "Actuator"
		capability "Color Control"
		capability "Configuration"
		capability "Refresh"
		capability "Switch"
		capability "Switch Level"
		capability "Health Check"
		capability "Light"

		
		fingerprint profileId: "0104", inClusters: "0000,0003,0004,0005,0006,0008,0300,0B04,FC0F", outClusters: "0019", manufacturer: "OSRAM", model: "Gardenspot RGB", deviceJoinName: "SYLVANIA Smart Gardenspot mini RGB"
		fingerprint profileId: "0104", inClusters: "0000,0003,0004,0005,0006,0008,0300,0B04,FC0F", outClusters: "0019", manufacturer: "OSRAM", model: "LIGHTIFY Gardenspot RGB", deviceJoinName: "SYLVANIA Smart Gardenspot mini RGB"
		fingerprint profileId: "0104", inClusters: "0000, 0003, 0004, 0005, 0006, 0008, 0300, 0B05, FC01", outClusters: "0019", manufacturer: "LEDVANCE", model: "Outdoor Accent RGB", deviceJoinName: "SYLVANIA Outdoor Accent RGB"
	}

	
	tiles(scale: 2) {
		multiAttributeTile(name:"switch", type: "lighting", width: 6, height: 4, canChangeIcon: true){
			tileAttribute ("device.switch", key: "PRIMARY_CONTROL") {
				attributeState "on", label:'${name}', action:"switch.off", icon:"st.lights.philips.hue-single", backgroundColor:"#00A0DC", nextState:"turningOff"
				attributeState "off", label:'${name}', action:"switch.on", icon:"st.lights.philips.hue-single", backgroundColor:"#ffffff", nextState:"turningOn"
				attributeState "turningOn", label:'${name}', action:"switch.off", icon:"st.lights.philips.hue-single", backgroundColor:"#00A0DC", nextState:"turningOff"
				attributeState "turningOff", label:'${name}', action:"switch.on", icon:"st.lights.philips.hue-single", backgroundColor:"#ffffff", nextState:"turningOn"
			}
			tileAttribute ("device.level", key: "SLIDER_CONTROL") {
				attributeState "level", action:"switch level.setLevel"
			}
			tileAttribute ("device.color", key: "COLOR_CONTROL") {
				attributeState "color", action:"color control.setColor"
			}
		}
		standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "default", label:"", action:"refresh.refresh", icon:"st.secondary.refresh"
		}

		main(["switch"])
		details(["switch", "refresh"])
	}
}


private getATTRIBUTE_HUE() { 0x0000 }
private getATTRIBUTE_SATURATION() { 0x0001 }
private getHUE_COMMAND() { 0x00 }
private getSATURATION_COMMAND() { 0x03 }
private getMOVE_TO_HUE_AND_SATURATION_COMMAND() { 0x06 }
private getCOLOR_CONTROL_CLUSTER() { 0x0300 }


def parse(String description) {
	log.debug "description is $description"

	def event = zigbee.getEvent(description)
	if (event) {
		log.debug event
		if (event.name=="level" && event.value==0) {}
		else {
//			sendEvent(event)
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${event?.name}", value: "${event?.value}"]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue1= ''
if(event.containsKey('data') ){
datavalue1 = event['data']
datavalue1 = "[" + datavalue1+ "," +"sign: " + "${signatureResult1}" + "]"
event.put('data',"${datavalue1}")
 }else{
datavalue1=  "[sign: " + "${signatureResult1}" +"]"
event.put('data',"${datavalue1}")
}
			sendEvent(event)
		}
	}
	else {
		def zigbeeMap = zigbee.parseDescriptionAsMap(description)
		def cluster = zigbee.parse(description)

		if (zigbeeMap?.clusterInt == COLOR_CONTROL_CLUSTER) {
			if(zigbeeMap.attrInt == ATTRIBUTE_HUE){  
				def hueValue = Math.round(zigbee.convertHexToInt(zigbeeMap.value) / 0xfe * 100)
//				sendEvent(name: "hue", value: hueValue, descriptionText: "Color has changed")
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "hue",  value: hueValue,  descriptionText: "Color has changed"]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
				sendEvent(name: "hue",  value: hueValue,  descriptionText: "Color has changed", data: [sign: "${signatureResult2}"])
			}
			else if(zigbeeMap.attrInt == ATTRIBUTE_SATURATION){ 
				def saturationValue = Math.round(zigbee.convertHexToInt(zigbeeMap.value) / 0xfe * 100)
//				sendEvent(name: "saturation", value: saturationValue, descriptionText: "Color has changed", displayed: false)
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "saturation",  value: saturationValue,  descriptionText: "Color has changed",  displayed: false]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
				sendEvent(name: "saturation",  value: saturationValue,  descriptionText: "Color has changed",  displayed: false, data: [sign: "${signatureResult3}"])
			}
		}
		else if (cluster && cluster.clusterId == 0x0006 && cluster.command == 0x07) {
			if (cluster.data[0] == 0x00){
				log.debug "ON/OFF REPORTING CONFIG RESPONSE: $cluster"
//				sendEvent(name: "checkInterval", value: 60 * 12, displayed: false, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID])
def params4 = null
def signatureResult4 = null
log.debug "id is ${device.id}"
 params4 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 60 * 12,  displayed: false,  data: [protocol: "zigbee",  hubHardwareId: device.hub.hardwareID]]
	]
signatureResult4 = null
try {
    httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
				sendEvent(name: "checkInterval",  value: 60 * 12,  displayed: false,  data: [ sign: "${signatureResult4}" ,protocol: "zigbee",  hubHardwareId: device.hub.hardwareID])
			}
			else {
				log.warn "ON/OFF REPORTING CONFIG FAILED- error code:${cluster.data[0]}"
			}
		}
		else {
			log.info "DID NOT PARSE MESSAGE for description : $description"
			log.debug zigbeeMap
		}
	}
}

def on() {
	zigbee.on()
}

def off() {
	zigbee.off()
}

def ping() {
	return zigbee.onOffRefresh()
}

def refresh() {
	zigbee.onOffRefresh() +
	zigbee.levelRefresh() +
	zigbee.readAttribute(COLOR_CONTROL_CLUSTER, ATTRIBUTE_HUE) +
	zigbee.readAttribute(COLOR_CONTROL_CLUSTER, ATTRIBUTE_SATURATION) +
	zigbee.onOffConfig(0, 300) +
	zigbee.levelConfig()
}

def configure() {
	log.debug "Configuring Reporting and Bindings."
	
	
//	sendEvent(name: "checkInterval", value: 3 * 10 * 60 + 1 * 60, displayed: false, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID])
def params5 = null
def signatureResult5 = null
log.debug "id is ${device.id}"
 params5 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 3 * 10 * 60 + 1 * 60,  displayed: false,  data: [protocol: "zigbee",  hubHardwareId: device.hub.hardwareID]]
	]
signatureResult5 = null
try {
    httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "checkInterval",  value: 3 * 10 * 60 + 1 * 60,  displayed: false,  data: [ sign: "${signatureResult5}" ,protocol: "zigbee",  hubHardwareId: device.hub.hardwareID])

	
	refresh()
}

def setLevel(value, rate = null) {
	zigbee.setLevel(value)
}

private getScaledHue(value) {
	zigbee.convertToHexString(Math.round(value * 0xfe / 100.0), 2)
}

private getScaledSaturation(value) {
	zigbee.convertToHexString(Math.round(value * 0xfe / 100.0), 2)
}

def setColor(value){
	log.trace "setColor($value)"
	zigbee.on() +
	zigbee.command(COLOR_CONTROL_CLUSTER, MOVE_TO_HUE_AND_SATURATION_COMMAND,
		getScaledHue(value.hue), getScaledSaturation(value.saturation), "0000") +
	zigbee.readAttribute(COLOR_CONTROL_CLUSTER, ATTRIBUTE_HUE) +
	zigbee.readAttribute(COLOR_CONTROL_CLUSTER, ATTRIBUTE_SATURATION)
}

def setHue(value) {
	zigbee.command(COLOR_CONTROL_CLUSTER, HUE_COMMAND, getScaledHue(value), "00", "0000") +
	zigbee.readAttribute(COLOR_CONTROL_CLUSTER, ATTRIBUTE_HUE)
}

def setSaturation(value) {
	zigbee.command(COLOR_CONTROL_CLUSTER, SATURATION_COMMAND, getScaledSaturation(value), "0000") +
	zigbee.readAttribute(COLOR_CONTROL_CLUSTER, ATTRIBUTE_SATURATION)
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

	if (((device.getDataValue("manufacturer") == "MRVL") && (device.getDataValue("model") == "MZ100")) || (device.getDataValue("manufacturer") == "OSRAM SYLVANIA") || (device.getDataValue("manufacturer") == "OSRAM")) {
		if ((device.currentState("level")?.value == null) || (device.currentState("level")?.value == 0)) {
//			sendEvent(name: "level", value: 100)
def params6 = null
def signatureResult6 = null
log.debug "id is ${device.id}"
 params6 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: 100]
	]
signatureResult6 = null
try {
    httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			sendEvent(name: "level",  value: 100, data: [sign: "${signatureResult6}"])
		}
	}
}
def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
