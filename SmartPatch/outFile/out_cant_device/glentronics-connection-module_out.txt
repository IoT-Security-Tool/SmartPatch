 import java.util.UUID
"License"
"AS IS"

metadata {
	definition (name: "Glentronics Connection Module", namespace: "smartthings", author: "SmartThings", mnmn: "SmartThings", vid: "generic-leak-4") {
		capability "Sensor"
		capability "Water Sensor"
		capability "Battery"
		capability "Power Source"
		capability "Health Check"

		fingerprint mfr:"0084", prod:"0093", model:"0114", deviceJoinName: "Glentronics Water Leak Sensor" 
	}

	tiles (scale: 2){
		multiAttributeTile(name: "water", type: "generic", width: 6, height: 4) {
			tileAttribute("device.water", key: "PRIMARY_CONTROL") {
				attributeState("dry", icon: "st.alarm.water.dry", backgroundColor: "#ffffff")
				attributeState("wet", icon: "st.alarm.water.wet", backgroundColor: "#00A0DC")
			}
		}
		valueTile("battery", "device.battery", inactiveLabel: true, decoration: "flat", width: 2, height: 2) {
			state "battery", label: 'Backup battery: ${currentValue}%', unit: ""
		}
		valueTile("powerSource", "device.powerSource", width: 2, height: 1, inactiveLabel: true, decoration: "flat") {
			state "powerSource", label: 'Power Source: ${currentValue}', backgroundColor: "#ffffff"
		}
		main "water"
		details(["water", "battery", "powerSource"])
	}
}

def parse(String description) {
	def result
	if (description.startsWith("Err")) {
//		result = createEvent(descriptionText:description, displayed:true)
def params1 = null
def signatureResult1 = null
params1 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText:description,  displayed:true]
]
signatureResult1 = null
  try {
        httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result = createEvent(descriptionText:description,  displayed:true, data: [sign: "${signatureResult1}"])
	} else {
		def cmd = zwave.parse(description)
		if (cmd) {
			result = zwaveEvent(cmd)
		}
	}
	log.debug "Parse returned: ${result.inspect()}"
	return result
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

	
//	sendEvent(name: "battery", value: 100, unit: "%")
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "battery",  value: 100,  unit: "%"]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "battery",  value: 100,  unit: "%", data: [sign: "${signatureResult2}"])
//	sendEvent(name: "water", value: "dry")
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "water",  value: "dry"]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "water",  value: "dry", data: [sign: "${signatureResult3}"])
//	sendEvent(name: "powerSource", value: "mains")
def params4 = null
def signatureResult4 = null
log.debug "id is ${device.id}"
 params4 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "powerSource",  value: "mains"]
	]
signatureResult4 = null
try {
    httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "powerSource",  value: "mains", data: [sign: "${signatureResult4}"])
//	sendEvent(name: "checkInterval", value: 2 * 60 * 60 + 2 * 60, displayed: false, data: [protocol: "zwave", hubHardwareId: device.hub.hardwareID, offlinePingable: "1"])
def params5 = null
def signatureResult5 = null
log.debug "id is ${device.id}"
 params5 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 2 * 60 * 60 + 2 * 60,  displayed: false,  data: [protocol: "zwave",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"]]
	]
signatureResult5 = null
try {
    httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "checkInterval",  value: 2 * 60 * 60 + 2 * 60,  displayed: false,  data: [ sign: "${signatureResult5}" ,protocol: "zwave",  hubHardwareId: device.hub.hardwareID,  offlinePingable: "1"])
}

def ping() {
	response(zwave.versionV1.versionGet().format())
}

def getPowerEvent(event) {
	if (event == 0x02) {
//		createEvent(name: "powerSource", value: "battery", descriptionText: "Pump is powered with backup battery")
def params6 = null
def signatureResult6 = null
params6 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "powerSource",  value: "battery",  descriptionText: "Pump is powered with backup battery"]
]
signatureResult6 = null
  try {
        httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		createEvent(name: "powerSource",  value: "battery",  descriptionText: "Pump is powered with backup battery", data: [sign: "${signatureResult6}"])
	} else if (event == 0x03) {
//		createEvent(name: "powerSource", value: "mains", descriptionText: "Pump is powered with AC mains")
def params7 = null
def signatureResult7 = null
params7 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "powerSource",  value: "mains",  descriptionText: "Pump is powered with AC mains"]
]
signatureResult7 = null
  try {
        httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		createEvent(name: "powerSource",  value: "mains",  descriptionText: "Pump is powered with AC mains", data: [sign: "${signatureResult7}"])
	} else if (event == 0x0B) {
//		createEvent(name: "battery", value: 1, unit: "%", descriptionText: "Backup battery critically low")
def params8 = null
def signatureResult8 = null
params8 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "battery",  value: 1,  unit: "%",  descriptionText: "Backup battery critically low"]
]
signatureResult8 = null
  try {
        httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		createEvent(name: "battery",  value: 1,  unit: "%",  descriptionText: "Backup battery critically low", data: [sign: "${signatureResult8}"])
	} else if (event == 0x0D) {
//		createEvent(name: "battery", value: 100, unit: "%", descriptionText: "Backup battery is fully charged")
def params9 = null
def signatureResult9 = null
params9 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "battery",  value: 100,  unit: "%",  descriptionText: "Backup battery is fully charged"]
]
signatureResult9 = null
  try {
        httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		createEvent(name: "battery",  value: 100,  unit: "%",  descriptionText: "Backup battery is fully charged", data: [sign: "${signatureResult9}"])
	}
}

def getManufacturerSpecificEvent(cmd) {
	if (cmd.event == 3) {
		if (cmd.eventParameter[0] == 0) {
//			createEvent(name: "water", value: "dry", descriptionText: "Water alarm has been cleared")
def params10 = null
def signatureResult10 = null
params10 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "water",  value: "dry",  descriptionText: "Water alarm has been cleared"]
]
signatureResult10 = null
  try {
        httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			createEvent(name: "water",  value: "dry",  descriptionText: "Water alarm has been cleared", data: [sign: "${signatureResult10}"])
		} else if (cmd.eventParameter[0] == 2) {
//			createEvent(name: "water", value: "wet", descriptionText: "High water alarm")
def params11 = null
def signatureResult11 = null
params11 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "water",  value: "wet",  descriptionText: "High water alarm"]
]
signatureResult11 = null
  try {
        httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			createEvent(name: "water",  value: "wet",  descriptionText: "High water alarm", data: [sign: "${signatureResult11}"])
		}
	}
}

def zwaveEvent(physicalgraph.zwave.commands.notificationv3.NotificationReport cmd) {
	log.debug "NotificationReport: ${cmd}"
	if (cmd.notificationType == 8) {
		getPowerEvent(cmd.event)
	} else if (cmd.notificationType == 9) {
		getManufacturerSpecificEvent(cmd)
	}
}

def zwaveEvent(physicalgraph.zwave.commands.versionv1.VersionReport cmd) {
//	createEvent(descriptionText: "Device has responded to ping()")
def params12 = null
def signatureResult12 = null
params12 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "Device has responded to ping()"]
]
signatureResult12 = null
  try {
        httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(descriptionText: "Device has responded to ping()", data: [sign: "${signatureResult12}"])
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
	log.warn "Unhandled command: ${cmd}"
//	createEvent(descriptionText: "Unhandled event came in")
def params13 = null
def signatureResult13 = null
params13 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "Unhandled event came in"]
]
signatureResult13 = null
  try {
        httpGet(params13) { resp ->
        signatureResult13 = resp.data
        log.debug "response data: ${signatureResult13}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	createEvent(descriptionText: "Unhandled event came in", data: [sign: "${signatureResult13}"])
}
