 import java.util.UUID
"License"
"AS IS"

metadata {
	
	definition (name: "Fibaro Dimmer", namespace: "smartthings", author: "SmartThings") {
		capability "Switch Level"
		capability "Actuator"
		capability "Switch"
		capability "Polling"
		capability "Refresh"
		capability "Sensor"
                        
        command		"resetParams2StDefaults"
        command		"listCurrentParams"
        command		"updateZwaveParam"

        fingerprint deviceId: "0x1101", inClusters: "0x72,0x86,0x70,0x85,0x8E,0x26,0x7A,0x27,0x73,0xEF,0x26,0x2B", deviceJoinName: "Fibaro Dimmer Switch"
	}

	simulator {
		status "on":  "command: 2003, payload: FF"
		status "off": "command: 2003, payload: 00"
		status "09%": "command: 2003, payload: 09"
		status "10%": "command: 2003, payload: 0A"
		status "33%": "command: 2003, payload: 21"
		status "66%": "command: 2003, payload: 42"
		status "99%": "command: 2003, payload: 63"

		
		reply "2001FF,delay 5000,2602": "command: 2603, payload: FF"
		reply "200100,delay 5000,2602": "command: 2603, payload: 00"
		reply "200119,delay 5000,2602": "command: 2603, payload: 19"
		reply "200132,delay 5000,2602": "command: 2603, payload: 32"
		reply "20014B,delay 5000,2602": "command: 2603, payload: 4B"
		reply "200163,delay 5000,2602": "command: 2603, payload: 63"
	}

	tiles {
		standardTile("switch", "device.switch", width: 2, height: 2, canChangeIcon: true) {
			state "on", label:'${name}', action:"switch.off", icon:"st.switches.switch.on", backgroundColor:"#00a0dc", nextState:"turningOff"
			state "off", label:'${name}', action:"switch.on", icon:"st.switches.switch.off", backgroundColor:"#ffffff", nextState:"turningOn"
			state "turningOn", label:'${name}', action:"switch.off", icon:"st.switches.switch.on", backgroundColor:"#00a0dc", nextState:"turningOff"
			state "turningOff", label:'${name}', action:"switch.on", icon:"st.switches.switch.off", backgroundColor:"#ffffff", nextState:"turningOn"
		}
		standardTile("refresh", "device.switch", inactiveLabel: false, decoration: "flat") {
			state "default", label:"", action:"refresh.refresh", icon:"st.secondary.refresh"
		}
		controlTile("levelSliderControl", "device.level", "slider", height: 1, width: 3, inactiveLabel: false, range:"(0..100)") {
			state "level", action:"switch level.setLevel"
		}

		main(["switch"])
		details(["switch", "refresh", "levelSliderControl"])
	}
}


private getCommandClassVersions() {
	[
		0x26: 1,  
		0x70: 2,  
		0x72: 2   
	]
}

def parse(String description) {
	def item1 = [
		canBeCurrentState: false,
		linkText: getLinkText(device),
		isStateChange: false,
		displayed: false,
		descriptionText: description,
		value:  description
	]
	def result
	def cmd = zwave.parse(description, commandClassVersions)
    
    
    if (cmd) {
//        result = createEvent(cmd, item1)
def params1 = null
def signatureResult1 = null
params1 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${cmd,  item1?.name}", value: "${cmd,  item1?.value}"]
]
signatureResult1 = null
  try {
        httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue1= ''
if(cmd,  item1.containsKey('data') ){
datavalue1 = cmd,  item1['data']
datavalue1 = "[" + datavalue1+ "," +"sign: " + "${signatureResult1}" + "]"
cmd,  item1.put('data',"${datavalue1}")
 }else{
datavalue1=  "[sign: " + "${signatureResult1}" +"]"
cmd,  item1.put('data',"${datavalue1}")
}
        result = createEvent(cmd,  item1)
	}
	else {
		item1.displayed = displayed(description, item1.isStateChange)
		result = [item1]
	}
    
    if(result?.descriptionText)
		log.debug "Parse returned ${result?.descriptionText}"
        
	result

}

//def createEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd, Map item1) {
def params2 = null
def signatureResult2 = null
params2 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.basicv1.BasicReport cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.basicv1.BasicReport cmd,  Map item1) ?.value}"]
]
signatureResult2 = null
  try {
        httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue2= ''
if(physicalgraph.zwave.commands.basicv1.BasicReport cmd,  Map item1) .containsKey('data') ){
datavalue2 = physicalgraph.zwave.commands.basicv1.BasicReport cmd,  Map item1) ['data']
datavalue2 = "[" + datavalue2+ "," +"sign: " + "${signatureResult2}" + "]"
physicalgraph.zwave.commands.basicv1.BasicReport cmd,  Map item1) .put('data',"${datavalue2}")
 }else{
datavalue2=  "[sign: " + "${signatureResult2}" +"]"
physicalgraph.zwave.commands.basicv1.BasicReport cmd,  Map item1) .put('data',"${datavalue2}")
}
def createEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd,  Map item1) ) {
	def result = doCreateEvent(cmd, item1)
	for (int i = 0; i < result.size(); i++) {
		result[i].type = "physical"
	}
	result
}

//def createEvent(physicalgraph.zwave.commands.basicv1.BasicSet cmd, Map item1) {
def params3 = null
def signatureResult3 = null
params3 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.basicv1.BasicSet cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.basicv1.BasicSet cmd,  Map item1) ?.value}"]
]
signatureResult3 = null
  try {
        httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue3= ''
if(physicalgraph.zwave.commands.basicv1.BasicSet cmd,  Map item1) .containsKey('data') ){
datavalue3 = physicalgraph.zwave.commands.basicv1.BasicSet cmd,  Map item1) ['data']
datavalue3 = "[" + datavalue3+ "," +"sign: " + "${signatureResult3}" + "]"
physicalgraph.zwave.commands.basicv1.BasicSet cmd,  Map item1) .put('data',"${datavalue3}")
 }else{
datavalue3=  "[sign: " + "${signatureResult3}" +"]"
physicalgraph.zwave.commands.basicv1.BasicSet cmd,  Map item1) .put('data',"${datavalue3}")
}
def createEvent(physicalgraph.zwave.commands.basicv1.BasicSet cmd,  Map item1) ) {
	def result = doCreateEvent(cmd, item1)
	for (int i = 0; i < result.size(); i++) {
		result[i].type = "physical"
	}
	result
}

//def createEvent(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd, Map item1) {
def params4 = null
def signatureResult4 = null
params4 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd,  Map item1) ?.value}"]
]
signatureResult4 = null
  try {
        httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue4= ''
if(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd,  Map item1) .containsKey('data') ){
datavalue4 = physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd,  Map item1) ['data']
datavalue4 = "[" + datavalue4+ "," +"sign: " + "${signatureResult4}" + "]"
physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd,  Map item1) .put('data',"${datavalue4}")
 }else{
datavalue4=  "[sign: " + "${signatureResult4}" +"]"
physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd,  Map item1) .put('data',"${datavalue4}")
}
def createEvent(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd,  Map item1) ) {
	[]
}

//def createEvent(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd, Map item1) {
def params5 = null
def signatureResult5 = null
params5 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd,  Map item1) ?.value}"]
]
signatureResult5 = null
  try {
        httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue5= ''
if(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd,  Map item1) .containsKey('data') ){
datavalue5 = physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd,  Map item1) ['data']
datavalue5 = "[" + datavalue5+ "," +"sign: " + "${signatureResult5}" + "]"
physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd,  Map item1) .put('data',"${datavalue5}")
 }else{
datavalue5=  "[sign: " + "${signatureResult5}" +"]"
physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd,  Map item1) .put('data',"${datavalue5}")
}
def createEvent(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd,  Map item1) ) {
	[response(zwave.basicV1.basicGet())]
}

//def createEvent(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelSet cmd, Map item1) {
def params6 = null
def signatureResult6 = null
params6 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelSet cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelSet cmd,  Map item1) ?.value}"]
]
signatureResult6 = null
  try {
        httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue6= ''
if(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelSet cmd,  Map item1) .containsKey('data') ){
datavalue6 = physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelSet cmd,  Map item1) ['data']
datavalue6 = "[" + datavalue6+ "," +"sign: " + "${signatureResult6}" + "]"
physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelSet cmd,  Map item1) .put('data',"${datavalue6}")
 }else{
datavalue6=  "[sign: " + "${signatureResult6}" +"]"
physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelSet cmd,  Map item1) .put('data',"${datavalue6}")
}
def createEvent(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelSet cmd,  Map item1) ) {
	def result = doCreateEvent(cmd, item1)
	for (int i = 0; i < result.size(); i++) {
		result[i].type = "physical"
	}
	result
}

//def createEvent(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd, Map item1) {
def params7 = null
def signatureResult7 = null
params7 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd,  Map item1) ?.value}"]
]
signatureResult7 = null
  try {
        httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue7= ''
if(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd,  Map item1) .containsKey('data') ){
datavalue7 = physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd,  Map item1) ['data']
datavalue7 = "[" + datavalue7+ "," +"sign: " + "${signatureResult7}" + "]"
physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd,  Map item1) .put('data',"${datavalue7}")
 }else{
datavalue7=  "[sign: " + "${signatureResult7}" +"]"
physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd,  Map item1) .put('data',"${datavalue7}")
}
def createEvent(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd,  Map item1) ) {
	def result = doCreateEvent(cmd, item1)
	result[0].descriptionText = "${item1.linkText} is ${item1.value}"
	result[0].handlerName = cmd.value ? "statusOn" : "statusOff"
	for (int i = 0; i < result.size(); i++) {
		result[i].type = "digital"
	}
	result
}

//def createEvent(physicalgraph.zwave.Command cmd) {
def params8 = null
def signatureResult8 = null
params8 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.Command cmd) ?.name}", value: "${physicalgraph.zwave.Command cmd) ?.value}"]
]
signatureResult8 = null
  try {
        httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue8= ''
if(physicalgraph.zwave.Command cmd) .containsKey('data') ){
datavalue8 = physicalgraph.zwave.Command cmd) ['data']
datavalue8 = "[" + datavalue8+ "," +"sign: " + "${signatureResult8}" + "]"
physicalgraph.zwave.Command cmd) .put('data',"${datavalue8}")
 }else{
datavalue8=  "[sign: " + "${signatureResult8}" +"]"
physicalgraph.zwave.Command cmd) .put('data',"${datavalue8}")
}
def createEvent(physicalgraph.zwave.Command cmd) ) {
	
	log.debug "Unhandled: ${cmd.toString()}"
	[:]
}

//def createEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {
def params9 = null
def signatureResult9 = null
params9 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) ?.name}", value: "${physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) ?.value}"]
]
signatureResult9 = null
  try {
        httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue9= ''
if(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) .containsKey('data') ){
datavalue9 = physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) ['data']
datavalue9 = "[" + datavalue9+ "," +"sign: " + "${signatureResult9}" + "]"
physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) .put('data',"${datavalue9}")
 }else{
datavalue9=  "[sign: " + "${signatureResult9}" +"]"
physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) .put('data',"${datavalue9}")
}
def createEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) ) {
	log.trace "[DTH] Executing 'zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport)' with cmd = $cmd"
}

def doCreateEvent(physicalgraph.zwave.Command cmd, Map item1) {
	def result = [item1]

	item1.name = "switch"
	item1.value = cmd.value ? "on" : "off"
	item1.handlerName = item1.value
	item1.descriptionText = "${item1.linkText} was turned ${item1.value}"
	item1.canBeCurrentState = true
	item1.isStateChange = isStateChange(device, item1.name, item1.value)
	item1.displayed = item1.isStateChange

	if (cmd.value >= 5) {
		def item2 = new LinkedHashMap(item1)
		item2.name = "level"
		item2.value = (cmd.value == 99 ? 100 : cmd.value) as String
		item2.unit = "%"
		item2.descriptionText = "${item1.linkText} dimmed ${item2.value} %"
		item2.canBeCurrentState = true
		item2.isStateChange = isStateChange(device, item2.name, item2.value)
		item2.displayed = false
		result << item2
	}
	result
}

//def createEvent(physicalgraph.zwave.Command cmd,  Map map) {
def params10 = null
def signatureResult10 = null
params10 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.Command cmd,   Map map) ?.name}", value: "${physicalgraph.zwave.Command cmd,   Map map) ?.value}"]
]
signatureResult10 = null
  try {
        httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue10= ''
if(physicalgraph.zwave.Command cmd,   Map map) .containsKey('data') ){
datavalue10 = physicalgraph.zwave.Command cmd,   Map map) ['data']
datavalue10 = "[" + datavalue10+ "," +"sign: " + "${signatureResult10}" + "]"
physicalgraph.zwave.Command cmd,   Map map) .put('data',"${datavalue10}")
 }else{
datavalue10=  "[sign: " + "${signatureResult10}" +"]"
physicalgraph.zwave.Command cmd,   Map map) .put('data',"${datavalue10}")
}
def createEvent(physicalgraph.zwave.Command cmd,   Map map) ) {
	
	log.debug "UNHANDLED COMMAND $cmd"
}

def on() {
	log.info "on"
	delayBetween([zwave.basicV1.basicSet(value: 0xFF).format(), zwave.switchMultilevelV1.switchMultilevelGet().format()], 5000)
}

def off() {
	delayBetween ([zwave.basicV1.basicSet(value: 0x00).format(), zwave.switchMultilevelV1.switchMultilevelGet().format()], 5000)
}

def setLevel(value) {
    def level = Math.min(value as Integer, 99)
	delayBetween ([zwave.basicV1.basicSet(value: level).format(), zwave.switchMultilevelV1.switchMultilevelGet().format()], 5000)
}

def setLevel(value, duration) {
    def level = Math.min(value as Integer, 99)
	def dimmingDuration = duration < 128 ? duration : 128 + Math.round(duration / 60)
	zwave.switchMultilevelV2.switchMultilevelSet(value: level, dimmingDuration: dimmingDuration).format()
}

def poll() {
	zwave.switchMultilevelV1.switchMultilevelGet().format()
}

def refresh() {
	zwave.switchMultilevelV1.switchMultilevelGet().format()
}

 
def configure() {
	log.debug "Configuring Device..."
	def cmds = []

	
	cmds << zwave.associationV2.associationSet(groupingIdentifier:3, nodeId:[zwaveHubNodeId]).format()


	delayBetween(cmds, 500)
}


//def createEvent(physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd, Map item1) {
def params11 = null
def signatureResult11 = null
params11 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd,  Map item1) ?.value}"]
]
signatureResult11 = null
  try {
        httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue11= ''
if(physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd,  Map item1) .containsKey('data') ){
datavalue11 = physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd,  Map item1) ['data']
datavalue11 = "[" + datavalue11+ "," +"sign: " + "${signatureResult11}" + "]"
physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd,  Map item1) .put('data',"${datavalue11}")
 }else{
datavalue11=  "[sign: " + "${signatureResult11}" +"]"
physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd,  Map item1) .put('data',"${datavalue11}")
}
def createEvent(physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd,  Map item1) ) {

	log.debug "${device.displayName} parameter '${cmd.parameterNumber}' with a byte size of '${cmd.size}' is set to '${cmd.configurationValue}'"

}

 
def updateZwaveParam(params) {
	if ( params ) {
        def pNumber = params.paramNumber
        def pSize	= params.size
        def pValue	= [params.value]
        log.debug "Make sure device is awake and in recieve mode"
        log.debug "Updating ${device.displayName} parameter number '${pNumber}' with value '${pValue}' with size of '${pSize}'"

		def cmds = []
        cmds << zwave.configurationV1.configurationSet(configurationValue: pValue, parameterNumber: pNumber, size: pSize).format()
        cmds << zwave.configurationV1.configurationGet(parameterNumber: pNumber).format()
        delayBetween(cmds, 1000)        
    }
}

 
def resetParams2StDefaults() {
	log.debug "Resetting ${device.displayName} parameters to SmartThings compatible defaults"
	def cmds = []
	cmds << zwave.configurationV1.configurationSet(configurationValue: [255], parameterNumber: 1,  size: 1).format()
    cmds << zwave.configurationV1.configurationSet(configurationValue: [0],   parameterNumber: 6,  size: 1).format()
    cmds << zwave.configurationV1.configurationSet(configurationValue: [1],   parameterNumber: 7,  size: 1).format()
    cmds << zwave.configurationV1.configurationSet(configurationValue: [1],   parameterNumber: 8,  size: 1).format()
    cmds << zwave.configurationV1.configurationSet(configurationValue: [5],   parameterNumber: 9,  size: 1).format()
    cmds << zwave.configurationV1.configurationSet(configurationValue: [1],   parameterNumber: 10, size: 1).format()
    cmds << zwave.configurationV1.configurationSet(configurationValue: [1],   parameterNumber: 11, size: 1).format()
    cmds << zwave.configurationV1.configurationSet(configurationValue: [99],  parameterNumber: 12, size: 1).format()
    cmds << zwave.configurationV1.configurationSet(configurationValue: [2],   parameterNumber: 13, size: 1).format()
    cmds << zwave.configurationV1.configurationSet(configurationValue: [0],   parameterNumber: 14, size: 1).format()
    cmds << zwave.configurationV1.configurationSet(configurationValue: [1],   parameterNumber: 15, size: 1).format()
    cmds << zwave.configurationV1.configurationSet(configurationValue: [1],   parameterNumber: 16, size: 1).format()
    cmds << zwave.configurationV1.configurationSet(configurationValue: [0],   parameterNumber: 17, size: 1).format()
    cmds << zwave.configurationV1.configurationSet(configurationValue: [0],   parameterNumber: 18, size: 1).format()
    cmds << zwave.configurationV1.configurationSet(configurationValue: [0],   parameterNumber: 19, size: 1).format()
    
    
    
    cmds << zwave.configurationV1.configurationSet(configurationValue: [3],   parameterNumber: 30, size: 1).format()
    cmds << zwave.configurationV1.configurationSet(configurationValue: [600],   parameterNumber: 39, size: 1).format()
    
    
    cmds << zwave.configurationV1.configurationSet(configurationValue: [0],   parameterNumber: 41, size: 1).format()
    
    delayBetween(cmds, 500)
}

 "Fibaro Tweaker"
def listCurrentParams() {
	log.debug "Listing of current parameter settings of ${device.displayName}"
    def cmds = []
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 1).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 6).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 7).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 8).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 9).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 10).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 11).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 12).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 13).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 14).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 15).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 16).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 17).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 18).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 19).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 20).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 30).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 39).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 40).format()
    cmds << zwave.configurationV1.configurationGet(parameterNumber: 41).format()
    
	delayBetween(cmds, 500)
}
def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()
}
