 import java.util.UUID
"License"
"AS IS"

 metadata {

	definition (name: "Fibaro RGBW Controller", namespace: "smartthings", author: "Todd Wackford") {
		capability "Switch Level"
		capability "Actuator"
		capability "Switch"
		capability "Polling"
		capability "Refresh"
		capability "Sensor"
		capability "Configuration"
		capability "Color Control"
		capability "Power Meter"

		command "getDeviceData"
		command "softwhite"
		command "daylight"
		command "warmwhite"
		command "red"
		command "green"
		command "blue"
		command "cyan"
		command "magenta"
		command "orange"
		command "purple"
		command "yellow"
		command "white"
		command "fireplace"
		command "storm"
		command "deepfade"
		command "litefade"
		command "police"
		command "setAdjustedColor"
		command "setWhiteLevel"
		command "test"

		attribute "whiteLevel", "string"

		fingerprint deviceId: "0x1101", inClusters: "0x27,0x72,0x86,0x26,0x60,0x70,0x32,0x31,0x85,0x33", deviceJoinName: "Fibaro Light"
	}

	simulator {
		status "on":	"command: 2003, payload: FF"
		status "off": "command: 2003, payload: 00"
		status "09%": "command: 2003, payload: 09"
		status "10%": "command: 2003, payload: 0A"
		status "33%": "command: 2003, payload: 21"
		status "66%": "command: 2003, payload: 42"
		status "99%": "command: 2003, payload: 63"

		
		reply "2001FF,delay 5000,2602": "command: 2603, payload: FF"
		reply "200100,delay 5000,2602": "command: 2603, payload: 00"
		reply "200119,delay 5000,2602": "command: 2603, payload: 19"
		reply "200132,delay 5000,2602": "command: 2603, payload: 32"
		reply "20014B,delay 5000,2602": "command: 2603, payload: 4B"
		reply "200163,delay 5000,2602": "command: 2603, payload: 63"
	}

	tiles {
		controlTile("rgbSelector", "device.color", "color", height: 3, width: 3, inactiveLabel: false) {
			state "color", action:"setAdjustedColor"
		}
		controlTile("levelSliderControl", "device.level", "slider", height: 1, width: 2, inactiveLabel: false, range:"(0..100)") {
			state "level", action:"switch level.setLevel"
		}
		controlTile("whiteSliderControl", "device.whiteLevel", "slider", height: 1, width: 3, inactiveLabel: false) {
			state "whiteLevel", action:"setWhiteLevel", label:'White Level'
		}
		standardTile("switch", "device.switch", width: 1, height: 1, canChangeIcon: true) {
			state "on", label:'${name}', action:"switch.off", icon:"st.illuminance.illuminance.bright", backgroundColor:"#00A0DC", nextState:"turningOff"
			state "off", label:'${name}', action:"switch.on", icon:"st.illuminance.illuminance.dark", backgroundColor:"#ffffff", nextState:"turningOn"
			state "turningOn", label:'${name}', icon:"st.illuminance.illuminance.bright", backgroundColor:"#00A0DC"
			state "turningOff", label:'${name}', icon:"st.illuminance.illuminance.dark", backgroundColor:"#ffffff"
		}
		valueTile("power", "device.power", decoration: "flat") {
			state "power", label:'${currentValue} W'
		}
		standardTile("configure", "device.configure", inactiveLabel: false, decoration: "flat") {
			state "configure", label:'', action:"configuration.configure", icon:"st.secondary.configure"
		}
		standardTile("refresh", "device.switch", height: 1, inactiveLabel: false, decoration: "flat") {
			state "default", label:"", action:"refresh.refresh", icon:"st.secondary.refresh"
		}
		standardTile("softwhite", "device.softwhite", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offsoftwhite", label:"soft white", action:"softwhite", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "onsoftwhite", label:"soft white", action:"softwhite", icon:"st.illuminance.illuminance.bright", backgroundColor:"#FFF1E0"
		}
		standardTile("daylight", "device.daylight", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offdaylight", label:"daylight", action:"daylight", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "ondaylight", label:"daylight", action:"daylight", icon:"st.illuminance.illuminance.bright", backgroundColor:"#FFFFFB"
		}
		standardTile("warmwhite", "device.warmwhite", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offwarmwhite", label:"warm white", action:"warmwhite", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "onwarmwhite", label:"warm white", action:"warmwhite", icon:"st.illuminance.illuminance.bright", backgroundColor:"#FFF4E5"
		}
		standardTile("red", "device.red", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offred", label:"red", action:"red", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "onred", label:"red", action:"red", icon:"st.illuminance.illuminance.bright", backgroundColor:"#FF0000"
		}
		standardTile("green", "device.green", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offgreen", label:"green", action:"green", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "ongreen", label:"green", action:"green", icon:"st.illuminance.illuminance.bright", backgroundColor:"#00FF00"
		}
		standardTile("blue", "device.blue", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offblue", label:"blue", action:"blue", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "onblue", label:"blue", action:"blue", icon:"st.illuminance.illuminance.bright", backgroundColor:"#0000FF"
		}
		standardTile("cyan", "device.cyan", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offcyan", label:"cyan", action:"cyan", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "oncyan", label:"cyan", action:"cyan", icon:"st.illuminance.illuminance.bright", backgroundColor:"#00FFFF"
		}
		standardTile("magenta", "device.magenta", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offmagenta", label:"magenta", action:"magenta", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "onmagenta", label:"magenta", action:"magenta", icon:"st.illuminance.illuminance.bright", backgroundColor:"#FF00FF"
		}
		standardTile("orange", "device.orange", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offorange", label:"orange", action:"orange", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "onorange", label:"orange", action:"orange", icon:"st.illuminance.illuminance.bright", backgroundColor:"#FF6600"
		}
		standardTile("purple", "device.purple", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offpurple", label:"purple", action:"purple", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "onpurple", label:"purple", action:"purple", icon:"st.illuminance.illuminance.bright", backgroundColor:"#BF00FF"
		}
		standardTile("yellow", "device.yellow", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offyellow", label:"yellow", action:"yellow", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "onyellow", label:"yellow", action:"yellow", icon:"st.illuminance.illuminance.bright", backgroundColor:"#FFFF00"
		}
		standardTile("white", "device.white", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offwhite", label:"White", action:"white", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "onwhite", label:"White", action:"white", icon:"st.illuminance.illuminance.bright", backgroundColor:"#FFFFFF"
		}
		standardTile("fireplace", "device.fireplace", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offfireplace", label:"Fire Place", action:"fireplace", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "onfireplace", label:"Fire Place", action:"fireplace", icon:"st.illuminance.illuminance.bright", backgroundColor:"#FFFFFF"
		}
		standardTile("storm", "device.storm", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offstorm", label:"storm", action:"storm", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "onstorm", label:"storm", action:"storm", icon:"st.illuminance.illuminance.bright", backgroundColor:"#FFFFFF"
		}
		standardTile("deepfade", "device.deepfade", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offdeepfade", label:"deep fade", action:"deepfade", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "ondeepfade", label:"deep fade", action:"deepfade", icon:"st.illuminance.illuminance.bright", backgroundColor:"#FFFFFF"
		}
		standardTile("litefade", "device.litefade", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offlitefade", label:"lite fade", action:"litefade", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "onlitefade", label:"lite fade", action:"litefade", icon:"st.illuminance.illuminance.bright", backgroundColor:"#FFFFFF"
		}
		standardTile("police", "device.police", height: 1, inactiveLabel: false, canChangeIcon: false) {
			state "offpolice", label:"police", action:"police", icon:"st.illuminance.illuminance.dark", backgroundColor:"#D8D8D8"
			state "onpolice", label:"police", action:"police", icon:"st.illuminance.illuminance.bright", backgroundColor:"#FFFFFF"
		}
		controlTile("saturationSliderControl", "device.saturation", "slider", height: 1, width: 2, inactiveLabel: false) {
			state "saturation", action:"color control.setSaturation"
		}
		valueTile("saturation", "device.saturation", inactiveLabel: false, decoration: "flat") {
			state "saturation", label: 'Sat ${currentValue}		 '
		}
		controlTile("hueSliderControl", "device.hue", "slider", height: 1, width: 2, inactiveLabel: false) {
			state "hue", action:"color control.setHue"
		}
		valueTile("hue", "device.hue", inactiveLabel: false, decoration: "flat") {
			state "hue", label: 'Hue ${currentValue}	 '
		}

		main(["switch"])
		details(["switch",
				 "levelSliderControl",
				 "rgbSelector",
				 "whiteSliderControl",
				 "softwhite""daylight""warmwhite""red""green""blue""white""cyan""magenta""orange""purple""yellow""fireplace""storm""deepfade""litefade""police""power""configure"
				 "refresh"])
	}
}

def setAdjustedColor(value) {
	log.debug "setAdjustedColor: ${value}"

	toggleTiles("off") 

	def level = device.latestValue("level")
	if(level == null)
		level = 50
	log.debug "level is: ${level}"
	value.level = level

	def c = hexToRgb(value.hex)
	value.rh = hex(c.r * (level/100))
	value.gh = hex(c.g * (level/100))
	value.bh = hex(c.b * (level/100))

	setColor(value)
}

def setColor(value) {
	log.debug "setColor: ${value}"
	log.debug "hue is: ${value.hue}"
	log.debug "saturation is: ${value.saturation}"

	if (value.size() < 8)
		toggleTiles("off")

	if (( value.size() == 2) && (value.hue != null) && (value.saturation != null)) { 
		def rgb = colorUtil.hslToRgb(value.hue / 100, value.saturation / 100, 0.5)
		rgb = rgb.collect{Math.round(it) as int}
		value.hex = colorUtil.rgbToHex(*rgb)
		value.rh = hex(rgb[0])
		value.gh = hex(rgb[1])
		value.bh = hex(rgb[2])
	}

	if ((value.size() == 3) && (value.hue != null) && (value.saturation != null) && (value.level)) { 
		def rgb = colorUtil.hslToRgb(value.hue / 100, value.saturation / 100, level.level / 100)
		rgb = rgb.collect{Math.round(it) as int}
		value.hex = colorUtil.rgbToHex(*rgb)
		value.rh = hex(rgb[0])
		value.gh = hex(rgb[1])
		value.bh = hex(rgb[2])
	}

	if (( value.size() == 1) && (value.hex)) { 
		def rgbInt = hexToRgb(value.hex)
		value.rh = hex(rgbInt.r)
		value.gh = hex(rgbInt.g)
		value.bh = hex(rgbInt.b)
	}

	if (( value.size() == 2) && (value.hex) && (value.level)) { 

		def rgbInt = hexToRgb(value.hex)
		value.rh = hex(rgbInt.r * value.level/100)
		value.gh = hex(rgbInt.g * value.level/100)
		value.bh = hex(rgbInt.b * value.level/100)
	}

	if (( value.size() == 1) && (value.colorName)) { 
		def colorData = getColorData(value.colorName)
		value.rh = colorData.rh
		value.gh = colorData.gh
		value.bh = colorData.bh
		value.hex = "#${value.rh}${value.gh}${value.bh}"
	}

	if (( value.size() == 2) && (value.colorName) && (value.level)) { 
		def colorData = getColorData(value.colorName)
		value.rh = hex(colorData.r * value.level/100)
		value.gh = hex(colorData.g * value.level/100)
		value.bh = hex(colorData.b * value.level/100)
		value.hex = "#${hex(colorData.r)}${hex(colorData.g)}${hex(colorData.b)}"
	}

	if (( value.size() == 3) && (value.red != null) && (value.green != null) && (value.blue != null)) { 
		value.rh = hex(value.red)
		value.gh = hex(value.green)
		value.bh = hex(value.blue)
		value.hex = "#${value.rh}${value.gh}${value.bh}"
	}

	if (( value.size() == 4) && (value.red != null) && (value.green != null) && (value.blue != null) && (value.level)) { 
		value.rh = hex(value.red * value.level/100)
		value.gh = hex(value.green * value.level/100)
		value.bh = hex(value.blue * value.level/100)
		value.hex = "#${hex(value.red)}${hex(value.green)}${hex(value.blue)}"
	}

	if(value.hue) {
//		sendEvent(name: "hue", value: value.hue, displayed: false)
def params1 = null
def signatureResult1 = null
log.debug "id is ${device.id}"
 params1 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "hue",  value: value.hue,  displayed: false]
	]
signatureResult1 = null
try {
    httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "hue",  value: value.hue,  displayed: false, data: [sign: "${signatureResult1}"])
	}
	if(value.saturation) {
//		sendEvent(name: "saturation", value: value.saturation, displayed: false)
def params2 = null
def signatureResult2 = null
log.debug "id is ${device.id}"
 params2 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "saturation",  value: value.saturation,  displayed: false]
	]
signatureResult2 = null
try {
    httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "saturation",  value: value.saturation,  displayed: false, data: [sign: "${signatureResult2}"])
	}
	if(value.hex?.trim()) {
//		sendEvent(name: "color", value: value.hex, displayed: false)
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "color",  value: value.hex,  displayed: false]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "color",  value: value.hex,  displayed: false, data: [sign: "${signatureResult3}"])
	}
	if (value.level) {
//		sendEvent(name: "level", value: value.level)
def params4 = null
def signatureResult4 = null
log.debug "id is ${device.id}"
 params4 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: value.level]
	]
signatureResult4 = null
try {
    httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "level",  value: value.level, data: [sign: "${signatureResult4}"])
	}
	if (value.switch?.trim()) {
//		sendEvent(name: "switch", value: value.switch)
def params5 = null
def signatureResult5 = null
log.debug "id is ${device.id}"
 params5 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: value.switch]
	]
signatureResult5 = null
try {
    httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "switch",  value: value.switch, data: [sign: "${signatureResult5}"])
	}

	sendRGB(value.rh, value.gh, value.bh)
}

def setLevel(level, rate = null) {
	log.debug "setLevel($level)"

	if (level == 0) { off() }
	else if (device.latestValue("switch") == "off") { on() }

	def colorHex = device.latestValue("color")
	if (colorHex == null)
		colorHex = "#FFFFFF"

	def c = hexToRgb(colorHex)

	def r = hex(c.r * (level/100))
	def g = hex(c.g * (level/100))
	def b = hex(c.b * (level/100))

//	sendEvent(name: "level", value: level)
def params6 = null
def signatureResult6 = null
log.debug "id is ${device.id}"
 params6 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "level",  value: level]
	]
signatureResult6 = null
try {
    httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "level",  value: level, data: [sign: "${signatureResult6}"])
//	sendEvent(name: "setLevel", value: level, displayed: false)
def params7 = null
def signatureResult7 = null
log.debug "id is ${device.id}"
 params7 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "setLevel",  value: level,  displayed: false]
	]
signatureResult7 = null
try {
    httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "setLevel",  value: level,  displayed: false, data: [sign: "${signatureResult7}"])
	sendRGB(r, g, b)
}


def setWhiteLevel(value) {
	log.debug "setWhiteLevel: ${value}"
	def level = Math.min(value as Integer, 99)
	level = 255 * level/99 as Integer
	def channel = 0

	if (device.latestValue("switch") == "off") { on() }

//	sendEvent(name: "whiteLevel", value: value)
def params8 = null
def signatureResult8 = null
log.debug "id is ${device.id}"
 params8 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "whiteLevel",  value: value]
	]
signatureResult8 = null
try {
    httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "whiteLevel",  value: value, data: [sign: "${signatureResult8}"])
	sendWhite(channel, value)
}

def sendWhite(channel, value) {
	def whiteLevel = hex(value)
	def cmd = [String.format("3305010${channel}${whiteLevel}%02X", 50)]
	cmd
}

def sendRGB(redHex, greenHex, blueHex) {
	def cmd = [String.format("33050302${redHex}03${greenHex}04${blueHex}%02X", 100),]
	cmd
}


def sendRGBW(redHex, greenHex, blueHex, whiteHex) {
	def cmd = [String.format("33050400${whiteHex}02${redHex}03${greenHex}04${blueHex}%02X", 100),]
	cmd
}


def configure() {
	log.debug "Configuring Device For SmartThings Use"



	def cmds = []

	
	cmds << zwave.associationV2.associationSet(groupingIdentifier:5, nodeId:[zwaveHubNodeId]).format()


	
	
	
	delayBetween(cmds, 500)

}

def parse(String description) {
	
	def item1 = [
		canBeCurrentState: false,
		linkText: getLinkText(device),
		isStateChange: false,
		displayed: false,
		descriptionText: description,
		value:	description
	]
	def result
	def cmd = zwave.parse(description, [0x20: 1, 0x26: 1, 0x70: 2, 0x72: 2, 0x60: 3, 0x33: 2, 0x32: 3, 0x31:2, 0x30: 2, 0x86: 1, 0x7A: 1])

	if (cmd) {
		if ( cmd.CMD != "7006" ) {
//			result = createEvent(cmd, item1)
def params9 = null
def signatureResult9 = null
params9 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${cmd,  item1?.name}", value: "${cmd,  item1?.value}"]
]
signatureResult9 = null
  try {
        httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue9= ''
if(cmd,  item1.containsKey('data') ){
datavalue9 = cmd,  item1['data']
datavalue9 = "[" + datavalue9+ "," +"sign: " + "${signatureResult9}" + "]"
cmd,  item1.put('data',"${datavalue9}")
 }else{
datavalue9=  "[sign: " + "${signatureResult9}" +"]"
cmd,  item1.put('data',"${datavalue9}")
}
			result = createEvent(cmd,  item1)
		}
	}
	else {
		item1.displayed = displayed(description, item1.isStateChange)
		result = [item1]
	}
	
	result
}

def getDeviceData() {
	def cmd = []

	cmd << response(zwave.manufacturerSpecificV2.manufacturerSpecificGet())
	cmd << response(zwave.versionV1.versionGet())
	cmd << response(zwave.firmwareUpdateMdV1.firmwareMdGet())

	delayBetween(cmd, 500)
}

//def createEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd, Map item1) {
def params10 = null
def signatureResult10 = null
params10 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd,  Map item1) ?.value}"]
]
signatureResult10 = null
  try {
        httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue10= ''
if(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd,  Map item1) .containsKey('data') ){
datavalue10 = physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd,  Map item1) ['data']
datavalue10 = "[" + datavalue10+ "," +"sign: " + "${signatureResult10}" + "]"
physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd,  Map item1) .put('data',"${datavalue10}")
 }else{
datavalue10=  "[sign: " + "${signatureResult10}" +"]"
physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd,  Map item1) .put('data',"${datavalue10}")
}
def createEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd,  Map item1) ) {
	log.debug "manufacturerName: ${cmd.manufacturerName}"
	log.debug "manufacturerId:	 ${cmd.manufacturerId}"
	log.debug "productId:				 ${cmd.productId}"
	log.debug "productTypeId:		 ${cmd.productTypeId}"
}

//def createEvent(physicalgraph.zwave.commands.versionv1.VersionReport cmd, Map item1) {
def params11 = null
def signatureResult11 = null
params11 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.versionv1.VersionReport cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.versionv1.VersionReport cmd,  Map item1) ?.value}"]
]
signatureResult11 = null
  try {
        httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue11= ''
if(physicalgraph.zwave.commands.versionv1.VersionReport cmd,  Map item1) .containsKey('data') ){
datavalue11 = physicalgraph.zwave.commands.versionv1.VersionReport cmd,  Map item1) ['data']
datavalue11 = "[" + datavalue11+ "," +"sign: " + "${signatureResult11}" + "]"
physicalgraph.zwave.commands.versionv1.VersionReport cmd,  Map item1) .put('data',"${datavalue11}")
 }else{
datavalue11=  "[sign: " + "${signatureResult11}" +"]"
physicalgraph.zwave.commands.versionv1.VersionReport cmd,  Map item1) .put('data',"${datavalue11}")
}
def createEvent(physicalgraph.zwave.commands.versionv1.VersionReport cmd,  Map item1) ) {
	updateDataValue("applicationVersion", "${cmd.applicationVersion}")
	log.debug "applicationVersion:			${cmd.applicationVersion}"
	log.debug "applicationSubVersion:		${cmd.applicationSubVersion}"
	log.debug "zWaveLibraryType:				${cmd.zWaveLibraryType}"
	log.debug "zWaveProtocolVersion:		${cmd.zWaveProtocolVersion}"
	log.debug "zWaveProtocolSubVersion: ${cmd.zWaveProtocolSubVersion}"
}

//def createEvent(physicalgraph.zwave.commands.firmwareupdatemdv1.FirmwareMdReport cmd, Map item1) {
def params12 = null
def signatureResult12 = null
params12 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.firmwareupdatemdv1.FirmwareMdReport cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.firmwareupdatemdv1.FirmwareMdReport cmd,  Map item1) ?.value}"]
]
signatureResult12 = null
  try {
        httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue12= ''
if(physicalgraph.zwave.commands.firmwareupdatemdv1.FirmwareMdReport cmd,  Map item1) .containsKey('data') ){
datavalue12 = physicalgraph.zwave.commands.firmwareupdatemdv1.FirmwareMdReport cmd,  Map item1) ['data']
datavalue12 = "[" + datavalue12+ "," +"sign: " + "${signatureResult12}" + "]"
physicalgraph.zwave.commands.firmwareupdatemdv1.FirmwareMdReport cmd,  Map item1) .put('data',"${datavalue12}")
 }else{
datavalue12=  "[sign: " + "${signatureResult12}" +"]"
physicalgraph.zwave.commands.firmwareupdatemdv1.FirmwareMdReport cmd,  Map item1) .put('data',"${datavalue12}")
}
def createEvent(physicalgraph.zwave.commands.firmwareupdatemdv1.FirmwareMdReport cmd,  Map item1) ) {
	log.debug "checksum:			 ${cmd.checksum}"
	log.debug "firmwareId:		 ${cmd.firmwareId}"
	log.debug "manufacturerId: ${cmd.manufacturerId}"
}

def zwaveEvent(physicalgraph.zwave.commands.colorcontrolv1.CapabilityReport cmd, Map item1) {

	log.debug "In CapabilityReport"
}

//def createEvent(physicalgraph.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd, Map item1) {
def params13 = null
def signatureResult13 = null
params13 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd,  Map item1) ?.value}"]
]
signatureResult13 = null
  try {
        httpGet(params13) { resp ->
        signatureResult13 = resp.data
        log.debug "response data: ${signatureResult13}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue13= ''
if(physicalgraph.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd,  Map item1) .containsKey('data') ){
datavalue13 = physicalgraph.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd,  Map item1) ['data']
datavalue13 = "[" + datavalue13+ "," +"sign: " + "${signatureResult13}" + "]"
physicalgraph.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd,  Map item1) .put('data',"${datavalue13}")
 }else{
datavalue13=  "[sign: " + "${signatureResult13}" +"]"
physicalgraph.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd,  Map item1) .put('data',"${datavalue13}")
}
def createEvent(physicalgraph.zwave.commands.multichannelv3.MultiChannelCmdEncap cmd,  Map item1) ) {
	if (cmd.commandClass == 0x6C && cmd.parameter.size >= 4) { 
		
		cmd.parameter = cmd.parameter.drop(2)
		
		cmd.commandClass = cmd.parameter[0]
		cmd.command = cmd.parameter[1]
		cmd.parameter = cmd.parameter.drop(2)
	}
	def encapsulatedCommand = cmd.encapsulatedCommand([0x26: 1, 0x30: 2, 0x32: 2, 0x33: 2]) 
	
	if ((cmd.sourceEndPoint >= 1) && (cmd.sourceEndPoint <= 5)) { 
		
	} else {
		if (encapsulatedCommand) {
			zwaveEvent(encapsulatedCommand)
		}
	}
}

//def createEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd, Map item1) {
def params14 = null
def signatureResult14 = null
params14 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.basicv1.BasicReport cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.basicv1.BasicReport cmd,  Map item1) ?.value}"]
]
signatureResult14 = null
  try {
        httpGet(params14) { resp ->
        signatureResult14 = resp.data
        log.debug "response data: ${signatureResult14}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue14= ''
if(physicalgraph.zwave.commands.basicv1.BasicReport cmd,  Map item1) .containsKey('data') ){
datavalue14 = physicalgraph.zwave.commands.basicv1.BasicReport cmd,  Map item1) ['data']
datavalue14 = "[" + datavalue14+ "," +"sign: " + "${signatureResult14}" + "]"
physicalgraph.zwave.commands.basicv1.BasicReport cmd,  Map item1) .put('data',"${datavalue14}")
 }else{
datavalue14=  "[sign: " + "${signatureResult14}" +"]"
physicalgraph.zwave.commands.basicv1.BasicReport cmd,  Map item1) .put('data',"${datavalue14}")
}
def createEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd,  Map item1) ) {
	 def result = doCreateEvent(cmd, item1)
	 for (int i = 0; i < result.size(); i++) {
			result[i].type = "physical"
	 }
	 result
}

//def createEvent(physicalgraph.zwave.commands.basicv1.BasicSet cmd, Map item1) {
def params15 = null
def signatureResult15 = null
params15 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.basicv1.BasicSet cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.basicv1.BasicSet cmd,  Map item1) ?.value}"]
]
signatureResult15 = null
  try {
        httpGet(params15) { resp ->
        signatureResult15 = resp.data
        log.debug "response data: ${signatureResult15}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue15= ''
if(physicalgraph.zwave.commands.basicv1.BasicSet cmd,  Map item1) .containsKey('data') ){
datavalue15 = physicalgraph.zwave.commands.basicv1.BasicSet cmd,  Map item1) ['data']
datavalue15 = "[" + datavalue15+ "," +"sign: " + "${signatureResult15}" + "]"
physicalgraph.zwave.commands.basicv1.BasicSet cmd,  Map item1) .put('data',"${datavalue15}")
 }else{
datavalue15=  "[sign: " + "${signatureResult15}" +"]"
physicalgraph.zwave.commands.basicv1.BasicSet cmd,  Map item1) .put('data',"${datavalue15}")
}
def createEvent(physicalgraph.zwave.commands.basicv1.BasicSet cmd,  Map item1) ) {
	 def result = doCreateEvent(cmd, item1)
	 for (int i = 0; i < result.size(); i++) {
			result[i].type = "physical"
	 }
	 result
}

//def createEvent(physicalgraph.zwave.commands.sensormultilevelv2.SensorMultilevelReport cmd, Map item1) {
def params16 = null
def signatureResult16 = null
params16 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.sensormultilevelv2.SensorMultilevelReport cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.sensormultilevelv2.SensorMultilevelReport cmd,  Map item1) ?.value}"]
]
signatureResult16 = null
  try {
        httpGet(params16) { resp ->
        signatureResult16 = resp.data
        log.debug "response data: ${signatureResult16}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue16= ''
if(physicalgraph.zwave.commands.sensormultilevelv2.SensorMultilevelReport cmd,  Map item1) .containsKey('data') ){
datavalue16 = physicalgraph.zwave.commands.sensormultilevelv2.SensorMultilevelReport cmd,  Map item1) ['data']
datavalue16 = "[" + datavalue16+ "," +"sign: " + "${signatureResult16}" + "]"
physicalgraph.zwave.commands.sensormultilevelv2.SensorMultilevelReport cmd,  Map item1) .put('data',"${datavalue16}")
 }else{
datavalue16=  "[sign: " + "${signatureResult16}" +"]"
physicalgraph.zwave.commands.sensormultilevelv2.SensorMultilevelReport cmd,  Map item1) .put('data',"${datavalue16}")
}
def createEvent(physicalgraph.zwave.commands.sensormultilevelv2.SensorMultilevelReport cmd,  Map item1) ) {
	def result = [:]
	if ( cmd.sensorType == 4 ) { 
		result.name = "power"
		result.value = cmd.scaledSensorValue
		result.descriptionText = "$device.displayName power usage is ${result.value} watt(s)"
		result.isStateChange
//		sendEvent(name: result.name, value: result.value, displayed: false)
def params17 = null
def signatureResult17 = null
log.debug "id is ${device.id}"
 params17 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: result.name,  value: result.value,  displayed: false]
	]
signatureResult17 = null
try {
    httpGet(params17) { resp ->
        signatureResult17 = resp.data
        log.debug "response data: ${signatureResult17}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: result.name,  value: result.value,  displayed: false, data: [sign: "${signatureResult17}"])
	}
	result
}

//def createEvent(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd, Map item1) {
def params18 = null
def signatureResult18 = null
params18 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd,  Map item1) ?.value}"]
]
signatureResult18 = null
  try {
        httpGet(params18) { resp ->
        signatureResult18 = resp.data
        log.debug "response data: ${signatureResult18}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue18= ''
if(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd,  Map item1) .containsKey('data') ){
datavalue18 = physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd,  Map item1) ['data']
datavalue18 = "[" + datavalue18+ "," +"sign: " + "${signatureResult18}" + "]"
physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd,  Map item1) .put('data',"${datavalue18}")
 }else{
datavalue18=  "[sign: " + "${signatureResult18}" +"]"
physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd,  Map item1) .put('data',"${datavalue18}")
}
def createEvent(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange cmd,  Map item1) ) {
	 []
}

//def createEvent(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd, Map item1) {
def params19 = null
def signatureResult19 = null
params19 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd,  Map item1) ?.value}"]
]
signatureResult19 = null
  try {
        httpGet(params19) { resp ->
        signatureResult19 = resp.data
        log.debug "response data: ${signatureResult19}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue19= ''
if(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd,  Map item1) .containsKey('data') ){
datavalue19 = physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd,  Map item1) ['data']
datavalue19 = "[" + datavalue19+ "," +"sign: " + "${signatureResult19}" + "]"
physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd,  Map item1) .put('data',"${datavalue19}")
 }else{
datavalue19=  "[sign: " + "${signatureResult19}" +"]"
physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd,  Map item1) .put('data',"${datavalue19}")
}
def createEvent(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange cmd,  Map item1) ) {
	 [response(zwave.basicV1.basicGet())]
}

//def createEvent(physicalgraph.zwave.commands.switchmultilevelv3.SwitchMultilevelSet cmd, Map item1) {
def params20 = null
def signatureResult20 = null
params20 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.switchmultilevelv3.SwitchMultilevelSet cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.switchmultilevelv3.SwitchMultilevelSet cmd,  Map item1) ?.value}"]
]
signatureResult20 = null
  try {
        httpGet(params20) { resp ->
        signatureResult20 = resp.data
        log.debug "response data: ${signatureResult20}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue20= ''
if(physicalgraph.zwave.commands.switchmultilevelv3.SwitchMultilevelSet cmd,  Map item1) .containsKey('data') ){
datavalue20 = physicalgraph.zwave.commands.switchmultilevelv3.SwitchMultilevelSet cmd,  Map item1) ['data']
datavalue20 = "[" + datavalue20+ "," +"sign: " + "${signatureResult20}" + "]"
physicalgraph.zwave.commands.switchmultilevelv3.SwitchMultilevelSet cmd,  Map item1) .put('data',"${datavalue20}")
 }else{
datavalue20=  "[sign: " + "${signatureResult20}" +"]"
physicalgraph.zwave.commands.switchmultilevelv3.SwitchMultilevelSet cmd,  Map item1) .put('data',"${datavalue20}")
}
def createEvent(physicalgraph.zwave.commands.switchmultilevelv3.SwitchMultilevelSet cmd,  Map item1) ) {
	 def result = doCreateEvent(cmd, item1)
	 for (int i = 0; i < result.size(); i++) {
			result[i].type = "physical"
	 }
	 result
}

//def createEvent(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd, Map item1) {
def params21 = null
def signatureResult21 = null
params21 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd,  Map item1) ?.name}", value: "${physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd,  Map item1) ?.value}"]
]
signatureResult21 = null
  try {
        httpGet(params21) { resp ->
        signatureResult21 = resp.data
        log.debug "response data: ${signatureResult21}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue21= ''
if(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd,  Map item1) .containsKey('data') ){
datavalue21 = physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd,  Map item1) ['data']
datavalue21 = "[" + datavalue21+ "," +"sign: " + "${signatureResult21}" + "]"
physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd,  Map item1) .put('data',"${datavalue21}")
 }else{
datavalue21=  "[sign: " + "${signatureResult21}" +"]"
physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd,  Map item1) .put('data',"${datavalue21}")
}
def createEvent(physicalgraph.zwave.commands.switchmultilevelv1.SwitchMultilevelReport cmd,  Map item1) ) {
	 def result = doCreateEvent(cmd, item1)
	 result[0].descriptionText = "${item1.linkText} is ${item1.value}"
	 result[0].handlerName = cmd.value ? "statusOn" : "statusOff"
	 for (int i = 0; i < result.size(); i++) {
			result[i].type = "digital"
	 }
	 result
}

def doCreateEvent(physicalgraph.zwave.Command cmd, Map item1) {
	 def result = [item1]

	 item1.name = "switch"
	 item1.value = cmd.value ? "on" : "off"
	 item1.handlerName = item1.value
	 item1.descriptionText = "${item1.linkText} was turned ${item1.value}"
	 item1.canBeCurrentState = true
	 item1.isStateChange = isStateChange(device, item1.name, item1.value)
	 item1.displayed = item1.isStateChange

	 if (cmd.value >= 5) {
			def item2 = new LinkedHashMap(item1)
			item2.name = "level"
			item2.value = (cmd.value == 99 ? 100 : cmd.value) as String
			item2.unit = "%"
			item2.descriptionText = "${item1.linkText} dimmed ${item2.value} %"
			item2.canBeCurrentState = true
			item2.isStateChange = isStateChange(device, item2.name, item2.value)
			item2.displayed = false
			result << item2
	 }
	 result
}

def zwaveEvent(physicalgraph.zwave.commands.configurationv1.ConfigurationReport cmd, item1) {
	log.debug "${device.displayName} parameter '${cmd.parameterNumber}' with a byte size of '${cmd.size}' is set to '${cmd.configurationValue}'"
}
"Report: $cmd""when off""when on""never""indicatorStatus"
//def createEvent(physicalgraph.zwave.Command cmd,	Map map) {
def params22 = null
def signatureResult22 = null
params22 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${physicalgraph.zwave.Command cmd, 	Map map) ?.name}", value: "${physicalgraph.zwave.Command cmd, 	Map map) ?.value}"]
]
signatureResult22 = null
  try {
        httpGet(params22) { resp ->
        signatureResult22 = resp.data
        log.debug "response data: ${signatureResult22}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue22= ''
if(physicalgraph.zwave.Command cmd, 	Map map) .containsKey('data') ){
datavalue22 = physicalgraph.zwave.Command cmd, 	Map map) ['data']
datavalue22 = "[" + datavalue22+ "," +"sign: " + "${signatureResult22}" + "]"
physicalgraph.zwave.Command cmd, 	Map map) .put('data',"${datavalue22}")
 }else{
datavalue22=  "[sign: " + "${signatureResult22}" +"]"
physicalgraph.zwave.Command cmd, 	Map map) .put('data',"${datavalue22}")
}
def createEvent(physicalgraph.zwave.Command cmd, 	Map map) ) {
	 
	 log.debug "UNHANDLED COMMAND $cmd"
}

def on() {
	log.debug "on()"
//	sendEvent(name: "switch", value: "on")
def params23 = null
def signatureResult23 = null
log.debug "id is ${device.id}"
 params23 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "on"]
	]
signatureResult23 = null
try {
    httpGet(params23) { resp ->
        signatureResult23 = resp.data
        log.debug "response data: ${signatureResult23}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "switch",  value: "on", data: [sign: "${signatureResult23}"])
	delayBetween([zwave.basicV1.basicSet(value: 0xFF).format(),
					zwave.switchMultilevelV1.switchMultilevelGet().format()], 5000)
}

def off() {
	log.debug "off()"
//	sendEvent(name: "switch", value: "off")
def params24 = null
def signatureResult24 = null
log.debug "id is ${device.id}"
 params24 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "switch",  value: "off"]
	]
signatureResult24 = null
try {
    httpGet(params24) { resp ->
        signatureResult24 = resp.data
        log.debug "response data: ${signatureResult24}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "switch",  value: "off", data: [sign: "${signatureResult24}"])
	delayBetween ([zwave.basicV1.basicSet(value: 0x00).format(), zwave.switchMultilevelV1.switchMultilevelGet().format()], 5000)
}


def poll() {
	zwave.switchMultilevelV1.switchMultilevelGet().format()
}

def refresh() {
	def cmd = []
	cmd << response(zwave.switchMultilevelV1.switchMultilevelGet().format())
	delayBetween(cmd, 500)
}

 "Zwave Tweaker"
def updateZwaveParam(params) {
	if ( params ) {
		def pNumber = params.paramNumber
		def pSize = params.size
		def pValue	= [params.value]
		log.debug "Updating ${device.displayName} parameter number '${pNumber}' with value '${pValue}' with size of '${pSize}'"

		def cmds = []
		cmds << zwave.configurationV1.configurationSet(configurationValue: pValue, parameterNumber: pNumber, size: pSize).format()

		cmds << zwave.configurationV1.configurationGet(parameterNumber: pNumber).format()
		delayBetween(cmds, 1500)
	}
}

def test() {
	
	
	
	

	def cmd = []

	if ( !state.cnt ) {
		state.cnt = 6
	} else {
		state.cnt = state.cnt + 1
	}

	if ( state.cnt > 10 )
		state.cnt = 6

	
	cmd << zwave.configurationV1.configurationSet(configurationValue: [state.cnt], parameterNumber: 72, size: 1).format()
	cmd << zwave.configurationV1.configurationGet(parameterNumber: 72).format()

	delayBetween(cmd, 500)

}

def colorNameToRgb(color) {

	final colors = [
		[name:"Soft White", r: 255, g: 241, b: 224	],
		[name:"Daylight",		r: 255, g: 255, b: 251	],
		[name:"Warm White", r: 255, g: 244, b: 229	],

		[name:"Red",		r: 255, g: 0, b: 0	],
		[name:"Green",		r: 0,		g: 255, b: 0	],
		[name:"Blue",			r: 0,		g: 0, b: 255	],

		[name:"Cyan",			r: 0,		g: 255, b: 255	],
		[name:"Magenta",	r: 255, g: 0, b: 33 ],
		[name:"Orange",		r: 255, g: 102, b: 0	],

		[name:"Purple",		r: 170, g: 0, b: 255	],
		[name:"Yellow",		r: 255, g: 255, b: 0	],
		[name:"White",		r: 255, g: 255, b: 255	]
	]

	def colorData = [:]
	colorData = colors.find { it.name == color }

	colorData
}

private hex(value, width=2) {
	def s = new BigInteger(Math.round(value).toString()).toString(16)
	while (s.size() < width) {
		s = "0" + s
	}
	s
}

def hexToRgb(colorHex) {
	def rrInt = Integer.parseInt(colorHex.substring(1,3),16)
	def ggInt = Integer.parseInt(colorHex.substring(3,5),16)
	def bbInt = Integer.parseInt(colorHex.substring(5,7),16)

	def colorData = [:]
	colorData = [r: rrInt, g: ggInt, b: bbInt]
	colorData
}

def rgbToHex(rgb) {
	def r = hex(rgb.r)
	def g = hex(rgb.g)
	def b = hex(rgb.b)
	def hexColor = "#${r}${g}${b}"

	hexColor
}

def hueToRgb(v1, v2, vh) {
	if (vh < 0) { vh += 1 }
	if (vh > 1) { vh -= 1 }
	if ((6 * vh) < 1) { return (v1 + (v2 - v1) * 6 * vh) }
	if ((2 * vh) < 1) { return (v2) }
	if ((3 * vh) < 2) { return (v1 + (v2 - v1) * ((2 / 3 - vh) * 6)) }
	return (v1)
}

def rgbToHSL(rgb) {
	def r = rgb.r / 255
	def g = rgb.g / 255
	def b = rgb.b / 255
	def h = 0
	def s = 0
	def l = 0

	def var_min = [r,g,b].min()
	def var_max = [r,g,b].max()
	def del_max = var_max - var_min

	l = (var_max + var_min) / 2

	if (del_max == 0) {
			h = 0
			s = 0
	} else {
		if (l < 0.5) { s = del_max / (var_max + var_min) }
		else { s = del_max / (2 - var_max - var_min) }

		def del_r = (((var_max - r) / 6) + (del_max / 2)) / del_max
		def del_g = (((var_max - g) / 6) + (del_max / 2)) / del_max
		def del_b = (((var_max - b) / 6) + (del_max / 2)) / del_max

		if (r == var_max) { h = del_b - del_g }
		else if (g == var_max) { h = (1 / 3) + del_r - del_b }
		else if (b == var_max) { h = (2 / 3) + del_g - del_r }

		if (h < 0) { h += 1 }
		if (h > 1) { h -= 1 }
	}
	def hsl = [:]
	hsl = [h: h * 100, s: s * 100, l: l]

	hsl
}

def getColorData(colorName) {
	log.debug "getColorData: ${colorName}"

	def colorRGB = colorNameToRgb(colorName)
	def colorHex = rgbToHex(colorRGB)
	def colorHSL = rgbToHSL(colorRGB)

	def colorData = [:]
	colorData = [h: colorHSL.h,
				 s: colorHSL.s,
				 l: device.latestValue("level"),
				 r: colorRGB.r,
				 g: colorRGB.g,
				 b: colorRGB.b,
				 rh: hex(colorRGB.r),
				 gh: hex(colorRGB.g),
				 bh: hex(colorRGB.b),
				 hex: colorHex,
				 alpha: 1]

	 colorData
}

def doColorButton(colorName) {
	log.debug "doColorButton: '${colorName}()'"

	if (device.latestValue("switch") == "off") { on() }

	def level = device.latestValue("level")
	def maxLevel = hex(99)

	toggleTiles(colorName.toLowerCase().replaceAll("\\s",""))

	if		( colorName == "Fire Place" )		{ updateZwaveParam([paramNumber:72, value:6,	size:1]) }
	else if ( colorName == "Storm" )		{ updateZwaveParam([paramNumber:72, value:7,	size:1]) }
	else if ( colorName == "Deep Fade" )	{ updateZwaveParam([paramNumber:72, value:8,	size:1]) }
	else if ( colorName == "Lite Fade" )	{ updateZwaveParam([paramNumber:72, value:9,	size:1]) }
	else if ( colorName == "Police" )			{ updateZwaveParam([paramNumber:72, value:10, size:1]) }
	else if ( colorName == "White" )		{ String.format("33050400${maxLevel}02${hex(0)}03${hex(0)}04${hex(0)}%02X", 100) }
	else if ( colorName == "Daylight" )		{ String.format("33050400${maxLevel}02${maxLevel}03${maxLevel}04${maxLevel}%02X", 100) }
	else {
		def c = getColorData(colorName)
		def newValue = ["hue": c.h, "saturation": c.s, "level": level, "red": c.r, "green": c.g, "blue": c.b, "hex": c.hex, "alpha": c.alpha]
		setColor(newValue)
		def r = hex(c.r * (level/100))
		def g = hex(c.g * (level/100))
		def b = hex(c.b * (level/100))
		def w = hex(0) 
		sendRGBW(r, g, b, w)
	}
}

def toggleTiles(color) {
	state.colorTiles = []
	if ( !state.colorTiles ) {
		state.colorTiles = ["softwhite","daylight","warmwhite","red","green","blue","cyan","magenta","orange","purple","yellow","white","fireplace","storm","deepfade","litefade","police"]
	}

	def cmds = []

	state.colorTiles.each({
		if ( it == color ) {
			log.debug "Turning ${it} on"
//			cmds << sendEvent(name: it, value: "on${it}", displayed: True, descriptionText: "${device.displayName} ${color} is 'ON'", isStateChange: true)
def params25 = null
def signatureResult25 = null
log.debug "id is ${device.id}"
 params25 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: it,  value: "on${it}",  displayed: True,  descriptionText: "${device.displayName} ${color} is 'ON'",  isStateChange: true]
	]
signatureResult25 = null
try {
    httpGet(params25) { resp ->
        signatureResult25 = resp.data
        log.debug "response data: ${signatureResult25}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			cmds << sendEvent(name: it,  value: "on${it}",  displayed: True,  descriptionText: "${device.displayName} ${color} is 'ON'",  isStateChange: true, data: [sign: "${signatureResult25}"])
		} else {
			
//			cmds << sendEvent(name: it, value: "off${it}", displayed: false)
def params26 = null
def signatureResult26 = null
log.debug "id is ${device.id}"
 params26 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: it,  value: "off${it}",  displayed: false]
	]
signatureResult26 = null
try {
    httpGet(params26) { resp ->
        signatureResult26 = resp.data
        log.debug "response data: ${signatureResult26}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			cmds << sendEvent(name: it,  value: "off${it}",  displayed: false, data: [sign: "${signatureResult26}"])
		}
	})

	delayBetween(cmds, 2500)
}


def softwhite() { doColorButton("Soft White") }
def daylight()	{ doColorButton("Daylight") }
def warmwhite() { doColorButton("Warm White") }

def red()			{ doColorButton("Red") }
def green()		{ doColorButton("Green") }
def blue()		{ doColorButton("Blue") }

def cyan()		{ doColorButton("Cyan") }
def magenta() { doColorButton("Magenta") }
def orange()	{ doColorButton("Orange") }

def purple()	{ doColorButton("Purple") }
def yellow()	{ doColorButton("Yellow") }
def white()		{ doColorButton("White") }

def fireplace() { doColorButton("Fire Place") }
def storm()		{ doColorButton("Storm") }
def deepfade()	{ doColorButton("Deep Fade") }

def litefade()	{ doColorButton("Lite Fade") }
def police()	{ doColorButton("Police") }
def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()
}
