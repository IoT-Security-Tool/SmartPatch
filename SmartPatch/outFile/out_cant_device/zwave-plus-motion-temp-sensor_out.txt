 import java.util.UUID
"License"
"AS IS"

metadata {
	definition (name: "Z-Wave Plus Motion/Temp Sensor", namespace: "smartthings", author: "SmartThings") {
		capability "Motion Sensor"
		capability "Temperature Measurement"
		capability "Configuration"
		capability "Battery"
		capability "Sensor"

		
		attribute "ManufacturerCode", "string"
		attribute "ProduceTypeCode", "string"
		attribute "ProductCode", "string"
		attribute "WakeUp", "string"
		attribute "WirelessConfig", "string"
				
		fingerprint deviceId: "0x0701", inClusters: "0x5E, 0x98, 0x86, 0x72, 0x5A, 0x85, 0x59, 0x73, 0x80, 0x71, 0x31, 0x70, 0x84, 0x7A"
		fingerprint type:"8C07", inClusters: "5E,98,86,72,5A,31,71"
		fingerprint mfr:"0109", prod:"2002", model:"0205"  
	}

	tiles(scale: 2) {
		multiAttributeTile(name:"motion", type: "generic", width: 6, height: 4){
			tileAttribute("device.motion", key: "PRIMARY_CONTROL") {
				attributeState("active", label:'motion', icon:"st.motion.motion.active", backgroundColor:"#00A0DC")
				attributeState("inactive", label:'no motion', icon:"st.motion.motion.inactive", backgroundColor:"#CCCCCC")
			}
		}

		valueTile("temperature", "device.temperature", inactiveLabel: false, width: 2, height: 2) {
			state "temperature", label:'${currentValue}Â°',
				backgroundColors:[
					[value: 31, color: "#153591"],
					[value: 44, color: "#1e9cbb"],
					[value: 59, color: "#90d2a7"],
					[value: 74, color: "#44b621"],
					[value: 84, color: "#f1d801"],
					[value: 95, color: "#d04e00"],
					[value: 96, color: "#bc2323"]
				]
		}
		valueTile("battery", "device.battery", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "battery", label:'${currentValue}% battery', unit:"%"
		}

		main(["motion", "temperature"])
		details(["motion", "temperature", "battery"])
	}
}

def updated() {
	if (!device.currentState("ManufacturerCode")) {
		response(secure(zwave.manufacturerSpecificV2.manufacturerSpecificGet()))
	}
}

def configure() {
	log.debug "configure()"
	def cmds = []

	if (!isSecured()) {
		
		cmds << "delay 1000"
	}

	cmds += secureSequence([
		zwave.manufacturerSpecificV2.manufacturerSpecificGet(),
		zwave.batteryV1.batteryGet(),
		zwave.sensorMultilevelV5.sensorMultilevelGet(sensorType:1, scale:1)
	], 500)

	cmds << "delay 8000"
	cmds << secure(zwave.wakeUpV1.wakeUpNoMoreInformation())
	return cmds
}

private getCommandClassVersions() {
	[
		0x71: 3,  
		0x5E: 2,  
		0x59: 1,  
		0x85: 2,  
		0x20: 1,  
		0x80: 1,  
		0x70: 1,  
		0x5A: 1,  
		0x7A: 2,  
		0x72: 2,  
		0x73: 1,  
		0x98: 1,  
		0x31: 5,  
		0x84: 2	  
	]
}


def parse(String description) {
	def result = []
	def cmd
	if (description.startsWith("Err 106")) {
		state.sec = 0
//		result = createEvent( name: "secureInclusion", value: "failed", eventType: "ALERT",
//				descriptionText: "This sensor failed to complete the network security key exchange. If you are unable to control it via SmartThings, you must remove it from your network and add it again.")
def params1 = null
def signatureResult1 = null
params1 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "secureInclusion",  value: "failed",  eventType: "ALERT", 				descriptionText: "This sensor failed to complete the network security key exchange. If you are unable to control it via SmartThings,  you must remove it from your network and add it again."]
]
signatureResult1 = null
  try {
        httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result = createEvent(name: "secureInclusion",  value: "failed",  eventType: "ALERT", 				descriptionText: "This sensor failed to complete the network security key exchange. If you are unable to control it via SmartThings,  you must remove it from your network and add it again.", data: [sign: "${signatureResult1}"])
	} else if (description.startsWith("Err")) {
//		result = createEvent(descriptionText: "$device.displayName $description", isStateChange: true)
def params2 = null
def signatureResult2 = null
params2 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "$device.displayName $description",  isStateChange: true]
]
signatureResult2 = null
  try {
        httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result = createEvent(descriptionText: "$device.displayName $description",  isStateChange: true, data: [sign: "${signatureResult2}"])
	} else {
		cmd = zwave.parse(description, commandClassVersions)
		if (cmd) {
			result = zwaveEvent(cmd)
		}
	}

	if (result instanceof List) {
		result = result.flatten()
	}

	log.debug "Parsed '$description' to $result"
	return result
}

def zwaveEvent(physicalgraph.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {
	def encapsulatedCommand = cmd.encapsulatedCommand(commandClassVersions)
	log.debug "encapsulated: $encapsulatedCommand"
	if (encapsulatedCommand) {
		state.sec = 1
		return zwaveEvent(encapsulatedCommand)
	} else {
		log.warn "Unable to extract encapsulated cmd from $cmd"
//		return [createEvent(descriptionText: cmd.toString())]
def params3 = null
def signatureResult3 = null
params3 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: cmd.toString()]
]
signatureResult3 = null
  try {
        httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		return [createEvent(descriptionText: cmd.toString(), data: [sign: "${signatureResult3}"])]
	}
}

def sensorValueEvent(value) {
	def result = []
	if (value) {
		log.debug "sensorValueEvent($value) : active"
//		result << createEvent(name: "motion", value: "active", descriptionText: "$device.displayName detected motion")
def params4 = null
def signatureResult4 = null
params4 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "motion",  value: "active",  descriptionText: "$device.displayName detected motion"]
]
signatureResult4 = null
  try {
        httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result << createEvent(name: "motion",  value: "active",  descriptionText: "$device.displayName detected motion", data: [sign: "${signatureResult4}"])
	} else {
		log.debug "sensorValueEvent($value) : inactive"
//		result << createEvent(name: "motion", value: "inactive", descriptionText: "$device.displayName motion has stopped")
def params5 = null
def signatureResult5 = null
params5 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "motion",  value: "inactive",  descriptionText: "$device.displayName motion has stopped"]
]
signatureResult5 = null
  try {
        httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result << createEvent(name: "motion",  value: "inactive",  descriptionText: "$device.displayName motion has stopped", data: [sign: "${signatureResult5}"])
	}
	return result
}

def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd) {
	return sensorValueEvent(cmd.value)
}

def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicSet cmd) {
	return sensorValueEvent(cmd.value)
}

def zwaveEvent(physicalgraph.zwave.commands.switchbinaryv1.SwitchBinaryReport cmd) {
	return sensorValueEvent(cmd.value)
}

def zwaveEvent(physicalgraph.zwave.commands.sensorbinaryv2.SensorBinaryReport cmd) {
	return sensorValueEvent(cmd.sensorValue)
}

def zwaveEvent(physicalgraph.zwave.commands.sensoralarmv1.SensorAlarmReport cmd) {
	return sensorValueEvent(cmd.sensorState)
}

def zwaveEvent(physicalgraph.zwave.commands.notificationv3.NotificationReport cmd) {
	def result = []
	if (cmd.notificationType == 0x07) {
		if (cmd.event == 0x01 || cmd.event == 0x02) {
			result << sensorValueEvent(1)
		} else if (cmd.event == 0x03) {
//			result << createEvent(descriptionText: "$device.displayName covering was removed", isStateChange: true)
def params6 = null
def signatureResult6 = null
params6 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "$device.displayName covering was removed",  isStateChange: true]
]
signatureResult6 = null
  try {
        httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			result << createEvent(descriptionText: "$device.displayName covering was removed",  isStateChange: true, data: [sign: "${signatureResult6}"])
			result << response(secure(zwave.manufacturerSpecificV2.manufacturerSpecificGet()))
		} else if (cmd.event == 0x05 || cmd.event == 0x06) {
//			result << createEvent(descriptionText: "$device.displayName detected glass breakage", isStateChange: true)
def params7 = null
def signatureResult7 = null
params7 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "$device.displayName detected glass breakage",  isStateChange: true]
]
signatureResult7 = null
  try {
        httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			result << createEvent(descriptionText: "$device.displayName detected glass breakage",  isStateChange: true, data: [sign: "${signatureResult7}"])
		} else if (cmd.event == 0x07) {
			result << sensorValueEvent(1)
		} else if (cmd.event == 0x08) {
			result << sensorValueEvent(1)
		} else if (cmd.event == 0x00) {
			if (cmd.eventParametersLength && cmd.eventParameter[0] == 3) {
//				result << createEvent(descriptionText: "$device.displayName covering replaced", isStateChange: true, displayed: false)
def params8 = null
def signatureResult8 = null
params8 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "$device.displayName covering replaced",  isStateChange: true,  displayed: false]
]
signatureResult8 = null
  try {
        httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
				result << createEvent(descriptionText: "$device.displayName covering replaced",  isStateChange: true,  displayed: false, data: [sign: "${signatureResult8}"])
			} else {
				result << sensorValueEvent(0)
			}
		} else if (cmd.event == 0xFF) {
			result << sensorValueEvent(1)
		} else {
//			result << createEvent(descriptionText: "$device.displayName sent event $cmd.event")
def params9 = null
def signatureResult9 = null
params9 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "$device.displayName sent event $cmd.event"]
]
signatureResult9 = null
  try {
        httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			result << createEvent(descriptionText: "$device.displayName sent event $cmd.event", data: [sign: "${signatureResult9}"])
		}
	} else if (cmd.notificationType) {
		def text = "Notification $cmd.notificationType: event ${([cmd.event] + cmd.eventParameter).join(", ")}"
//		result << createEvent(name: "notification$cmd.notificationType", value: "$cmd.event", descriptionText: text, displayed: false)
def params10 = null
def signatureResult10 = null
params10 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "notification$cmd.notificationType",  value: "$cmd.event",  descriptionText: text,  displayed: false]
]
signatureResult10 = null
  try {
        httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result << createEvent(name: "notification$cmd.notificationType",  value: "$cmd.event",  descriptionText: text,  displayed: false, data: [sign: "${signatureResult10}"])
	} else {
		def value = cmd.v1AlarmLevel == 255 ? "active" : cmd.v1AlarmLevel ?: "inactive"
//		result << createEvent(name: "alarm $cmd.v1AlarmType", value: value, displayed: false)
def params11 = null
def signatureResult11 = null
params11 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "alarm $cmd.v1AlarmType",  value: value,  displayed: false]
]
signatureResult11 = null
  try {
        httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result << createEvent(name: "alarm $cmd.v1AlarmType",  value: value,  displayed: false, data: [sign: "${signatureResult11}"])
	}
	return result
}

def zwaveEvent(physicalgraph.zwave.commands.wakeupv2.WakeUpNotification cmd) {
//	def event = createEvent(name: "WakeUp", value: "wakeup", descriptionText: "${device.displayName} woke up", isStateChange: true, displayed: false)  
def params12 = null
def signatureResult12 = null
params12 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "WakeUp",  value: "wakeup",  descriptionText: "${device.displayName} woke up",  isStateChange: true,  displayed: false]
]
signatureResult12 = null
  try {
        httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	def event = createEvent(name: "WakeUp",  value: "wakeup",  descriptionText: "${device.displayName} woke up",  isStateChange: true,  displayed: false, data: [sign: "${signatureResult12}"])
	def cmds = []

	if (!device.currentState("ManufacturerCode")) {
		cmds << secure(zwave.manufacturerSpecificV2.manufacturerSpecificGet())
		cmds << "delay 2000"
	}
	if (!state.lastbat || now() - state.lastbat > 10*60*60*1000) {
		event.descriptionText += ", requesting battery"
		cmds << secure(zwave.sensorMultilevelV5.sensorMultilevelGet(sensorType:1, scale:1))
		cmds << "delay 800"
		cmds << secure(zwave.batteryV1.batteryGet())
		cmds << "delay 2000"
	} else {
		log.debug "not checking battery, was updated ${(now() - state.lastbat)/60000 as int} min ago"
	}
	cmds << secure(zwave.wakeUpV1.wakeUpNoMoreInformation())

	return [event, response(cmds)]
}

def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {
	def result = []
	def map = [ name: "battery", unit: "%" ]
	if (cmd.batteryLevel == 0xFF) {
		map.value = 1
		map.descriptionText = "${device.displayName} has a low battery"
		map.isStateChange = true
	} else {
		map.value = cmd.batteryLevel
	}
//	def event = createEvent(map)
def params13 = null
def signatureResult13 = null
params13 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult13 = null
  try {
        httpGet(params13) { resp ->
        signatureResult13 = resp.data
        log.debug "response data: ${signatureResult13}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue13= ''
if(map.containsKey('data') ){
datavalue13 = map['data']
datavalue13 = "[" + datavalue13+ "," +"sign: " + "${signatureResult13}" + "]"
map.put('data',"${datavalue13}")
 }else{
datavalue13=  "[sign: " + "${signatureResult13}" +"]"
map.put('data',"${datavalue13}")
}
	def event = createEvent(map)

	
	if (!event.isStateChange && (now() - 3*24*60*60*1000) > device.latestState("battery")?.date?.time) {
		map.isStateChange = true
	}
	state.lastbat = now()
	return [event]
}

def zwaveEvent(physicalgraph.zwave.commands.sensormultilevelv5.SensorMultilevelReport cmd) {
	def result = []
	def map = [:]
	switch (cmd.sensorType) {
		case 1:
			def cmdScale = cmd.scale == 1 ? "F" : "C"
			map.name = "temperature"
			map.value = convertTemperatureIfNeeded(cmd.scaledSensorValue, cmdScale, cmd.precision)
			map.unit = getTemperatureScale()
			break;
		case 3:
			map.name = "illuminance"
			map.value = cmd.scaledSensorValue.toInteger().toString()
			map.unit = "lux"
			break;
		case 5:
			map.name = "humidity"
			map.value = cmd.scaledSensorValue.toInteger().toString()
			map.unit = cmd.scale == 0 ? "%" : ""
			break;
		case 0x1E:
			map.name = "loudness"
			map.unit = cmd.scale == 1 ? "dBA" : "dB"
			map.value = cmd.scaledSensorValue.toString()
			break;
		default:
			map.descriptionText = cmd.toString()
	}
//	result << createEvent(map)
def params14 = null
def signatureResult14 = null
params14 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${map?.name}", value: "${map?.value}"]
]
signatureResult14 = null
  try {
        httpGet(params14) { resp ->
        signatureResult14 = resp.data
        log.debug "response data: ${signatureResult14}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue14= ''
if(map.containsKey('data') ){
datavalue14 = map['data']
datavalue14 = "[" + datavalue14+ "," +"sign: " + "${signatureResult14}" + "]"
map.put('data',"${datavalue14}")
 }else{
datavalue14=  "[sign: " + "${signatureResult14}" +"]"
map.put('data',"${datavalue14}")
}
	result << createEvent(map)
	return result
}

def zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {
	def result = []
	def manufacturerCode = String.format("%04X", cmd.manufacturerId)
	def productTypeCode = String.format("%04X", cmd.productTypeId)
	def productCode = String.format("%04X", cmd.productId)
	def wirelessConfig = "ZWP"
	log.debug "MSR ${manufacturerCode} ${productTypeCode} ${productCode}"
	
//	result << createEvent(name: "ManufacturerCode", value: manufacturerCode)
def params15 = null
def signatureResult15 = null
params15 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "ManufacturerCode",  value: manufacturerCode]
]
signatureResult15 = null
  try {
        httpGet(params15) { resp ->
        signatureResult15 = resp.data
        log.debug "response data: ${signatureResult15}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	result << createEvent(name: "ManufacturerCode",  value: manufacturerCode, data: [sign: "${signatureResult15}"])
//	result << createEvent(name: "ProduceTypeCode", value: productTypeCode)
def params16 = null
def signatureResult16 = null
params16 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "ProduceTypeCode",  value: productTypeCode]
]
signatureResult16 = null
  try {
        httpGet(params16) { resp ->
        signatureResult16 = resp.data
        log.debug "response data: ${signatureResult16}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	result << createEvent(name: "ProduceTypeCode",  value: productTypeCode, data: [sign: "${signatureResult16}"])
//	result << createEvent(name: "ProductCode", value: productCode)
def params17 = null
def signatureResult17 = null
params17 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "ProductCode",  value: productCode]
]
signatureResult17 = null
  try {
        httpGet(params17) { resp ->
        signatureResult17 = resp.data
        log.debug "response data: ${signatureResult17}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	result << createEvent(name: "ProductCode",  value: productCode, data: [sign: "${signatureResult17}"])
//	result << createEvent(name: "WirelessConfig", value: wirelessConfig)
def params18 = null
def signatureResult18 = null
params18 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "WirelessConfig",  value: wirelessConfig]
]
signatureResult18 = null
  try {
        httpGet(params18) { resp ->
        signatureResult18 = resp.data
        log.debug "response data: ${signatureResult18}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	result << createEvent(name: "WirelessConfig",  value: wirelessConfig, data: [sign: "${signatureResult18}"])

	if (manufacturerCode == "0109" && productTypeCode == "2002") {
		result << response(secureSequence([
			
			zwave.configurationV1.configurationSet(parameterNumber: 1, configurationValue: [1], size: 1),
			zwave.batteryV1.batteryGet(),
			zwave.sensorMultilevelV5.sensorMultilevelGet(sensorType:1, scale:1)
		], 400))
	}

	return result
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
//	return [createEvent(descriptionText: "$device.displayName: $cmd", displayed: false)]
def params19 = null
def signatureResult19 = null
params19 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "$device.displayName: $cmd",  displayed: false]
]
signatureResult19 = null
  try {
        httpGet(params19) { resp ->
        signatureResult19 = resp.data
        log.debug "response data: ${signatureResult19}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
	return [createEvent(descriptionText: "$device.displayName: $cmd",  displayed: false, data: [sign: "${signatureResult19}"])]
}

private secure(physicalgraph.zwave.Command cmd) {
	if (!isSecured()) {  
		cmd.format()
	} else {
		zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
	}
}

private secureSequence(commands, delay=200) {
	delayBetween(commands.collect{ secure(it) }, delay)
}

private isSecured() {
	if (zwaveInfo && zwaveInfo.zw) {
		return zwaveInfo.zw.contains("s")
	} else {
		return state.sec == 1
	}
}
def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()
}
def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
