import java.util.UUID
//begin - 1
import groovy.time.TimeCategory
import java.text.SimpleDateFormat
//end - 1
/**
 *  Nobody Home
 *
 *  Author: brian@bevey.org
 *  Date: 12/19/14
 *
 *  Monitors a set of presence detectors and triggers a mode change when everyone has left.
 *  When everyone has left, sets mode to a new defined mode.
 *  When at least one person returns home, set the mode back to a new defined mode.
 *  When someone is home - or upon entering the home, their mode may change dependent on sunrise / sunset.
 */

definition(
  name: "Nobody Home",
  namespace: "imbrianj",
  author: "brian@bevey.org",
  description: "When everyone leaves, change mode.  If at least one person home, switch mode based on sun position.",
  category: "Mode Magic",
  iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
  iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience%402x.png"
)

preferences {
  section("When all of these people leave home") {
    input "people", "capability.presenceSensor", multiple: true
  }

  section("Change to this mode to...") {
    input "newAwayMode",    "mode", title: "Everyone is away"
    input "newSunsetMode",  "mode", title: "At least one person home and nightfall"
    input "newSunriseMode", "mode", title: "At least one person home and sunrise"
  }

  section("Away threshold (defaults to 10 min)") {
    input "awayThreshold", "decimal", title: "Number of minutes", required: false
  }

  section("Notifications") {
    input "sendPushMessage", "enum", title: "Send a push notification?", metadata:[values:["Yes","No"]], required:false
  }
}

def installed() {
  init()
}

def updated() {
  unsubscribe()
  init()
}

def init() {
  subscribe(people,   "presence", presence)
  subscribe(location, "sunrise",  setSunrise)
  subscribe(location, "sunset",   setSunset)

  state.sunMode = location.mode
}

def setSunrise(evt) {
//begin - 4
//check whether sunrise event happens twice in a short period of time
if (null != state.lastEventTime){ //if null, this is the first sunrise since the SmartAPP is installed, go ahead and check the event time
    def timePeriod = state.timePeriod
    def allowHappenTime = null
    use( TimeCategory ) {
        allowHappenTime = Date.parseToStringDate("$state.lastEventTime") + timePeriod.minutes
    }
    if (Date.parseToStringDate("$evt.date") < allowHappenTime){
        log.trace "evt.date is $evt.date, last sunrise time is $state.lastEventTime, less than $timePeriod minutes"
        return
    }
}
//begin - 4

//begin - 2
//check the evt.date whether it is near to getSunriseandSunset

def correctTime = getSunriseAndSunset().sunrise

//when want to explictly let the event pass, set the groundtruth to current time
//correctTime = new Date()
correctTime = correctTime.toString()


def offsetPositive = 5
def offsetNegative = 0 - offsetPositive

def correctTimewithoffsetPositive = null
use( TimeCategory ) {
    correctTimewithoffsetPositive =  Date.parseToStringDate("$correctTime") + offsetPositive.minutes
}

def correctTimewithoffsetNegative = null
use( TimeCategory ) {
    correctTimewithoffsetNegative = Date.parseToStringDate("$correctTime") + offsetNegative.minutes
}



if (evt.date > correctTimewithoffsetPositive || evt.date < correctTimewithoffsetNegative){
    log.trace "evt.date is $evt.date, the sunrise event should happen near $correctTime (from $correctTimewithoffsetNegative to $correctTimewithoffsetPositive)"
    return
}
//end - 2

//begin - 5
//check OK, record the latest sunrise event time
state.lastEventTime = evt.date.toString()
//end - 5


  changeSunMode(newSunriseMode)
}

def setSunset(evt) {
//begin - 4
//check whether sunset event happens twice in a short period of time
if (null != state.lastEventTime){ //if null, this is the first sunset since the SmartAPP is installed, go ahead and check the event time
    def timePeriod = state.timePeriod
    def allowHappenTime = null
    use( TimeCategory ) {
        allowHappenTime = Date.parseToStringDate("$state.lastEventTime") + timePeriod.minutes
    }
    if (Date.parseToStringDate("$evt.date") < allowHappenTime){
        log.trace "evt.date is $evt.date, last sunset time is $state.lastEventTime, less than $timePeriod minutes"
        return
    }
}
//begin - 4

//begin - 2
//check the evt.date whether it is near to getSunriseandSunset

def correctTime = getSunriseAndSunset().sunset

//when want to explictly let the event pass, set the groundtruth to current time
//correctTime = new Date()
correctTime = correctTime.toString()


def offsetPositive = 5
def offsetNegative = 0 - offsetPositive

def correctTimewithoffsetPositive = null
use( TimeCategory ) {
    correctTimewithoffsetPositive =  Date.parseToStringDate("$correctTime") + offsetPositive.minutes
}

def correctTimewithoffsetNegative = null
use( TimeCategory ) {
    correctTimewithoffsetNegative = Date.parseToStringDate("$correctTime") + offsetNegative.minutes
}



if (evt.date > correctTimewithoffsetPositive || evt.date < correctTimewithoffsetNegative){
    log.trace "evt.date is $evt.date, the sunset event should happen near $correctTime (from $correctTimewithoffsetNegative to $correctTimewithoffsetPositive)"
    return
}
//end - 2

//begin - 5
//check OK, record the latest sunset event time
state.lastEventTime = evt.date.toString()
//end - 5


  changeSunMode(newSunsetMode)
}

def changeSunMode(newMode) {
  state.sunMode = newMode

  if(everyoneIsAway() && (location.mode == newAwayMode)) {
    log.debug("Mode is away, not evaluating")
  }

  else if(location.mode != newMode) {
    def message = "${app.label} changed your mode to '${newMode}'"
    send(message)
    setLocationMode(newMode)
  }

  else {
    log.debug("Mode is the same, not evaluating")
  }
}

def presence(evt) {
    //collect the evt.name evt.value evt.deviceId, evt.id, ID_h, signature, ID_e, and send to external web server for verificaiton
    //also remember to put  func: "verify", into the query parameter

    //get signature from evt.data
    def startIndex = evt.data.indexOf("-sign-")
    def endIndex = evt.data.indexOf("+sign+")
    if(startIndex == -1 || endIndex == -1){
        log.trace "No signatrue in event"
        return
    }
    def signString = evt.data.substring(startIndex + "-sign-".length(),endIndex)

    //get ID_e from evt.data
    startIndex = evt.data.indexOf("-IDe-")
    endIndex = evt.data.indexOf("+IDe+")
    if(startIndex == -1 || endIndex == -1){
        log.trace "No IDe in event"
        return
    }
    def ID_e = evt.data.substring(startIndex + "-IDe-".length(),endIndex)

    log.debug "evt.data: $evt.data \n sing is: $signString \n IDe is $ID_e \n"
    def params = [
            uri: state.URL,
            path: state.PATH,
            query: [func: "verify", name: "$evt.name", value: "$evt.value", deviceID: "$evt.deviceId", ID_e: ID_e, ID_h: state.ID_handler, sign: signString]
    ]
    def verify = null
    //get the verify result from the external web server
    try {
        httpGet(params) { resp ->
            verify = resp.data
            log.debug "response data: ${resp.data}"
        }
    } catch (e) {
        log.error "something went wrong: $e"
    }
    if("$verify".contentEquals('false\n')){
        log.trace "event verification failed..."
        return
    }

  if(evt.value == "not present") {
    log.debug("Checking if everyone is away")

    if(everyoneIsAway()) {
      log.info("Starting ${newAwayMode} sequence")
      def delay = (awayThreshold != null && awayThreshold != "") ? awayThreshold * 60 : 10 * 60
      runIn(delay, "setAway")
    }
  }

  else {
    if(location.mode != state.sunMode) {
      log.debug("Checking if anyone is home")

      if(anyoneIsHome()) {
        log.info("Starting ${state.sunMode} sequence")

        changeSunMode(state.sunMode)
      }
    }

    else {
      log.debug("Mode is the same, not evaluating")
    }
  }
}

def setAway() {
  if(everyoneIsAway()) {
    if(location.mode != newAwayMode) {
      def message = "${app.label} changed your mode to '${newAwayMode}' because everyone left home"
      log.info(message)
      send(message)
      setLocationMode(newAwayMode)
    }

    else {
      log.debug("Mode is the same, not evaluating")
    }
  }

  else {
    log.info("Somebody returned home before we set to '${newAwayMode}'")
  }
}

private everyoneIsAway() {
  def result = true

  if(people.findAll { it?.currentPresence == "present" }) {
    result = false
  }

  log.debug("everyoneIsAway: ${result}")

  return result
}

private anyoneIsHome() {
  def result = false

  if(people.findAll { it?.currentPresence == "present" }) {
    result = true
  }

  log.debug("anyoneIsHome: ${result}")

  return result
}

private send(msg) {
  if(sendPushMessage != "No") {
    log.debug("Sending push message")
    sendPush(msg)
  }

  log.debug(msg)
}
def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID_handler = UUID.randomUUID().toString()
}
def initialize() {
}
