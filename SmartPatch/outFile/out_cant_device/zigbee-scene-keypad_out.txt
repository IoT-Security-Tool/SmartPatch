 import java.util.UUID
"License"
"AS IS"

import groovy.json.JsonOutput
import physicalgraph.zigbee.zcl.DataType

metadata {
	definition (name: "Zigbee Scene Keypad", namespace: "smartthings", author: "SmartThings", mcdSync: true, ocfDeviceType: "x.com.st.d.remotecontroller") {
		capability "Actuator"
		capability "Button"
		capability "Configuration"
		capability "Refresh"
		capability "Sensor"
		capability "Health Check"

                fingerprint profileId: "0104", inClusters: "0000, 0003, 0004, 0005", outClusters: "0003, 0004, 0005", manufacturer: "REXENSE", model: "HY0048", deviceJoinName: "GDKES Scene Keypad", vid: "generic-4-button-alt"
                fingerprint profileId: "0104", inClusters: "0000, 0003, 0004, 0005", outClusters: "0003, 0004, 0005", manufacturer: "REXENSE", model: "0106-G", deviceJoinName: "GDKES Scene Keypad", vid: "generic-6-button-alt"
                fingerprint profileId: "0104", inClusters: "0000, 0005", outClusters: "0000, 0005, 0017", manufacturer: "ORVIBO", model: "cef8701bb8664a67a83033c071ef05f2", deviceJoinName: "ORVIBO Scene Keypad", vid: "generic-3-button-alt"
                fingerprint profileId: "0104", inClusters: "0004", outClusters: "0000, 0001, 0003, 0004, 0005, 0B05", manufacturer: "HEIMAN", model: "E-SceneSwitch-EM-3.0", deviceJoinName: "HEIMAN Scene Keypad", vid: "generic-4-button-alt"

    }

	tiles {
		standardTile("button", "device.button", width: 2, height: 2) {
			state "default", label: "", icon: "st.unknown.zwave.remote-controller", backgroundColor: "#ffffff"
			state "button 1 pushed", label: "pushed #1", icon: "st.unknown.zwave.remote-controller", backgroundColor: "#00A0DC"
		}
        
		standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat") {
			state "default", action:"refresh.refresh", icon:"st.secondary.refresh"
		}
		main (["button"])
		details(["button", "refresh"])
	}
}

def parse(String description) {
	def map = zigbee.getEvent(description)
	def result = map ? map : parseAttrMessage(description)
	if (result?.name == "switch") {
//		result = createEvent(descriptionText: "Wake up event came in", isStateChange: true)
def params1 = null
def signatureResult1 = null
params1 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",descriptionText: "Wake up event came in",  isStateChange: true]
]
signatureResult1 = null
  try {
        httpGet(params1) { resp ->
        signatureResult1 = resp.data
        log.debug "response data: ${signatureResult1}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
		result = createEvent(descriptionText: "Wake up event came in",  isStateChange: true, data: [sign: "${signatureResult1}"])
	}
	log.debug "Description ${description} parsed to ${result}"
	return result
}

def parseAttrMessage(description) {
	def descMap = zigbee.parseDescriptionAsMap(description)    
	if (descMap?.clusterInt == 0x0017 || descMap?.clusterInt == 0xFE05 || descMap?.clusterInt == 0x0005) {
	        def event = [:]
                def buttonNumber
                if (descMap?.clusterInt == 0x0017) {
				buttonNumber = Integer.valueOf(descMap.data[0])
                } else if (descMap?.clusterInt == 0xFE05) {
				buttonNumber = Integer.valueOf(descMap?.value)
                } else if(descMap?.clusterInt == 0x0005) {
				buttonNumber = buttonNum[device.getDataValue("model")][descMap.data[2]]
                }
       		log.debug "Number is ${buttonNumber}"
//                event = createEvent(name: "button", value: "pushed", data: [buttonNumber: buttonNumber], descriptionText: "pushed", isStateChange: true)
def params2 = null
def signatureResult2 = null
params2 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "button",  value: "pushed",  data: [buttonNumber: buttonNumber],  descriptionText: "pushed",  isStateChange: true]
]
signatureResult2 = null
  try {
        httpGet(params2) { resp ->
        signatureResult2 = resp.data
        log.debug "response data: ${signatureResult2}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
                event = createEvent(name: "button",  value: "pushed",  data: [ sign: "${signatureResult2}" ,buttonNumber: buttonNumber],  descriptionText: "pushed",  isStateChange: true)
                if (buttonNumber != 1) {
//       			sendEventToChild(buttonNumber, event)
def params3 = null
def signatureResult3 = null
log.debug "id is ${device.id}"
 params3 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${oChild(buttonNumber,  event?.name}", value: "${oChild(buttonNumber,  event?.value}"]
	]
signatureResult3 = null
try {
    httpGet(params3) { resp ->
        signatureResult3 = resp.data
        log.debug "response data: ${signatureResult3}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue3= ''
if(oChild(buttonNumber,  event.containsKey('data') ){
datavalue3 = oChild(buttonNumber,  event['data']
datavalue3 = "[" + datavalue3+ "," +"sign: " + "${signatureResult3}" + "]"
oChild(buttonNumber,  event.put('data',"${datavalue3}")
 }else{
datavalue3=  "[sign: " + "${signatureResult3}" +"]"
oChild(buttonNumber,  event.put('data',"${datavalue3}")
}
       			sendEvent(oChild(buttonNumber,  event)
                } else {
//       			sendEvent(event)
def params4 = null
def signatureResult4 = null
log.debug "id is ${device.id}"
 params4 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${event?.name}", value: "${event?.value}"]
	]
signatureResult4 = null
try {
    httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue4= ''
if(event.containsKey('data') ){
datavalue4 = event['data']
datavalue4 = "[" + datavalue4+ "," +"sign: " + "${signatureResult4}" + "]"
event.put('data',"${datavalue4}")
 }else{
datavalue4=  "[sign: " + "${signatureResult4}" +"]"
event.put('data',"${datavalue4}")
}
       			sendEvent(event)
       	        }
    	}
}

//def sendEventToChild(buttonNumber, event) {
def params5 = null
def signatureResult5 = null
log.debug "id is ${device.id}"
 params5 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${oChild(buttonNumber,  event) ?.name}", value: "${oChild(buttonNumber,  event) ?.value}"]
	]
signatureResult5 = null
try {
    httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue5= ''
if(oChild(buttonNumber,  event) .containsKey('data') ){
datavalue5 = oChild(buttonNumber,  event) ['data']
datavalue5 = "[" + datavalue5+ "," +"sign: " + "${signatureResult5}" + "]"
oChild(buttonNumber,  event) .put('data',"${datavalue5}")
 }else{
datavalue5=  "[sign: " + "${signatureResult5}" +"]"
oChild(buttonNumber,  event) .put('data',"${datavalue5}")
}
def sendEvent(oChild(buttonNumber,  event) )
	String childDni = "${device.deviceNetworkId}:$buttonNumber"
	def child = childDevices.find { it.deviceNetworkId == childDni }
//	child?.sendEvent(event)
def params6 = null
def signatureResult6 = null
log.debug "id is ${device.id}"
 params6 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${event?.name}", value: "${event?.value}"]
	]
signatureResult6 = null
try {
    httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue6= ''
if(event.containsKey('data') ){
datavalue6 = event['data']
datavalue6 = "[" + datavalue6+ "," +"sign: " + "${signatureResult6}" + "]"
event.put('data',"${datavalue6}")
 }else{
datavalue6=  "[sign: " + "${signatureResult6}" +"]"
event.put('data',"${datavalue6}")
}
	child?.sendEvent(event)
}

def refresh() {
	return zigbee.enrollResponse()
}

def ping() {
	refresh()
}

def configure() {
	def cmds = zigbee.enrollResponse()
	if (isHeimanButton())
		cmds += zigbee.writeAttribute(0x0000, 0x0012, DataType.BOOLEAN, 0x01) +
		addHubToGroup(0x000F) + addHubToGroup(0x0010) + addHubToGroup(0x0011) + addHubToGroup(0x0013)
	return cmds
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

    	def numberOfButtons = getChildCount()
//	sendEvent(name: "numberOfButtons", value: numberOfButtons, displayed: false)
def params7 = null
def signatureResult7 = null
log.debug "id is ${device.id}"
 params7 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "numberOfButtons",  value: numberOfButtons,  displayed: false]
	]
signatureResult7 = null
try {
    httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "numberOfButtons",  value: numberOfButtons,  displayed: false, data: [sign: "${signatureResult7}"])
//	sendEvent(name: "checkInterval", value: 32 * 60, displayed: false, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID])
def params8 = null
def signatureResult8 = null
log.debug "id is ${device.id}"
 params8 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "checkInterval",  value: 32 * 60,  displayed: false,  data: [protocol: "zigbee",  hubHardwareId: device.hub.hardwareID]]
	]
signatureResult8 = null
try {
    httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "checkInterval",  value: 32 * 60,  displayed: false,  data: [ sign: "${signatureResult8}" ,protocol: "zigbee",  hubHardwareId: device.hub.hardwareID])
	if (!childDevices) {
		addChildButtons(numberOfButtons)
	}
	if (childDevices) {
		def event
		for (def endpoint : 1..device.currentValue("numberOfButtons")) {
//			event = createEvent(name: "button", value: "pushed", isStateChange: true, displayed: false)
def params9 = null
def signatureResult9 = null
params9 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "button",  value: "pushed",  isStateChange: true,  displayed: false]
]
signatureResult9 = null
  try {
        httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
			event = createEvent(name: "button",  value: "pushed",  isStateChange: true,  displayed: false, data: [sign: "${signatureResult9}"])
//			sendEventToChild(endpoint, event)
def params10 = null
def signatureResult10 = null
log.debug "id is ${device.id}"
 params10 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${oChild(endpoint,  event?.name}", value: "${oChild(endpoint,  event?.value}"]
	]
signatureResult10 = null
try {
    httpGet(params10) { resp ->
        signatureResult10 = resp.data
        log.debug "response data: ${signatureResult10}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue10= ''
if(oChild(endpoint,  event.containsKey('data') ){
datavalue10 = oChild(endpoint,  event['data']
datavalue10 = "[" + datavalue10+ "," +"sign: " + "${signatureResult10}" + "]"
oChild(endpoint,  event.put('data',"${datavalue10}")
 }else{
datavalue10=  "[sign: " + "${signatureResult10}" +"]"
oChild(endpoint,  event.put('data',"${datavalue10}")
}
			sendEvent(oChild(endpoint,  event)
		}
	}

//	sendEvent(name: "button", value: "pushed", isStateChange: true, displayed: false)
def params11 = null
def signatureResult11 = null
log.debug "id is ${device.id}"
 params11 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "button",  value: "pushed",  isStateChange: true,  displayed: false]
	]
signatureResult11 = null
try {
    httpGet(params11) { resp ->
        signatureResult11 = resp.data
        log.debug "response data: ${signatureResult11}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "button",  value: "pushed",  isStateChange: true,  displayed: false, data: [sign: "${signatureResult11}"])
//	sendEvent(name: "supportedButtonValues", value: supportedButtonValues.encodeAsJSON(), displayed: false)
def params12 = null
def signatureResult12 = null
log.debug "id is ${device.id}"
 params12 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "supportedButtonValues",  value: supportedButtonValues.encodeAsJSON(),  displayed: false]
	]
signatureResult12 = null
try {
    httpGet(params12) { resp ->
        signatureResult12 = resp.data
        log.debug "response data: ${signatureResult12}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "supportedButtonValues",  value: supportedButtonValues.encodeAsJSON(),  displayed: false, data: [sign: "${signatureResult12}"])
}

def updated() {
	runIn(2, "initialize", [overwrite: true])
}

def initialize() {
	
}

private addChildButtons(numberOfButtons) {
	for (def endpoint : 2..numberOfButtons) {
		try {
			String childDni = "${device.deviceNetworkId}:$endpoint"
			def childLabel = (device.displayName.endsWith(' 1') ? device.displayName[0..-2] : device.displayName) + "${endpoint}"
			def child = addChildDevice("Child Button", childDni, device.getHub().getId(), [
					completedSetup: true,
					label         : childLabel,
					isComponent   : true,
					componentName : "button$endpoint",
					componentLabel: "Button $endpoint"
			])
//			child.sendEvent(name: "supportedButtonValues", value: supportedButtonValues.encodeAsJSON(), displayed: false)
def params13 = null
def signatureResult13 = null
log.debug "id is ${device.id}"
 params13 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "supportedButtonValues",  value: supportedButtonValues.encodeAsJSON(),  displayed: false]
	]
signatureResult13 = null
try {
    httpGet(params13) { resp ->
        signatureResult13 = resp.data
        log.debug "response data: ${signatureResult13}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
			child.sendEvent(name: "supportedButtonValues",  value: supportedButtonValues.encodeAsJSON(),  displayed: false, data: [sign: "${signatureResult13}"])
		} catch(Exception e) {
			log.debug "Exception: ${e}"
		}
	}
}

private getSupportedButtonValues() {
	def values = ["pushed"]
	return values
}

private getChildCount() {
	if (device.getDataValue("model") == "0106-G") {
		return 6
	} else if (device.getDataValue("model") == "HY0048" || device.getDataValue("model") == "E-SceneSwitch-EM-3.0") {
		return 4
	} else if (device.getDataValue("model") == "cef8701bb8664a67a83033c071ef05f2") {
		return 3
	}
}

private getCLUSTER_GROUPS() { 0x0004 }

private boolean isHeimanButton() {
	device.getDataValue("model") == "E-SceneSwitch-EM-3.0"
}

private List addHubToGroup(Integer groupAddr) {
	["st cmd 0x0000 0x01 ${CLUSTER_GROUPS} 0x00 {${zigbee.swapEndianHex(zigbee.convertToHexString(groupAddr,4))} 00}",
	 "delay 200"]
}

private getButtonNum() {[
		"E-SceneSwitch-EM-3.0" : [
				"01" : 2,
				"02" : 1,
				"03" : 3,
				"05" : 4
		]
]}
