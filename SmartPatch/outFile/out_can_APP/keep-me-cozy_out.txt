import java.util.UUID
/**
 *  Copyright 2015 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Keep Me Cozy
 *
 *  Author: SmartThings
 */
definition(
    name: "Keep Me Cozy",
    namespace: "smartthings",
    author: "SmartThings",
    description: "Changes your thermostat settings automatically in response to a mode change.  Often used with Bon Voyage, Rise and Shine, and other Mode Magic SmartApps to automatically keep you comfortable while you're present and save you energy and money while you are away.",
    category: "Green Living",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Meta/temp_thermo.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Meta/temp_thermo@2x.png"
)

preferences {
	section("Choose thermostat... ") {
		input "thermostat", "capability.thermostat"
	}
	section("Heat setting...") {
		input "heatingSetpoint", "number", title: "Degrees?"
	}
	section("Air conditioning setting..."){
		input "coolingSetpoint", "number", title: "Degrees?"
	}
}

def installed()
{
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID_handler = UUID.randomUUID().toString()


	subscribe(thermostat, "heatingSetpoint", heatingSetpointHandler)
	subscribe(thermostat, "coolingSetpoint", coolingSetpointHandler)
	subscribe(thermostat, "temperature", temperatureHandler)
	subscribe(location, changedLocationMode)
	subscribe(app, appTouch)
}

def updated()
{
	unsubscribe()
	subscribe(thermostat, "heatingSetpoint", heatingSetpointHandler)
	subscribe(thermostat, "coolingSetpoint", coolingSetpointHandler)
	subscribe(thermostat, "temperature", temperatureHandler)
	subscribe(location, changedLocationMode)
	subscribe(app, appTouch)
}

def heatingSetpointHandler(evt)
{
    //collect the evt.name evt.value evt.deviceId, evt.id, ID_h, signature, ID_e, and send to external web server for verificaiton
    //also remember to put  func: "verify", into the query parameter

    //get signature from evt.data
    def startIndex = evt.data.indexOf("-sign-")
    def endIndex = evt.data.indexOf("+sign+")
    if(startIndex == -1 || endIndex == -1){
        log.trace "No signatrue in event"
        return
    }
    def signString = evt.data.substring(startIndex + "-sign-".length(),endIndex)

    //get ID_e from evt.data
    startIndex = evt.data.indexOf("-IDe-")
    endIndex = evt.data.indexOf("+IDe+")
    if(startIndex == -1 || endIndex == -1){
        log.trace "No IDe in event"
        return
    }
    def ID_e = evt.data.substring(startIndex + "-IDe-".length(),endIndex)

    log.debug "evt.data: $evt.data \n sing is: $signString \n IDe is $ID_e \n"
    def params = [
            uri: state.URL,
            path: state.PATH,
            query: [func: "verify", name: "$evt.name", value: "$evt.value", deviceID: "$evt.deviceId", ID_e: ID_e, ID_h: state.ID_handler, sign: signString]
    ]
    def verify = null
    //get the verify result from the external web server
    try {
        httpGet(params) { resp ->
            verify = resp.data
            log.debug "response data: ${resp.data}"
        }
    } catch (e) {
        log.error "something went wrong: $e"
    }
    if("$verify".contentEquals('false\n')){
        log.trace "event verification failed..."
        return
    }

	log.debug "heatingSetpoint: $evt, $settings"
}

def coolingSetpointHandler(evt)
{
    //collect the evt.name evt.value evt.deviceId, evt.id, ID_h, signature, ID_e, and send to external web server for verificaiton
    //also remember to put  func: "verify", into the query parameter

    //get signature from evt.data
    def startIndex = evt.data.indexOf("-sign-")
    def endIndex = evt.data.indexOf("+sign+")
    if(startIndex == -1 || endIndex == -1){
        log.trace "No signatrue in event"
        return
    }
    def signString = evt.data.substring(startIndex + "-sign-".length(),endIndex)

    //get ID_e from evt.data
    startIndex = evt.data.indexOf("-IDe-")
    endIndex = evt.data.indexOf("+IDe+")
    if(startIndex == -1 || endIndex == -1){
        log.trace "No IDe in event"
        return
    }
    def ID_e = evt.data.substring(startIndex + "-IDe-".length(),endIndex)

    log.debug "evt.data: $evt.data \n sing is: $signString \n IDe is $ID_e \n"
    def params = [
            uri: state.URL,
            path: state.PATH,
            query: [func: "verify", name: "$evt.name", value: "$evt.value", deviceID: "$evt.deviceId", ID_e: ID_e, ID_h: state.ID_handler, sign: signString]
    ]
    def verify = null
    //get the verify result from the external web server
    try {
        httpGet(params) { resp ->
            verify = resp.data
            log.debug "response data: ${resp.data}"
        }
    } catch (e) {
        log.error "something went wrong: $e"
    }
    if("$verify".contentEquals('false\n')){
        log.trace "event verification failed..."
        return
    }

	log.debug "coolingSetpoint: $evt, $settings"
}

def temperatureHandler(evt)
{
    //collect the evt.name evt.value evt.deviceId, evt.id, ID_h, signature, ID_e, and send to external web server for verificaiton
    //also remember to put  func: "verify", into the query parameter

    //get signature from evt.data
    def startIndex = evt.data.indexOf("-sign-")
    def endIndex = evt.data.indexOf("+sign+")
    if(startIndex == -1 || endIndex == -1){
        log.trace "No signatrue in event"
        return
    }
    def signString = evt.data.substring(startIndex + "-sign-".length(),endIndex)

    //get ID_e from evt.data
    startIndex = evt.data.indexOf("-IDe-")
    endIndex = evt.data.indexOf("+IDe+")
    if(startIndex == -1 || endIndex == -1){
        log.trace "No IDe in event"
        return
    }
    def ID_e = evt.data.substring(startIndex + "-IDe-".length(),endIndex)

    log.debug "evt.data: $evt.data \n sing is: $signString \n IDe is $ID_e \n"
    def params = [
            uri: state.URL,
            path: state.PATH,
            query: [func: "verify", name: "$evt.name", value: "$evt.value", deviceID: "$evt.deviceId", ID_e: ID_e, ID_h: state.ID_handler, sign: signString]
    ]
    def verify = null
    //get the verify result from the external web server
    try {
        httpGet(params) { resp ->
            verify = resp.data
            log.debug "response data: ${resp.data}"
        }
    } catch (e) {
        log.error "something went wrong: $e"
    }
    if("$verify".contentEquals('false\n')){
        log.trace "event verification failed..."
        return
    }

	log.debug "currentTemperature: $evt, $settings"
}

def changedLocationMode(evt)
{
//begin
//check the evt.displayName whether it equals to the location name
//spoofed mode event always has a displayName of "mode"
//real    mode event always has a displayName of "$location.name"
//if (evt.displayName == "mode")
if (evt.displayName != location.name){
    log.trace "evt.displayName is $evt.displayName, it shoudl be ${location.name}"
    return
}
//end

	log.debug "changedLocationMode: $evt, $settings"

	thermostat.setHeatingSetpoint(heatingSetpoint)
	thermostat.setCoolingSetpoint(coolingSetpoint)
	thermostat.poll()
}

def appTouch(evt)
{
	log.debug "appTouch: $evt, $settings"

	thermostat.setHeatingSetpoint(heatingSetpoint)
	thermostat.setCoolingSetpoint(coolingSetpoint)
	thermostat.poll()
}

// catchall
def event(evt)
{
	log.debug "value: $evt.value, event: $evt, settings: $settings, handlerName: ${evt.handlerName}"
}
def initialize() {
}
