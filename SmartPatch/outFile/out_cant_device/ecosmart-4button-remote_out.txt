 import java.util.UUID
"License"
"AS IS"

import groovy.json.JsonOutput
import physicalgraph.zigbee.zcl.DataType

metadata {
	definition (name: "EcoSmart 4-button Remote", namespace: "smartthings", author: "SmartThings", ocfDeviceType: "x.com.st.d.remotecontroller", mcdSync: true, runLocally: false, executeCommandsLocally: false, mnmn: "SmartThings", vid: "generic-4-button") {
		capability "Actuator"
		capability "Battery"
		capability "Button"
		capability "Holdable Button"
		capability "Configuration"
		capability "Sensor"
		capability "Health Check"

		fingerprint inClusters: "0000, 0001, 0003, 1000, FD01", outClusters: "0003, 0004, 0006, 0008, 0019, 0300, 1000", manufacturer: "LDS", model: "ZBT-CCTSwitch-D0001", deviceJoinName: "EcoSmart Remote Control" 
	}

	tiles {
		standardTile("button", "device.button", width: 2, height: 2) {
			state "default", label: "", icon: "st.unknown.zwave.remote-controller", backgroundColor: "#ffffff"
			state "button 1 pushed", label: "pushed #1", icon: "st.unknown.zwave.remote-controller", backgroundColor: "#00A0DC"
		}

		valueTile("battery", "device.battery", decoration: "flat", inactiveLabel: false) {
			state "battery", label:'${currentValue}% battery', unit:""
		}

		main (["button"])
		details(["button", "battery"])
	}
}

private getCLUSTER_GROUPS() { 0x0004 }

private channelNumber(String dni) {
	dni.split(":")[-1] as Integer
}

private getButtonName(buttonNum) {
	return "${device.displayName} " + "Button ${buttonNum}"
}

private void createChildButtonDevices(numberOfButtons) {
	state.oldLabel = device.label

	def existingChildren = getChildDevices()

	log.debug "Creating $numberOfButtons children"

	for (i in 1..numberOfButtons) {
		def newChildNetworkId = "${device.deviceNetworkId}:${i}"
		def childExists = (existingChildren.find {child -> child.getDeviceNetworkId() == newChildNetworkId} != NULL)

		if (!childExists) {
			log.debug "Creating child $i"
			def child = addChildDevice("Child Button", newChildNetworkId, device.hubId,
					[completedSetup: true, label: getButtonName(i),
					 isComponent: true, componentName: "button$i", componentLabel: "Button ${i}"])

//			child.sendEvent(name: "supportedButtonValues", value: ["pushed"].encodeAsJSON(), displayed: false)
		def signatureResult1= null
		signatureResult1 = 			child.getSignature("supportedButtonValues",["pushed"].encodeAsJSON())
			child.sendEvent(name: "supportedButtonValues",  value: ["pushed"].encodeAsJSON(),  displayed: false,data: [sign: "${signatureResult1}"])
//			child.sendEvent(name: "numberOfButtons", value: 1, displayed: false)
		def signatureResult2= null
		signatureResult2 = 			child.getSignature("numberOfButtons",1)
			child.sendEvent(name: "numberOfButtons",  value: 1,  displayed: false,data: [sign: "${signatureResult2}"])
//			child.sendEvent(name: "button", value: "pushed", data: [buttonNumber: 1], displayed: false)
		def signatureResult3= null
		signatureResult3 = 			child.getSignature("button","pushed")
			child.sendEvent(name: "button",  value: "pushed",  data: [buttonNumber: 1],  displayed: false,data: [sign: "${signatureResult3}"])
		} else {
			log.debug "Child $i already exists, not creating"
		}
	}
}

def installed() {
state.URL = "http://xxx.free.com"
state.PATH = "/work"
state.ID0 = UUID.randomUUID().toString()

	def numberOfButtons = 4
	state.ignoreNextButton3 = false

	createChildButtonDevices(numberOfButtons)

//	sendEvent(name: "supportedButtonValues", value: ["pushed"].encodeAsJSON(), displayed: false)
def params4 = null
def signatureResult4 = null
log.debug "id is ${device.id}"
 params4 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "supportedButtonValues",  value: ["pushed"].encodeAsJSON(),  displayed: false]
	]
signatureResult4 = null
try {
    httpGet(params4) { resp ->
        signatureResult4 = resp.data
        log.debug "response data: ${signatureResult4}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "supportedButtonValues",  value: ["pushed"].encodeAsJSON(),  displayed: false, data: [sign: "${signatureResult4}"])
//	sendEvent(name: "numberOfButtons", value: numberOfButtons, displayed: false)
def params5 = null
def signatureResult5 = null
log.debug "id is ${device.id}"
 params5 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "numberOfButtons",  value: numberOfButtons,  displayed: false]
	]
signatureResult5 = null
try {
    httpGet(params5) { resp ->
        signatureResult5 = resp.data
        log.debug "response data: ${signatureResult5}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "numberOfButtons",  value: numberOfButtons,  displayed: false, data: [sign: "${signatureResult5}"])
	numberOfButtons.times {
//		sendEvent(name: "button", value: "pushed", data: [buttonNumber: it+1], displayed: false)
def params6 = null
def signatureResult6 = null
log.debug "id is ${device.id}"
 params6 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "button",  value: "pushed",  data: [buttonNumber: it+1],  displayed: false]
	]
signatureResult6 = null
try {
    httpGet(params6) { resp ->
        signatureResult6 = resp.data
        log.debug "response data: ${signatureResult6}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
		sendEvent(name: "button",  value: "pushed",  data: [ sign: "${signatureResult6}" ,buttonNumber: it+1],  displayed: false)
	}

	
//	sendEvent(name: "DeviceWatch-Enroll", value: JsonOutput.toJson([protocol: "zigbee", scheme:"untracked"]), displayed: false)
def params7 = null
def signatureResult7 = null
log.debug "id is ${device.id}"
 params7 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name: "DeviceWatch-Enroll",  value: JsonOutput.toJson([protocol: "zigbee",  scheme:"untracked"]),  displayed: false]
	]
signatureResult7 = null
try {
    httpGet(params7) { resp ->
        signatureResult7 = resp.data
        log.debug "response data: ${signatureResult7}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
	sendEvent(name: "DeviceWatch-Enroll",  value: JsonOutput.toJson([protocol: "zigbee",  scheme:"untracked"]),  displayed: false, data: [sign: "${signatureResult7}"])
}

def updated() {
	if (childDevices && device.label != state.oldLabel) {
		childDevices.each {
			def newLabel = getButtonName(channelNumber(it.deviceNetworkId))
			it.setLabel(newLabel)
		}
		state.oldLabel = device.label
	}
}

def configure() {
	log.debug "Configuring device ${device.getDataValue("model")}"

	def cmds = zigbee.configureReporting(zigbee.POWER_CONFIGURATION_CLUSTER, 0x21, DataType.UINT8, 30, 21600, 0x01) +
			zigbee.readAttribute(zigbee.POWER_CONFIGURATION_CLUSTER, 0x21) +
			zigbee.addBinding(zigbee.ONOFF_CLUSTER) +
			
			addHubToGroup(0x4003)


	cmds
}

def parse(String description) {
	log.debug "Parsing message from device: '$description'"
	def event = zigbee.getEvent(description)
	if (event) {
		log.debug "Creating event: ${event}"
//		sendEvent(event)
def params8 = null
def signatureResult8 = null
log.debug "id is ${device.id}"
 params8 = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${event?.name}", value: "${event?.value}"]
	]
signatureResult8 = null
try {
    httpGet(params8) { resp ->
        signatureResult8 = resp.data
        log.debug "response data: ${signatureResult8}"
    }
} catch (e) {
    log.error "something went wrong : $e"
}
def datavalue8= ''
if(event.containsKey('data') ){
datavalue8 = event['data']
datavalue8 = "[" + datavalue8+ "," +"sign: " + "${signatureResult8}" + "]"
event.put('data',"${datavalue8}")
 }else{
datavalue8=  "[sign: " + "${signatureResult8}" +"]"
event.put('data',"${datavalue8}")
}
		sendEvent(event)
	} else {
		if ((description?.startsWith("catchall:")) || (description?.startsWith("read attr -"))) {
			def descMap = zigbee.parseDescriptionAsMap(description)
			if (descMap.clusterInt == zigbee.POWER_CONFIGURATION_CLUSTER && descMap.attrInt == 0x0021) {
				event = getBatteryEvent(zigbee.convertHexToInt(descMap.value))
			} else if (descMap.clusterInt == zigbee.ONOFF_CLUSTER ||
					descMap.clusterInt == zigbee.LEVEL_CONTROL_CLUSTER ||
					descMap.clusterInt == zigbee.COLOR_CONTROL_CLUSTER) {
				event = getButtonEvent(descMap)
			}
		}

		def result = []
		if (event) {
			log.debug "Creating event: ${event}"
//			result = createEvent(event)
def params9 = null
def signatureResult9 = null
params9 = [
uri: state.URL,
path: state.PATH,
query: [ID0: state.ID0, deviceID: device.id, func: "sign",name:"${event?.name}", value: "${event?.value}"]
]
signatureResult9 = null
  try {
        httpGet(params9) { resp ->
        signatureResult9 = resp.data
        log.debug "response data: ${signatureResult9}"
      }

} catch (e) {
    log.error "something went wronge: $e"
}
def datavalue9= ''
if(event.containsKey('data') ){
datavalue9 = event['data']
datavalue9 = "[" + datavalue9+ "," +"sign: " + "${signatureResult9}" + "]"
event.put('data',"${datavalue9}")
 }else{
datavalue9=  "[sign: " + "${signatureResult9}" +"]"
event.put('data',"${datavalue9}")
}
			result = createEvent(event)
		}

		return result
	}
}

private Map getBatteryEvent(value) {
	def result = [:]
	result.value = value / 2
	result.name = 'battery'
	result.descriptionText = "${device.displayName} battery was ${result.value}%"
	return result
}

private sendButtonEvent(buttonNumber, buttonState) {
	def child = childDevices?.find { channelNumber(it.deviceNetworkId) == buttonNumber }

	if (child) {
		def descriptionText = "$child.displayName was $buttonState" 

//		child?.sendEvent([name: "button", value: buttonState, data: [buttonNumber: 1], descriptionText: descriptionText, isStateChange: true])
		def signatureResult10= null
		signatureResult10 = 		child?.getSignature("button",buttonState)
		child?.sendEvent(name: "button",  value: buttonState,  data: [buttonNumber: 1],  descriptionText: descriptionText,  isStateChange: true,data: [sign: "${signatureResult10}"])
	} else {
		log.debug "Child device $buttonNumber not found!"
	}
}

private Map getButtonEvent(Map descMap) {
	def buttonState = ""
	def buttonNumber = 0
	Map result = [:]

	
	if (descMap.clusterInt == zigbee.ONOFF_CLUSTER) {
		buttonNumber = 1

	
	} else if (descMap.clusterInt == zigbee.LEVEL_CONTROL_CLUSTER &&
		(descMap.commandInt == 0x00 || descMap.commandInt == 0x01)) {
		buttonNumber = 2

	
	} else if (descMap.clusterInt == zigbee.COLOR_CONTROL_CLUSTER) {
		if (descMap.commandInt == 0x0A || (descMap.commandInt == 0x4B && descMap.data[0] != "00")) {
			if (state.ignoreNextButton3) {
				
				state.ignoreNextButton3 = false
			} else {
				buttonNumber = 3
			}
		}

	
	} else if (descMap.clusterInt == zigbee.LEVEL_CONTROL_CLUSTER &&
		descMap.commandInt == 0x04) {
		
		state.ignoreNextButton3 = true
		buttonNumber = 4
	}


	if (buttonNumber != 0) {
		
		sendButtonEvent(buttonNumber, "pushed")
	}
	result
}

private List addHubToGroup(Integer groupAddr) {
	["st cmd 0x0000 0x01 ${CLUSTER_GROUPS} 0x00 {${zigbee.swapEndianHex(zigbee.convertToHexString(groupAddr,4))} 00}",
	 "delay 200"]
}
def getSignature(name,value){
    def params = null
    def signatureResult = null
    params = [
        uri: state.URL,
        path: state.PATH,
        query: [ID0: state.ID0, deviceID: device.id, func: "sign", name: name, value: value,isStateChange: true]
    ]

    signatureResult = null
    try {
        httpGet(params) { resp ->
            signatureResult = resp.data
            log.debug "response data: ${signatureResult}"
        }
    } catch (e) {
        log.error "something went wrong on(): $e"
    }
    return signatureResult
}
