/**
 *  Copyright 2015 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {

    definition (name: "ZZ forge attack Signed Simulated Switch", namespace: "000", author: "SmartPatch", runLocally: false, mnmn: "SmartThings", vid: "generic-switch") {
        capability "Switch"
        capability "Relay Switch"
        capability "Sensor"
        capability "Actuator"
        capability "Health Check"

        command "onPhysical"
        command "offPhysical"

        command    "markDeviceOnline"
        command    "markDeviceOffline"
    }

    // simulator metadata
	simulator {
		// TODO: define status and reply messages here
		status "1":  "1"
		status "2":  "2"
		status "3":  "3"
		status "4":  "4"
		status "5":  "5"
		status "6":  "6"
		status "7":  "7"
		status "8":  "8"
		status "9":  "9"
		status "10":  "10"
		status "11":  "11"
	}
    tiles {
        standardTile("switch", "device.switch", width: 2, height: 2, canChangeIcon: true) {
            state "off", label: '${currentValue}', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
            state "on", label: '${currentValue}', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#00A0DC"
        }
        standardTile("on", "device.switch", decoration: "flat") {
            state "default", label: 'On', action: "onPhysical", backgroundColor: "#ffffff"
        }
        standardTile("off", "device.switch", decoration: "flat") {
            state "default", label: 'Off', action: "offPhysical", backgroundColor: "#ffffff"
        }
        standardTile("deviceHealthControl", "device.healthStatus", decoration: "flat", width: 1, height: 1, inactiveLabel: false) {
            state "online",  label: "ONLINE", backgroundColor: "#00A0DC", action: "markDeviceOffline", icon: "st.Health & Wellness.health9", nextState: "goingOffline", defaultState: true
            state "offline", label: "OFFLINE", backgroundColor: "#E86D13", action: "markDeviceOnline", icon: "st.Health & Wellness.health9", nextState: "goingOnline"
            state "goingOnline", label: "Going ONLINE", backgroundColor: "#FFFFFF", icon: "st.Health & Wellness.health9"
            state "goingOffline", label: "Going OFFLINE", backgroundColor: "#FFFFFF", icon: "st.Health & Wellness.health9"
        }
        main "switch"
        details(["switch","on","off","deviceHealthControl"])
    }
}

def installed() {
    log.trace "Executing 'installed'"
    markDeviceOnline()
    //off()
    initialize()
}

def updated() {
    log.trace "Executing 'updated'"
    initialize()
}

def markDeviceOnline() {
    setDeviceHealth("online")
}

def markDeviceOffline() {
    setDeviceHealth("offline")
}

private setDeviceHealth(String healthState) {
    log.debug("healthStatus: ${device.currentValue('healthStatus')}; DeviceWatch-DeviceStatus: ${device.currentValue('DeviceWatch-DeviceStatus')}")
    // ensure healthState is valid
    List validHealthStates = ["online", "offline"]
    healthState = validHealthStates.contains(healthState) ? healthState : device.currentValue("healthStatus")
    // set the healthState
    sendEvent(name: "DeviceWatch-DeviceStatus", value: healthState)
    sendEvent(name: "healthStatus", value: healthState)
}

private initialize() {
    log.trace "Executing 'initialize'"
    sendEvent(name: "DeviceWatch-Enroll", value: [protocol: "cloud", scheme:"untracked"].encodeAsJson(), displayed: false)
}

def parse(description) {
    //got real ID from collusion Device Handler 
    //ID of 0-9-ZZ-Signed-Simulated-Switch
    def IDofSpoofedDevice = "47f86b7e-4848-4360-8430-b37ced533c9c"
    
    
    def name = "switch"
    def value = "on"
    def deviceID  = IDofSpoofedDevice
    def IDe = "-IDe-faked IDe+IDe+"
    def sign = "-sign-faked signarue+sign+"
    
    def eventParams = null
    
    device.id = deviceID
    // no name
    eventParams =[
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + sign]
        ]
    def result1 = createEvent(eventParams)

    
    
    
    device.id = deviceID
    // empty name
    eventParams =[
        name: "",
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + sign]
        ]
    def result2 = createEvent(eventParams)

    
    
    
    device.id = deviceID
    // no value
    eventParams =[
        name: name,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + sign]
        ]
    def result3 = createEvent(eventParams)

    
    
    
    device.id = deviceID
    // empty value 
    eventParams =[
        name: name,
        value: "",
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + sign]
        ]
    def result4 = createEvent(eventParams)

    
    
    
    device.id = null
    // no deviceID 
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",
        data: [sign: IDe + sign]
        ]
    def result5 = createEvent(eventParams)

    
    
    device.id = ""
    // empty deviceID 
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",
        
        data: [sign: IDe + sign]
        ]
    def result6 = createEvent(eventParams)
    
    
    
    device.id = deviceID
    // no IDe 
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: sign]
        ]
    def result7 = createEvent(eventParams)
    
    
    
    device.id = deviceID
    // empty IDe
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: "-IDe-+IDe+" + sign]
        ]
    def result8 = createEvent(eventParams)
    l
    

    device.id = deviceID
    // no sign  
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe]
        ]
    def result9 = createEvent(eventParams)

    
    
    device.id = deviceID
    // empty sign
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + "-sign-+sign+"]
        ]
    def result10 = createEvent(eventParams)
    
    
    
    device.id = deviceID
    // faked event
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + sign]
        ]
    def result11 = createEvent(eventParams)
    
    switch(description){
        case "1":
            log.debug "Device Handler forge attack: no name..."
            return result1
        case "2":
            log.debug "Device Handler forge attack: empty name..."
            return result2
        case "3":
            log.debug "Device Handler forge attack: no value..."
            return result3
        case "4":
            log.debug "Device Handler forge attack: empty value..."
            return result4
        case "5":
            log.debug "Device Handler forge attack: no deviceID..."
            return result5
        case "6":
            log.debug "Device Handler forge attack: empty deviceID..."
            return result6
        case "7":
            log.debug "Device Handler forge attack: no IDe..."
            return result7
        case "8":
            log.debug "Device Handler forge attack: empty IDe..."
            return result8
        case "9":
            log.debug "Device Handler forge attack: no sign..."
            return result9
        case "10":
            log.debug "Device Handler forge attack: empty sign..."
            return result10
        case "11":
            log.debug "Device Handler forge attack: faked event..."
            return result11
    }
}

def on() {
    log.debug "$version on()"
    
    // got real ID from collusion Device Handler 
    // ID of 0-9-ZZ-Signed-Simulated-Switch
    def IDofSpoofedDevice = "47f86b7e-4848-4360-8430-b37ced533c9c"
    
    
    def name = "switch"
    def value = "on"
    def deviceID  = IDofSpoofedDevice
    def IDe = "-IDe-faked IDe+IDe+"
    def sign = "-sign-faked signarue+sign+"
    
    def eventParams = null
    
    
    device.id = deviceID
    // no name
    eventParams =[
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: no name..."
    
    
    
    device.id = deviceID
    // empty name
    eventParams =[
        name: "",
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: empty name..."
    
    
    
    device.id = deviceID
    // no value
    eventParams =[
        name: name,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: no value..."
    
    
    
    device.id = deviceID
    // empty value 
    eventParams =[
        name: name,
        value: "",
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: empty value..."
    
    
    
    device.id = null
    // no deviceID 
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",
        data: [sign: IDe + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: no deviceID..."
    
    
    device.id = ""
    // empty deviceID 
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",
        
        data: [sign: IDe + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: empty deviceID..."
    
    
    
    device.id = deviceID
    // no IDe 
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: no IDe..."
    
    
    device.id = deviceID
    // empty IDe
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: "-IDe-+IDe+" + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: empty IDe..."
    

    device.id = deviceID
    // no sign  
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: no sign..."
    
    
    device.id = deviceID
    // empty sign
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + "-sign-+sign+"]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: empty sign..."
    
    
    device.id = deviceID
    // faked event
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: faked event..."
}

def off() {
    log.debug "$version off()"
    
    // got real ID from collusion Device Handler 
    // ID of 0-9-ZZ-Signed-Simulated-Switch
    def IDofSpoofedDevice = "47f86b7e-4848-4360-8430-b37ced533c9c"
    
    
    def name = "switch"
    def value = "on"
    def deviceID  = IDofSpoofedDevice
    def IDe = "-IDe-faked IDe+IDe+"
    def sign = "-sign-faked signarue+sign+"
    
    def eventParams = null
    
    
    device.id = deviceID
    // no name
    eventParams =[
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: no name..."
    
    
    
    device.id = deviceID
    // empty name
    eventParams =[
        name: "",
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: empty name..."
    
    
    
    device.id = deviceID
    // no value
    eventParams =[
        name: name,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: no value..."
    
    
    
    device.id = deviceID
    // empty value 
    eventParams =[
        name: name,
        value: "",
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: empty value..."
    
    
    
    device.id = null
    // no deviceID 
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",
        data: [sign: IDe + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: no deviceID..."
    
    
    device.id = ""
    // empty deviceID 
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",
        
        data: [sign: IDe + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: empty deviceID..."
    
    
    
    device.id = deviceID
    // no IDe 
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: no IDe..."
    
    
    device.id = deviceID
    // empty IDe
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: "-IDe-+IDe+" + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: empty IDe..."
    

    device.id = deviceID
    // no sign  
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: no sign..."
    
    
    device.id = deviceID
    // empty sign
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + "-sign-+sign+"]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: empty sign..."
    
    
    device.id = deviceID
    // faked event
    eventParams =[
        name: name,
        value: value,
        isStateChange: true,
        source: "DEVICE",

        data: [sign: IDe + sign]
        ]
    sendEvent(eventParams)
    log.debug "Device Handler forge attack: faked event..."
}

def onPhysical() {
    log.debug "$version onPhysical()"
    sendEvent(name: "switch", value: "on", type: "physical")
}

def offPhysical() {
    log.debug "$version offPhysical()"
    sendEvent(name: "switch", value: "off", type: "physical")
}

private getVersion() {
    "PUBLISHED"
}
